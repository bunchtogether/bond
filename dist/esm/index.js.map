{"version":3,"sources":["../../src/index.js"],"names":["EventEmitter","SimplePeer","PQueue","SIGNAL","START_SESSION","LEAVE_SESSION","RESPONSE","RequestError","RequestTimeoutError","getSocketMap","values","Map","map","x","socketHash","socketId","serverId","userId","clientId","sessionId","getPeerIds","Set","getSessionMap","socketMap","socket","sessionSocketMap","get","set","Bond","constructor","braidClient","roomId","options","active","Math","floor","random","Number","MAX_SAFE_INTEGER","name","publishName","toString","ready","init","logger","wrtc","userIds","peerMap","queueMap","sessionMap","requestCallbackMap","signalQueueMap","peerDisconnectTimeouts","handleSet","key","oldSocketMap","newSocketMap","oldUserIds","newUserIds","oldSessionMap","newSessionMap","socketData","has","emit","peerUserId","oldSessionSocketMap","newSessionSocketMap","data","addListener","info","clearTimeout","delete","addToQueue","connectToPeer","setTimeout","disconnectFromPeer","oldSocketData","clear","oldUserId","isReconnecting","startedSessionId","handleInitialized","startSession","catch","error","errorStack","removeListener","handleClose","handleError","promise","Promise","resolve","reject","handleValue","Error","value","all","subscribe","addServerEventListener","handleMessage","bind","startPublishing","queueId","func","queue","add","newQueue","concurrency","on","publish","type","timeoutDuration","requestId","timeout","handleResponse","success","code","text","existingPeer","peer","initiator","connected","handlePeerClose","handlePeerError","handlePeerReconnect","handleConnect","handleSignal","handleSocketLeave","oldSocketHash","warn","signalQueue","Array","isArray","length","shift","signal","destroy","onIdle","size","queueMicrotask","leaveSession","message","JSON","stringify","callback","push","destroyed","destroying","close","stopPublishing","unsubscribe","removeServerEventListener"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport type BraidClient from '@bunchtogether/braid-client';\nimport SimplePeer from 'simple-peer';\nimport PQueue from 'p-queue';\nimport {\n  SIGNAL,\n  START_SESSION,\n  LEAVE_SESSION,\n  RESPONSE,\n} from './constants';\nimport { RequestError, RequestTimeoutError } from './errors';\n\ntype Logger = {\n  debug: (string | number, ...any) => void,\n  info: (string | number, ...any) => void,\n  warn: (string | number, ...any) => void,\n  error: (string | number, ...any) => void,\n  errorStack: (error:Error | MediaError) => void,\n};\n\ntype Options = {\n  logger?: Logger,\n  wrtc?: Object\n}\n\ntype Connection = [number, number, string, number, string | false];\ntype Socket = { socketHash: string, socketId: number, serverId: number, userId: string, clientId: number, sessionId: string | false };\n\nconst getSocketMap = (values?:Array<Connection>):Map<string, Socket> => {\n  if (typeof values === 'undefined') {\n    return new Map();\n  }\n  return new Map(values.map((x) => {\n    const socketHash = `${x[0]}:${x[1]}`;\n    return [socketHash, { socketHash, socketId: x[0], serverId: x[1], userId: x[2], clientId: x[3], sessionId: x[4] }];\n  }));\n};\n\nconst getPeerIds = (values?:Array<Connection>):Set<string> => {\n  if (typeof values === 'undefined') {\n    return new Set();\n  }\n  return new Set(values.map((x) => x[2]));\n};\n\nconst getSessionMap = (socketMap:Map<string, Socket>):Map<string | false, Map<string, Socket>> => {\n  const map = new Map();\n  for (const socket of socketMap.values()) {\n    const { socketHash, sessionId } = socket;\n    const sessionSocketMap = map.get(sessionId);\n    if (typeof sessionSocketMap === 'undefined') {\n      map.set(sessionId, new Map([[socketHash, socket]]));\n    } else {\n      sessionSocketMap.set(socketHash, socket);\n    }\n  }\n  return map;\n};\n\nexport class Bond extends EventEmitter {\n  declare roomId: string;\n  declare userId: string;\n  declare clientId: number;\n  declare name: string;\n  declare publishName: string;\n  declare braidClient: BraidClient;\n  declare logger: Logger;\n  declare ready: Promise<void>;\n  declare socketMap: Map<string, Socket>;\n  declare sessionMap: Map<string | false, Map<string, Socket>>;\n  declare userIds: Set<string>;\n  declare wrtc: void | Object;\n  declare peerMap: Map<number, SimplePeer>;\n  declare queueMap: Map<string | number, PQueue>;\n  declare handleSet: (string, any) => void;\n  declare signalQueueMap: Map<number, Array<[string, Object]>>;\n  declare requestCallbackMap: Map<number, (boolean, number, string) => void | Promise<void>>;\n  declare startedSessionId: void | string;\n  declare active: boolean;\n  declare peerDisconnectTimeouts: Map<number, TimeoutID>;\n\n  constructor(braidClient: BraidClient, roomId:string, userId:string, options?: Options = {}) {\n    super();\n    this.active = true;\n    this.clientId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    this.roomId = roomId;\n    this.userId = userId;\n    const name = `signal/${this.roomId}`;\n    this.name = name;\n    this.publishName = `signal/${this.roomId}/${this.clientId.toString(36)}`;\n    this.braidClient = braidClient;\n    this.ready = this.init();\n    this.logger = options.logger || braidClient.logger;\n    this.wrtc = options.wrtc;\n    this.socketMap = new Map();\n    this.userIds = new Set();\n    this.peerMap = new Map();\n    this.queueMap = new Map();\n    this.sessionMap = new Map();\n    this.requestCallbackMap = new Map();\n    this.signalQueueMap = new Map();\n    this.peerDisconnectTimeouts = new Map();\n\n    this.handleSet = (key:string, values:Array<Connection>) => {\n      if (key !== name) {\n        return;\n      }\n      this.active = true;\n      const oldSocketMap = this.socketMap;\n      const newSocketMap = getSocketMap(values);\n      const oldUserIds = this.userIds;\n      const newUserIds = getPeerIds(values);\n      const oldSessionMap = this.sessionMap;\n      const newSessionMap = getSessionMap(newSocketMap);\n      this.userIds = newUserIds;\n      this.socketMap = newSocketMap;\n      this.sessionMap = newSessionMap;\n      for (const [socketHash, socketData] of oldSocketMap) {\n        if (!newSocketMap.has(socketHash)) {\n          this.emit('socketLeave', socketData);\n        }\n      }\n      for (const [socketHash, socketData] of newSocketMap) {\n        if (!oldSocketMap.has(socketHash)) {\n          this.emit('socketJoin', socketData);\n        }\n      }\n      for (const peerUserId of oldUserIds) {\n        if (!newUserIds.has(peerUserId)) {\n          this.emit('leave', peerUserId);\n        }\n      }\n      for (const peerUserId of newUserIds) {\n        if (!oldUserIds.has(peerUserId)) {\n          this.emit('join', peerUserId);\n        }\n      }\n      for (const [sessionId, oldSessionSocketMap] of oldSessionMap) {\n        const newSessionSocketMap = newSessionMap.get(sessionId);\n        if (typeof newSessionSocketMap === 'undefined') {\n          for (const socketData of oldSessionSocketMap.values()) {\n            this.emit('sessionLeave', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of oldSessionSocketMap) {\n            if (!newSessionSocketMap.has(socketHash)) {\n              this.emit('sessionLeave', socketData);\n            }\n          }\n        }\n      }\n      for (const [sessionId, newSessionSocketMap] of newSessionMap) {\n        const oldSessionSocketMap = oldSessionMap.get(sessionId);\n        if (typeof oldSessionSocketMap === 'undefined') {\n          for (const socketData of newSessionSocketMap.values()) {\n            this.emit('sessionJoin', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of newSessionSocketMap) {\n            if (!oldSessionSocketMap.has(socketHash)) {\n              this.emit('sessionJoin', socketData);\n            }\n          }\n        }\n      }\n    };\n    this.braidClient.data.addListener('set', this.handleSet);\n    this.addListener('socketJoin', (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (this.peerDisconnectTimeouts.has(clientId)) {\n        this.logger.info(`Clearing client ${clientId} disconnect timeout after socket join`);\n        clearTimeout(this.peerDisconnectTimeouts.get(clientId));\n        this.peerDisconnectTimeouts.delete(clientId);\n      }\n      this.addToQueue(clientId, () => this.connectToPeer(socketData));\n    });\n    this.addListener('socketLeave', (socketData:Socket) => {\n      const { clientId } = socketData;\n      clearTimeout(this.peerDisconnectTimeouts.get(clientId));\n      if (this.active) {\n        this.peerDisconnectTimeouts.set(clientId, setTimeout(() => {\n          this.peerDisconnectTimeouts.delete(clientId);\n          this.addToQueue(clientId, () => this.disconnectFromPeer(socketData));\n        }, 15000));\n      } else {\n        this.addToQueue(clientId, () => this.disconnectFromPeer(socketData));\n      }\n    });\n    this.braidClient.addListener('close', () => {\n      const oldSocketData = [...this.socketMap.values()];\n      const oldUserIds = [...this.userIds];\n      this.socketMap.clear();\n      this.userIds.clear();\n      for (const socketData of oldSocketData) {\n        this.emit('socketLeave', socketData);\n      }\n      for (const oldUserId of oldUserIds) {\n        this.emit('leave', oldUserId);\n      }\n    });\n    this.braidClient.addListener('reconnect', (isReconnecting: boolean) => {\n      if (!isReconnecting) {\n        return;\n      }\n      const startedSessionId = this.startedSessionId;\n      const handleInitialized = () => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.info(`Restarting session ${startedSessionId}`);\n          this.startSession(startedSessionId).catch((error) => {\n            this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleClose = () => {\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleError = (error:Error) => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n          this.logger.errorStack(error);\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      this.braidClient.addListener('initialized', handleInitialized);\n      this.braidClient.addListener('close', handleClose);\n      this.braidClient.addListener('error', handleError);\n    });\n  }\n\n  async init() {\n    const promise = new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(new Error('Closed before initialization completed'));\n      };\n      const handleValue = (key:string, value:any) => {\n        if (key !== this.name) {\n          return;\n        }\n        if (typeof value === 'undefined') {\n          return;\n        }\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(error);\n      };\n      this.addListener('close', handleClose);\n      this.braidClient.data.addListener('set', handleValue);\n      this.braidClient.addListener('error', handleError);\n      handleValue(this.name, this.braidClient.data.get(this.name));\n    });\n    try {\n      await Promise.all([\n        this.braidClient.subscribe(this.name),\n        this.braidClient.addServerEventListener(this.name, this.handleMessage.bind(this)),\n      ]);\n      await promise;\n      await this.braidClient.startPublishing(this.publishName);\n    } catch (error) {\n      this.braidClient.logger.error(`Unable to join ${this.roomId}`);\n      throw error;\n    }\n  }\n\n  addToQueue(queueId:string | number, func:() => Promise<void>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      return queue.add(func);\n    }\n    const newQueue = new PQueue({ concurrency: 1 });\n    const promise = newQueue.add(func);\n    this.queueMap.set(queueId, newQueue);\n    newQueue.on('idle', () => {\n      this.queueMap.delete(queueId);\n    });\n    return promise;\n  }\n\n  async publish(type:string, value:Object, timeoutDuration?: number = 5000):Promise<{ text:string, code:number }> {\n    await this.ready;\n    const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        this.requestCallbackMap.delete(requestId);\n        reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n      }, timeoutDuration);\n      const handleResponse = (success:boolean, code: number, text:string) => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        if (success) {\n          resolve({ code, text });\n          return;\n        }\n        reject(new RequestError(text, code));\n      };\n      this.requestCallbackMap.set(requestId, handleResponse);\n      this.braidClient.publish(this.publishName, { requestId, type, value });\n    });\n  }\n\n  async connectToPeer({ userId, serverId, socketId, clientId, socketHash }:Socket) {\n    const existingPeer = this.peerMap.get(clientId);\n    const peer = existingPeer || new SimplePeer({ initiator: userId > this.userId, wrtc: this.wrtc });\n    this.peerMap.set(clientId, peer);\n    if (peer.connected) {\n      peer.emit('peerReconnect');\n      const handlePeerClose = () => {\n        this.logger.info(`Peer ${socketHash} disconnected`);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('peerReconnect', handlePeerReconnect);\n        this.emit('disconnect', { userId, serverId, socketId, peer });\n      };\n      const handlePeerError = (error:Error) => {\n        this.logger.error(`Peer ${socketHash} error`);\n        this.logger.errorStack(error);\n        this.emit('peerError', { error, userId, serverId, socketId, peer });\n      };\n      const handlePeerReconnect = () => {\n        this.logger.info(`Peer ${socketHash} reconnected`);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('peerReconnect', handlePeerReconnect);\n      };\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('error', handlePeerError);\n      peer.addListener('peerReconnect', handlePeerReconnect);\n      this.emit('connect', { userId, clientId, serverId, socketId, peer });\n      return;\n    }\n    await new Promise((resolve) => {\n      const timeout = setTimeout(() => {\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n        resolve();\n      }, 5000);\n      const handleConnect = () => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n        const handlePeerClose = () => {\n          this.logger.info(`Peer ${socketHash} disconnected`);\n          peer.removeListener('error', handlePeerError);\n          peer.removeListener('close', handlePeerClose);\n          peer.removeListener('peerReconnect', handlePeerReconnect);\n          this.emit('disconnect', { userId, serverId, socketId, peer });\n        };\n        const handlePeerError = (error:Error) => {\n          this.logger.error(`Peer ${socketHash} error`);\n          this.logger.errorStack(error);\n          this.emit('peerError', { error, userId, serverId, socketId, peer });\n        };\n        const handlePeerReconnect = () => {\n          this.logger.info(`Peer ${socketHash} reconnected`);\n          peer.removeListener('error', handlePeerError);\n          peer.removeListener('close', handlePeerClose);\n          peer.removeListener('peerReconnect', handlePeerReconnect);\n        };\n        peer.addListener('close', handlePeerClose);\n        peer.addListener('error', handlePeerError);\n        peer.addListener('peerReconnect', handlePeerReconnect);\n        this.emit('connect', { userId, clientId, serverId, socketId, peer });\n        resolve();\n      };\n      const handleSignal = async (data:Object) => {\n        try {\n          await this.publish(SIGNAL, { serverId, socketId, data });\n        } catch (error) {\n          this.logger.error(`Unable to signal ${socketHash}`);\n          this.logger.errorStack(error);\n        }\n      };\n      const handleClose = () => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n        this.logger.error(`Error connecting to ${userId}`);\n        this.logger.errorStack(error);\n        this.emit('error', error);\n        resolve();\n      };\n      const handleSocketLeave = ({ socketHash: oldSocketHash }:Socket) => {\n        if (socketHash !== oldSocketHash) {\n          return;\n        }\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n        this.logger.warn(`Unable to connect to ${userId}, socket closed before connection was completed`);\n        resolve();\n      };\n      peer.addListener('error', handleError);\n      peer.addListener('connect', handleConnect);\n      peer.addListener('signal', handleSignal);\n      this.addListener('close', handleClose);\n      this.addListener('socketLeave', handleSocketLeave);\n      const signalQueue = this.signalQueueMap.get(clientId);\n      if (Array.isArray(signalQueue)) {\n        while (signalQueue.length > 0) {\n          const data = signalQueue.shift();\n          peer.signal(data);\n        }\n      }\n    });\n  }\n\n  async disconnectFromPeer({ clientId }:Socket) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return;\n    }\n    peer.destroy();\n    this.peerMap.delete(clientId);\n  }\n\n  async onIdle() {\n    while (this.queueMap.size > 0) {\n      for (const queue of this.queueMap.values()) {\n        await queue.onIdle();\n      }\n      // $FlowFixMe\n      await new Promise((resolve) => queueMicrotask(resolve));\n    }\n  }\n\n  async startSession(sessionId:string) {\n    await this.publish(START_SESSION, { sessionId });\n    this.startedSessionId = sessionId;\n  }\n\n  async leaveSession() {\n    await this.publish(LEAVE_SESSION, {});\n    delete this.startedSessionId;\n  }\n\n  handleMessage(message:{ requestId?: number, type:string, value:Object }) {\n    if (typeof message !== 'object') {\n      this.logger.error('Invalid message format');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    const { requestId, type, value } = message;\n    if (typeof type !== 'string') {\n      this.logger.error('Invalid message format, type property should be of type \"string\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (typeof value !== 'object') {\n      this.logger.error('Invalid message format, value property should be of type \"object\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (type === RESPONSE && typeof requestId === 'number') {\n      const callback = this.requestCallbackMap.get(requestId);\n      if (typeof callback !== 'function') {\n        this.logger.error(`Callback for request ${requestId} does not exist`);\n        return;\n      }\n      const { success, code, text } = value;\n      if (typeof success !== 'boolean') {\n        this.logger.error('Response message contained an invalid value success property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value success property');\n        return;\n      }\n      if (typeof code !== 'number') {\n        this.logger.error('Response message contained an invalid value code property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value code property');\n        return;\n      }\n      if (typeof text !== 'string') {\n        this.logger.error('Response message contained an invalid value text property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value text property');\n        return;\n      }\n      callback(success, code, text);\n      return;\n    }\n    switch (type) {\n      case SIGNAL:\n        try {\n          const {\n            clientId,\n            serverId,\n            socketId,\n            data,\n          } = value;\n          if (typeof serverId !== 'number') {\n            this.logger.error('Signal message contained an invalid server ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof socketId !== 'number') {\n            this.logger.error('Signal message contained an invalid socket ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof data !== 'object') {\n            this.logger.error('Signal message contained an invalid data property');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const peer = this.peerMap.get(clientId);\n          if (typeof peer === 'undefined') {\n            const signalQueue = this.signalQueueMap.get(clientId);\n            if (Array.isArray(signalQueue)) {\n              signalQueue.push(data);\n              return;\n            }\n            this.signalQueueMap.set(clientId, [data]);\n            return;\n          }\n          if (peer.destroyed || peer.destroying) {\n            return;\n          }\n          peer.signal(data);\n        } catch (error) {\n          this.logger.error('Unable to process signal message');\n          this.logger.errorStack(error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown message type ${type}`);\n    }\n  }\n\n  close() {\n    this.active = false;\n    const oldSocketData = [...this.socketMap.values()];\n    const oldUserIds = [...this.userIds];\n    this.braidClient.data.removeListener('set', this.handleSet);\n    this.braidClient.stopPublishing(this.publishName);\n    this.braidClient.unsubscribe(this.name);\n    this.braidClient.removeServerEventListener(this.name);\n    this.socketMap.clear();\n    this.userIds.clear();\n    for (const timeout of this.peerDisconnectTimeouts.values()) {\n      clearTimeout(timeout);\n    }\n    for (const socketData of oldSocketData) {\n      this.emit('socketLeave', socketData);\n    }\n    for (const userId of oldUserIds) {\n      this.emit('leave', userId);\n    }\n    this.emit('close');\n  }\n}\n\n"],"file":"index.js"}