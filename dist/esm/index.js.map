{"version":3,"sources":["../../src/index.js"],"names":["EventEmitter","ObservedRemoveMap","SimplePeer","PQueue","pack","unpack","SIGNAL","START_SESSION","LEAVE_SESSION","JOIN_SESSION","INVITE_TO_SESSION","DECLINE_INVITE_TO_SESSION","SESSION_QUEUE","ABORT_SESSION_JOIN_REQUEST","SESSION_JOIN_REQUEST","SESSION_JOIN_RESPONSE","RESPONSE","AbortError","RequestError","StartSessionError","RequestTimeoutError","JoinSessionError","LeaveSessionError","SignalError","SessionJoinResponseError","ClientClosedError","InviteToSessionError","InvitationDeclinedError","InvitationTimeoutError","DeclineInviteToSessionError","Ping","Pong","ObservedRemoveDump","getSocketMap","values","Map","map","x","socketHash","socketId","serverId","userId","clientId","sessionId","getPeerIds","Set","getSessionMap","socketMap","socket","sessionClientMap","get","set","Bond","constructor","braidClient","roomId","options","active","Math","floor","random","Number","MAX_SAFE_INTEGER","name","publishName","toString","logger","peerOptions","userIds","peerMap","peerReconnectMap","queueMap","sessionMap","inviteDeclineHandlerMap","requestCallbackMap","signalQueueMap","peerDisconnectTimeoutMap","sessionJoinHandlerMap","sessionJoinRequestMap","data","bufferPublishing","sessionClientOffsetMap","addListener","handleSessionClientJoin","bind","_ready","init","ready","joinSession","handleSet","key","oldSocketMap","newSocketMap","oldUserIds","newUserIds","oldSessionMap","newSessionMap","oldSessionClientIds","sessionClientIds","newSessionClientIds","socketData","has","emit","peerUserId","oldSessionSocketMap","newSessionSocketMap","info","clearTimeout","delete","addToQueue","connectToPeer","setTimeout","disconnectFromPeer","oldSocketData","clear","oldUserId","isReconnecting","startedSessionId","joinedSessionId","handleInitialized","startSession","catch","error","errorStack","removeListener","handleClose","handleError","clientIds","keys","promise","Promise","resolve","reject","handleValue","Error","value","console","log","JSON","stringify","all","subscribe","addServerEventListener","handleMessage","startPublishing","queueId","func","queue","add","newQueue","concurrency","on","publish","type","timeoutDuration","CustomError","requestId","timeout","handleResponse","success","code","text","isConnectedToClient","peer","connected","reconnectCount","reconnectDelay","round","handleSocketLeave","oldSocketHash","existingPeer","Object","assign","initiator","addPeerListeners","cleanup","handleStream","handlePeerError","handlePeerClose","handlePeerReconnect","stream","getTracks","forEach","track","stop","dispatchEvent","Event","warn","handleConnect","handleSignal","signalQueue","Array","isArray","length","shift","signal","sendStream","getConnectedPeer","addStream","destroy","onIdle","size","queueMicrotask","cleanupSession","newSessionId","oldSessionId","timelineValue","didStartSession","inviteToSession","sessionJoinHandler","hasSessionId","globalThis","crypto","randomUUID","automaticSessionJoinHandler","handleSessionJoin","leaveSession","handleDecline","didJoinSession","message","callback","push","destroyed","destroying","requestHash","inviteDeclineHandler","existing","abort","abortController","AbortController","addEventListener","response","abortSignal","aborted","_peer","handleSessionClientLeave","handlePeer","newClientId","_p","oldClientId","interval","offset","handlePeerData","handleDataPublish","clearInterval","sendToPeer","unpacked","send","packed","timestamp","Date","now","wallclock","performance","process","removeEventListener","handleAbort","setInterval","dump","close","stopPublishing","unsubscribe","removeServerEventListener","responseId","responseType","responseValue","then","declineInviteToSession"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport ObservedRemoveMap from 'observed-remove/dist/map';\nimport type BraidClient from '@bunchtogether/braid-client';\nimport SimplePeer from 'simple-peer';\nimport PQueue from 'p-queue';\nimport {\n  pack,\n  unpack,\n} from 'msgpackr';\nimport {\n  SIGNAL,\n  START_SESSION,\n  LEAVE_SESSION,\n  JOIN_SESSION,\n  INVITE_TO_SESSION,\n  DECLINE_INVITE_TO_SESSION,\n  SESSION_QUEUE,\n  ABORT_SESSION_JOIN_REQUEST,\n  SESSION_JOIN_REQUEST,\n  SESSION_JOIN_RESPONSE,\n  RESPONSE,\n} from './constants';\nimport {\n  AbortError,\n  RequestError,\n  StartSessionError,\n  RequestTimeoutError,\n  JoinSessionError,\n  LeaveSessionError,\n  SignalError,\n  SessionJoinResponseError,\n  ClientClosedError,\n  InviteToSessionError,\n  InvitationDeclinedError,\n  InvitationTimeoutError,\n  DeclineInviteToSessionError,\n} from './errors';\nimport {\n  Ping,\n  Pong,\n  ObservedRemoveDump,\n} from './messagepack';\n\ntype Logger = {\n  debug: (string | number, ...any) => void,\n  info: (string | number, ...any) => void,\n  warn: (string | number, ...any) => void,\n  error: (string | number, ...any) => void,\n  errorStack: (error:Error | MediaError) => void,\n};\n\ntype Options = {\n  peerOptions?: Object,\n  logger?: Logger,\n  sessionId?: string\n}\n\nexport type SessionJoinHandler = ({ sessionId: string, userId: string, abortSignal: AbortSignal }) => [boolean, number, string] | Promise<[boolean, number, string]>;\nexport type Connection = [number, number, string, number, string | false];\nexport type Socket = { socketHash: string, socketId: number, serverId: number, userId: string, clientId: number, sessionId: string | false };\n\nconst getSocketMap = (values?:Array<Connection>):Map<string, Socket> => {\n  if (typeof values === 'undefined') {\n    return new Map();\n  }\n  return new Map(values.map((x) => {\n    const socketHash = `${x[0]}:${x[1]}`;\n    return [socketHash, { socketHash, socketId: x[0], serverId: x[1], userId: x[2], clientId: x[3], sessionId: x[4] }];\n  }));\n};\n\nconst getPeerIds = (values?:Array<Connection>):Set<string> => {\n  if (typeof values === 'undefined') {\n    return new Set();\n  }\n  return new Set(values.map((x) => x[2]));\n};\n\nconst getSessionMap = (socketMap:Map<string, Socket>):Map<string | false, Map<number, Socket>> => {\n  const map = new Map();\n  for (const socket of socketMap.values()) {\n    const { clientId, sessionId } = socket;\n    const sessionClientMap = map.get(sessionId);\n    if (typeof sessionClientMap === 'undefined') {\n      map.set(sessionId, new Map([[clientId, socket]]));\n    } else {\n      sessionClientMap.set(clientId, socket);\n    }\n  }\n  return map;\n};\n\nexport class Bond extends EventEmitter {\n  static declineInviteToSession: (BraidClient, AbortSignal, { roomId: string, userId: string, clientId: number, sessionId: string, data: Object }) => Promise<{ code:number, text:string }>;\n\n  declare roomId: string;\n  declare clientId: number;\n  declare name: string;\n  declare publishName: string;\n  declare braidClient: BraidClient;\n  declare logger: Logger;\n  declare _ready: Promise<void>;\n  declare ready: Promise<void>;\n  declare socketMap: Map<string, Socket>;\n  declare sessionMap: Map<string | false, Map<number, Socket>>;\n  declare userIds: Set<string>;\n  declare peerOptions: void | Object;\n  declare peerMap: Map<number, SimplePeer>;\n  declare peerReconnectMap: Map<number, number>;\n  declare queueMap: Map<string | number, PQueue>;\n  declare handleSet: (string, any) => void;\n  declare signalQueueMap: Map<number, Array<[string, Object]>>;\n  declare requestCallbackMap: Map<number, (boolean, number, string) => void | Promise<void>>;\n  declare inviteDeclineHandlerMap: Map<string, () => Promise<void>>;\n  declare sessionId: void | string;\n  declare startedSessionId: void | string;\n  declare joinedSessionId: void | string;\n  declare active: boolean;\n  declare peerDisconnectTimeoutMap: Map<number, TimeoutID>;\n  declare sessionJoinHandlerMap: Map<string, SessionJoinHandler>;\n  declare sessionJoinRequestMap: Map<string, [Promise<void>, AbortController]>;\n  declare data: ObservedRemoveMap<string | number, any>;\n  declare sessionClientOffsetMap: Map<number, number>;\n\n\n  constructor(braidClient: BraidClient, roomId:string, userId:string, options?: Options = {}) {\n    super();\n    this.active = true;\n    this.clientId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    this.roomId = roomId;\n    const name = `signal/${this.roomId}`;\n    this.name = name;\n    this.publishName = `signal/${this.roomId}/${this.clientId.toString(36)}`;\n    this.braidClient = braidClient;\n    this.logger = options.logger || braidClient.logger;\n    this.peerOptions = options.peerOptions;\n    this.socketMap = new Map();\n    this.userIds = new Set();\n    this.peerMap = new Map();\n    this.peerReconnectMap = new Map();\n    this.queueMap = new Map();\n    this.sessionMap = new Map();\n    this.inviteDeclineHandlerMap = new Map();\n    this.requestCallbackMap = new Map();\n    this.signalQueueMap = new Map();\n    this.peerDisconnectTimeoutMap = new Map();\n    this.sessionJoinHandlerMap = new Map();\n    this.sessionJoinRequestMap = new Map();\n    this.data = new ObservedRemoveMap([], { bufferPublishing: 0 });\n    this.sessionClientOffsetMap = new Map();\n    this.addListener('sessionClientJoin', this.handleSessionClientJoin.bind(this));\n    this._ready = this.init(); // eslint-disable-line no-underscore-dangle\n    if (typeof options.sessionId === 'string') {\n      this.ready = this.joinSession(options.sessionId);\n    } else {\n      this.ready = this._ready; // eslint-disable-line no-underscore-dangle\n    }\n    this.handleSet = (key:string, values:Array<Connection>) => {\n      if (key !== name) {\n        return;\n      }\n      this.active = true;\n      const oldSocketMap = this.socketMap;\n      const newSocketMap = getSocketMap(values);\n      const oldUserIds = this.userIds;\n      const newUserIds = getPeerIds(values);\n      const oldSessionMap = this.sessionMap;\n      const newSessionMap = getSessionMap(newSocketMap);\n      const oldSessionClientIds = this.sessionClientIds;\n      this.userIds = newUserIds;\n      this.socketMap = newSocketMap;\n      this.sessionMap = newSessionMap;\n      const newSessionClientIds = this.sessionClientIds;\n      for (const [socketHash, socketData] of oldSocketMap) {\n        if (!newSocketMap.has(socketHash)) {\n          this.emit('socketLeave', socketData);\n        }\n      }\n      for (const [socketHash, socketData] of newSocketMap) {\n        if (!oldSocketMap.has(socketHash)) {\n          this.emit('socketJoin', socketData);\n        }\n      }\n      for (const peerUserId of oldUserIds) {\n        if (!newUserIds.has(peerUserId)) {\n          this.emit('leave', peerUserId);\n        }\n      }\n      for (const peerUserId of newUserIds) {\n        if (!oldUserIds.has(peerUserId)) {\n          this.emit('join', peerUserId);\n        }\n      }\n      for (const clientId of oldSessionClientIds) {\n        if (clientId === this.clientId) {\n          continue;\n        }\n        if (!newSessionClientIds.has(clientId)) {\n          this.emit('sessionClientLeave', clientId);\n        }\n      }\n      for (const clientId of newSessionClientIds) {\n        if (clientId === this.clientId) {\n          continue;\n        }\n        if (!oldSessionClientIds.has(clientId)) {\n          this.emit('sessionClientJoin', clientId);\n        }\n      }\n      for (const [sessionId, oldSessionSocketMap] of oldSessionMap) {\n        const newSessionSocketMap = newSessionMap.get(sessionId);\n        if (typeof newSessionSocketMap === 'undefined') {\n          for (const socketData of oldSessionSocketMap.values()) {\n            this.emit('sessionLeave', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of oldSessionSocketMap) {\n            if (!newSessionSocketMap.has(socketHash)) {\n              this.emit('sessionLeave', socketData);\n            }\n          }\n        }\n      }\n      for (const [sessionId, newSessionSocketMap] of newSessionMap) {\n        const oldSessionSocketMap = oldSessionMap.get(sessionId);\n        if (typeof oldSessionSocketMap === 'undefined') {\n          for (const socketData of newSessionSocketMap.values()) {\n            this.emit('sessionJoin', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of newSessionSocketMap) {\n            if (!oldSessionSocketMap.has(socketHash)) {\n              this.emit('sessionJoin', socketData);\n            }\n          }\n        }\n      }\n    };\n    this.braidClient.data.addListener('set', this.handleSet);\n    this.addListener('socketJoin', (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (clientId === this.clientId) {\n        return;\n      }\n      if (this.peerDisconnectTimeoutMap.has(clientId)) {\n        this.logger.info(`Clearing client ${clientId} disconnect timeout after socket join`);\n        clearTimeout(this.peerDisconnectTimeoutMap.get(clientId));\n        this.peerDisconnectTimeoutMap.delete(clientId);\n      }\n      this.addToQueue(clientId, () => this.connectToPeer(socketData));\n    });\n    this.addListener('socketLeave', (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (clientId === this.clientId) {\n        return;\n      }\n      clearTimeout(this.peerDisconnectTimeoutMap.get(clientId));\n      if (this.active) {\n        this.peerDisconnectTimeoutMap.set(clientId, setTimeout(() => {\n          this.peerDisconnectTimeoutMap.delete(clientId);\n          this.addToQueue(clientId, () => this.disconnectFromPeer(socketData));\n        }, 15000));\n      } else {\n        this.addToQueue(clientId, () => this.disconnectFromPeer(socketData));\n      }\n    });\n    this.braidClient.addListener('close', () => {\n      const oldSocketData = [...this.socketMap.values()];\n      const oldUserIds = [...this.userIds];\n      this.socketMap.clear();\n      this.userIds.clear();\n      for (const socketData of oldSocketData) {\n        this.emit('socketLeave', socketData);\n      }\n      for (const oldUserId of oldUserIds) {\n        this.emit('leave', oldUserId);\n      }\n    });\n    this.braidClient.addListener('reconnect', (isReconnecting: boolean) => {\n      if (!isReconnecting) {\n        return;\n      }\n      const startedSessionId = this.startedSessionId;\n      const joinedSessionId = this.joinedSessionId;\n      const handleInitialized = () => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.info(`Restarting session ${startedSessionId}`);\n          this.startSession(startedSessionId).catch((error) => {\n            this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        if (typeof joinedSessionId === 'string') {\n          this.logger.info(`Rejoining session ${joinedSessionId}`);\n          this.joinSession(joinedSessionId).catch((error) => {\n            this.logger.error(`Unable to rejoin session ${joinedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleClose = () => {\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleError = (error:Error) => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n          this.logger.errorStack(error);\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      this.braidClient.addListener('initialized', handleInitialized);\n      this.braidClient.addListener('close', handleClose);\n      this.braidClient.addListener('error', handleError);\n    });\n  }\n\n  get sessionClientIds():Set<number> {\n    const sessionId = this.sessionId;\n    if (typeof sessionId !== 'string') {\n      return new Set();\n    }\n    const sessionClientMap = this.sessionMap.get(sessionId);\n    if (typeof sessionClientMap === 'undefined') {\n      return new Set();\n    }\n    const clientIds = new Set(sessionClientMap.keys());\n    clientIds.delete(this.clientId);\n    return clientIds;\n  }\n\n  async init() {\n    const promise = new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(new Error('Closed before initialization completed'));\n      };\n      const handleValue = (key:string, value:any) => {\n        if (key !== this.name) {\n          return;\n        }\n        if (typeof value === 'undefined') {\n          return;\n        }\n        console.log(JSON.stringify(value, null, 2));\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(error);\n      };\n      this.addListener('close', handleClose);\n      this.braidClient.data.addListener('set', handleValue);\n      this.braidClient.addListener('error', handleError);\n      handleValue(this.name, this.braidClient.data.get(this.name));\n    });\n    try {\n      await Promise.all([\n        this.braidClient.subscribe(this.name),\n        this.braidClient.addServerEventListener(this.name, this.handleMessage.bind(this)),\n      ]);\n      await promise;\n      await this.braidClient.startPublishing(this.publishName);\n    } catch (error) {\n      this.braidClient.logger.error(`Unable to join ${this.roomId}`);\n      throw error;\n    }\n  }\n\n  addToQueue(queueId:string | number, func:() => Promise<*>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      return queue.add(func);\n    }\n    const newQueue = new PQueue({ concurrency: 1 });\n    const promise = newQueue.add(func);\n    this.queueMap.set(queueId, newQueue);\n    newQueue.on('idle', () => {\n      this.queueMap.delete(queueId);\n    });\n    return promise;\n  }\n\n  async publish(type:string, value:Object, options?: { timeoutDuration?: number, CustomError?: Class<RequestError> } = {}):Promise<{ text:string, code:number }> {\n    await this._ready; // eslint-disable-line no-underscore-dangle\n    const timeoutDuration = typeof options.timeoutDuration === 'number' ? options.timeoutDuration : 5000;\n    const CustomError = typeof options.CustomError === 'function' ? options.CustomError : RequestError;\n    const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    return new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        reject(new ClientClosedError(`Client closed before ${type} request completed`));\n      };\n      const timeout = setTimeout(() => {\n        this.requestCallbackMap.delete(requestId);\n        this.removeListener('close', handleClose);\n        reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n      }, timeoutDuration);\n      const handleResponse = (success:boolean, code: number, text:string) => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        if (success) {\n          resolve({ code, text });\n          return;\n        }\n        reject(new CustomError(text, code));\n      };\n      this.addListener('close', handleClose);\n      this.requestCallbackMap.set(requestId, handleResponse);\n      this.braidClient.publish(this.publishName, { requestId, type, value });\n    });\n  }\n\n  isConnectedToClient(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return false;\n    }\n    return !!peer.connected;\n  }\n\n  async connectToPeer(socket:Socket) {\n    const { userId, serverId, socketId, clientId, socketHash } = socket;\n    const reconnectCount = this.peerReconnectMap.get(clientId) || 0;\n    const reconnectDelay = reconnectCount > 5 ? 30000 : 1000 * (reconnectCount * reconnectCount);\n    if (reconnectDelay > 0) {\n      this.logger.info(`Delaying connect by ${Math.round(reconnectDelay / 1000)} ${reconnectDelay === 1000 ? 'second' : 'seconds'} on attempt ${reconnectCount}`);\n      await new Promise((resolve) => {\n        const timeout = setTimeout(() => {\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        }, reconnectDelay);\n        const handleClose = () => {\n          clearTimeout(timeout);\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        };\n        const handleSocketLeave = ({ socketHash: oldSocketHash }:Socket) => {\n          if (socketHash !== oldSocketHash) {\n            return;\n          }\n          clearTimeout(timeout);\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        };\n        this.addListener('close', handleClose);\n        this.addListener('socketLeave', handleSocketLeave);\n      });\n      if (!this.socketMap.has(socketHash)) {\n        return;\n      }\n    }\n    const existingPeer = this.peerMap.get(clientId);\n    const options = Object.assign({}, { initiator: clientId > this.clientId }, this.peerOptions);\n    const peer = existingPeer || new SimplePeer(options);\n    this.peerMap.set(clientId, peer);\n    this.peerReconnectMap.set(clientId, reconnectCount + 1);\n    this.emit('peer', { clientId, peer });\n    const addPeerListeners = () => {\n      this.peerReconnectMap.set(clientId, 0);\n      const cleanup = () => {\n        peer.removeListener('stream', handleStream);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('peerReconnect', handlePeerReconnect);\n      };\n      const handleStream = (stream:MediaStream) => {\n        if (!this.sessionClientIds.has(clientId)) {\n          this.logger.error(`Received an unexpected stream from non-session user ${userId} client ${clientId}`);\n          stream.getTracks().forEach((track) => {\n            track.stop();\n            track.dispatchEvent(new Event('stop'));\n          });\n          return;\n        }\n        this.emit('stream', { stream, userId, serverId, socketId, clientId });\n      };\n      const handlePeerClose = () => {\n        this.logger.info(`Disconnected from user ${userId} client ${clientId}`);\n        cleanup();\n        this.emit('disconnect', { userId, serverId, socketId, clientId });\n        if (this.peerMap.has(clientId)) {\n          this.peerMap.delete(clientId);\n          this.connectToPeer(socket);\n          this.logger.warn(`Reconnecting to user ${userId} client ${clientId}`);\n        }\n      };\n      const handlePeerError = (error:Error) => {\n        this.logger.error(`Error in connection to user ${userId} client ${clientId}`);\n        this.logger.errorStack(error);\n        this.emit('peerError', { userId, serverId, socketId, clientId, error });\n      };\n      const handlePeerReconnect = () => {\n        this.logger.info(`Reconnected to user ${userId} client ${clientId}`);\n        cleanup();\n      };\n      peer.addListener('stream', handleStream);\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('error', handlePeerError);\n      peer.addListener('peerReconnect', handlePeerReconnect);\n    };\n    if (peer.connected) {\n      peer.emit('peerReconnect');\n      addPeerListeners();\n      this.emit('connect', { userId, clientId, serverId, socketId, peer });\n      return;\n    }\n    await new Promise((resolve) => {\n      const cleanup = () => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n      };\n      const timeout = setTimeout(() => {\n        cleanup();\n        resolve();\n      }, 5000);\n      const handleConnect = () => {\n        cleanup();\n        addPeerListeners();\n        this.emit('connect', { userId, clientId, serverId, socketId, peer });\n        resolve();\n      };\n      const handleSignal = async (data:Object) => {\n        try {\n          await this.publish(SIGNAL, { serverId, socketId, data }, { CustomError: SignalError });\n        } catch (error) {\n          this.logger.error(`Unable to signal user ${userId} client ${clientId} closed`);\n          this.logger.errorStack(error);\n        }\n      };\n      const handleClose = () => {\n        cleanup();\n        resolve();\n      };\n      const handlePeerClose = () => {\n        this.logger.info(`Connection to user ${userId} client ${clientId} closed`);\n        cleanup();\n        if (this.peerMap.has(clientId)) {\n          this.peerMap.delete(clientId);\n          this.connectToPeer(socket);\n          this.logger.warn(`Reconnecting to user ${userId} client ${clientId}`);\n        }\n        resolve();\n      };\n      const handlePeerError = (error:Error) => {\n        cleanup();\n        this.logger.error(`Error connecting to ${userId}`);\n        this.logger.errorStack(error);\n        this.emit('peerError', { userId, serverId, socketId, clientId, error });\n        this.emit('error', error);\n        resolve();\n      };\n      const handleSocketLeave = ({ socketHash: oldSocketHash }:Socket) => {\n        if (socketHash !== oldSocketHash) {\n          return;\n        }\n        cleanup();\n        this.logger.warn(`Unable to connect to user ${userId} client ${clientId}, socket closed before connection was completed`);\n        resolve();\n      };\n      peer.addListener('error', handlePeerError);\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('connect', handleConnect);\n      peer.addListener('signal', handleSignal);\n      this.addListener('close', handleClose);\n      this.addListener('socketLeave', handleSocketLeave);\n      const signalQueue = this.signalQueueMap.get(clientId);\n      if (Array.isArray(signalQueue)) {\n        while (signalQueue.length > 0) {\n          const data = signalQueue.shift();\n          peer.signal(data);\n        }\n      }\n    });\n  }\n\n  async sendStream(clientId:number, stream:MediaStream) {\n    const peer = await this.getConnectedPeer(clientId);\n    peer.addStream(stream);\n  }\n\n  async disconnectFromPeer({ clientId }:Socket) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return;\n    }\n    this.peerMap.delete(clientId);\n    peer.destroy();\n  }\n\n  async onIdle() {\n    while (this.queueMap.size > 0) {\n      for (const queue of this.queueMap.values()) {\n        await queue.onIdle();\n      }\n      // $FlowFixMe\n      await new Promise((resolve) => queueMicrotask(resolve));\n    }\n  }\n\n  cleanupSession(newSessionId?:string) {\n    const startedSessionId = this.startedSessionId;\n    delete this.startedSessionId;\n    delete this.joinedSessionId;\n    if (typeof startedSessionId === 'string') {\n      this.sessionJoinHandlerMap.delete(startedSessionId);\n    }\n    const oldSessionId = this.sessionId;\n    if (oldSessionId === newSessionId) {\n      return;\n    }\n    const oldSessionClientIds = this.sessionClientIds;\n    this.sessionId = newSessionId;\n    const newSessionClientIds = this.sessionClientIds;\n    for (const clientId of oldSessionClientIds) {\n      if (clientId === this.clientId) {\n        continue;\n      }\n      if (!newSessionClientIds.has(clientId)) {\n        this.emit('sessionClientLeave', clientId);\n      }\n    }\n    const timelineValue = this.data.get(this.clientId);\n    this.data.clear();\n    this.sessionClientOffsetMap.clear();\n    if (typeof timelineValue !== 'undefined') {\n      this.data.set(this.clientId);\n    }\n    for (const clientId of newSessionClientIds) {\n      if (clientId === this.clientId) {\n        continue;\n      }\n      if (!oldSessionClientIds.has(clientId)) {\n        this.emit('sessionClientJoin', clientId);\n      }\n    }\n  }\n\n  didStartSession() {\n    if (!this.sessionId) {\n      return false;\n    }\n    return this.startedSessionId === this.sessionId;\n  }\n\n  async inviteToSession(userId:string, options?:{ data?:Object, timeoutDuration?: number, sessionJoinHandler?: SessionJoinHandler } = {}) {\n    const { data, timeoutDuration = 30000, sessionJoinHandler } = options;\n    const queue = this.queueMap.get(SESSION_QUEUE);\n    if (typeof queue !== 'undefined') {\n      await queue.onIdle();\n    }\n    const hasSessionId = this.sessionId === 'string';\n    // $FlowFixMe\n    const sessionId = this.sessionId || globalThis.crypto.randomUUID(); // eslint-disable-line no-undef\n    if (hasSessionId) {\n      await this.publish(INVITE_TO_SESSION, { userId, sessionId, data }, { CustomError: InviteToSessionError });\n    } else {\n      const automaticSessionJoinHandler = async (values) => {\n        if (values.userId === userId) {\n          return [true, 200, 'Authorized'];\n        }\n        if (typeof sessionJoinHandler === 'function') {\n          return sessionJoinHandler(values);\n        }\n        return [true, 200, 'Authorized'];\n      };\n      await this.startSession(sessionId, automaticSessionJoinHandler);\n      await this.publish(INVITE_TO_SESSION, { userId, sessionId, data }, { CustomError: InviteToSessionError });\n    }\n    await new Promise((resolve, reject) => {\n      const cleanup = () => {\n        clearTimeout(timeout);\n        this.removeListener('sessionJoin', handleSessionJoin);\n        this.removeListener('close', handleClose);\n        this.inviteDeclineHandlerMap.delete(`${userId}:${sessionId}`);\n      };\n      const leaveSession = async () => {\n        if (hasSessionId) {\n          return;\n        }\n        try {\n          await this.leaveSession();\n        } catch (error) {\n          if (error instanceof ClientClosedError) {\n            return;\n          }\n          this.logger.error('Unable to leave session after invite timeout');\n          this.logger.errorStack(error);\n        }\n      };\n      const timeout = setTimeout(async () => {\n        cleanup();\n        await leaveSession();\n        reject(new InvitationTimeoutError(`Invitation timed out after ${Math.round(timeoutDuration / 100) / 10} seconds`));\n      }, timeoutDuration);\n      const handleSessionJoin = (socket: Socket) => {\n        if (socket.sessionId !== sessionId) {\n          return;\n        }\n        if (socket.userId !== userId) {\n          return;\n        }\n        cleanup();\n        resolve();\n      };\n      const handleClose = () => {\n        cleanup();\n        reject(new ClientClosedError('Closed before invite'));\n      };\n      const handleDecline = async () => {\n        cleanup();\n        await leaveSession();\n        reject(new InvitationDeclinedError('Invitation declined'));\n      };\n      this.inviteDeclineHandlerMap.set(`${userId}:${sessionId || ''}`, handleDecline);\n      this.addListener('sessionJoin', handleSessionJoin);\n      this.addListener('close', handleClose);\n    });\n  }\n\n  async startSession(sessionId:string, sessionJoinHandler?: SessionJoinHandler) {\n    await this.addToQueue(SESSION_QUEUE, () => this.publish(START_SESSION, { sessionId }, { CustomError: StartSessionError }));\n    this.cleanupSession(sessionId);\n    this.startedSessionId = sessionId;\n    if (typeof sessionJoinHandler === 'function') {\n      this.sessionJoinHandlerMap.set(sessionId, sessionJoinHandler);\n    } else {\n      this.sessionJoinHandlerMap.set(sessionId, () => [true, 200, 'Authorized']);\n    }\n  }\n\n  didJoinSession() {\n    if (!this.sessionId) {\n      return false;\n    }\n    return this.joinedSessionId === this.sessionId;\n  }\n\n  async joinSession(sessionId:string, timeoutDuration?: number = 30000) {\n    await this.addToQueue(SESSION_QUEUE, () => this.publish(JOIN_SESSION, { sessionId, timeoutDuration }, { CustomError: JoinSessionError }));\n    this.cleanupSession(sessionId);\n    this.joinedSessionId = sessionId;\n  }\n\n  async leaveSession() {\n    await this.addToQueue(SESSION_QUEUE, () => this.publish(LEAVE_SESSION, {}, { CustomError: LeaveSessionError }));\n    this.cleanupSession();\n  }\n\n  async handleMessage(message:{ requestId?: number, type:string, value:Object }) {\n    if (typeof message !== 'object') {\n      this.logger.error('Invalid message format');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    const { requestId, type, value } = message;\n    if (typeof type !== 'string') {\n      this.logger.error('Invalid message format, type property should be of type \"string\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (typeof value !== 'object') {\n      this.logger.error('Invalid message format, value property should be of type \"object\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (type === RESPONSE && typeof requestId === 'number') {\n      const callback = this.requestCallbackMap.get(requestId);\n      if (typeof callback !== 'function') {\n        this.logger.error(`Callback for request ${requestId} does not exist`);\n        return;\n      }\n      const { success, code, text } = value;\n      if (typeof success !== 'boolean') {\n        this.logger.error('Response message contained an invalid value success property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value success property');\n        return;\n      }\n      if (typeof code !== 'number') {\n        this.logger.error('Response message contained an invalid value code property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value code property');\n        return;\n      }\n      if (typeof text !== 'string') {\n        this.logger.error('Response message contained an invalid value text property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value text property');\n        return;\n      }\n      callback(success, code, text);\n      return;\n    }\n    switch (type) {\n      case SIGNAL:\n        try {\n          const {\n            clientId,\n            serverId,\n            socketId,\n            data,\n          } = value;\n          if (typeof serverId !== 'number') {\n            this.logger.error('Signal message contained an invalid server ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof socketId !== 'number') {\n            this.logger.error('Signal message contained an invalid socket ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof data !== 'object') {\n            this.logger.error('Signal message contained an invalid data property');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const peer = this.peerMap.get(clientId);\n          if (typeof peer === 'undefined') {\n            const signalQueue = this.signalQueueMap.get(clientId);\n            if (Array.isArray(signalQueue)) {\n              signalQueue.push(data);\n              return;\n            }\n            this.signalQueueMap.set(clientId, [data]);\n            return;\n          }\n          if (peer.destroyed || peer.destroying) {\n            return;\n          }\n          peer.signal(data);\n        } catch (error) {\n          this.logger.error('Unable to process signal message');\n          this.logger.errorStack(error);\n        }\n        break;\n      case DECLINE_INVITE_TO_SESSION:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Decline invite request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Decline invite request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const inviteDeclineHandler = this.inviteDeclineHandlerMap.get(requestHash);\n          if (typeof inviteDeclineHandler === 'function') {\n            inviteDeclineHandler();\n          }\n        } catch (error) {\n          this.logger.error('Unable to process decline invite request');\n          this.logger.errorStack(error);\n        }\n        break;\n      case ABORT_SESSION_JOIN_REQUEST:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Abort session join request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Abort session join request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const existing = this.sessionJoinRequestMap.get(requestHash);\n          if (!Array.isArray(existing)) {\n            this.logger.warn(`Unable to abort session join request for user ${userId} and session ${sessionId}, request does not exist`);\n            return;\n          }\n          this.logger.warn(`Aborting session join request for user ${userId} and session ${sessionId}`);\n          existing[1].abort();\n        } catch (error) {\n          this.logger.error('Unable to process session abort join request');\n          this.logger.errorStack(error);\n        }\n        break;\n      case SESSION_JOIN_REQUEST:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Session join request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Session join request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const existing = this.sessionJoinRequestMap.get(requestHash);\n          if (Array.isArray(existing)) {\n            this.logger.warn(`Session join request for user ${userId} and session ${sessionId} already exists`);\n            await existing[0];\n            return;\n          }\n          const sessionJoinHandler = this.sessionJoinHandlerMap.get(sessionId);\n          if (typeof sessionJoinHandler !== 'function') {\n            this.logger.error(`Handler for session ${sessionId} does not exist`);\n            return;\n          }\n          const abortController = new AbortController();\n          abortController.signal.addEventListener('abort', () => {\n            this.sessionJoinRequestMap.delete(requestHash);\n          });\n          const promise = (async () => {\n            let response = [false, 500, 'Error in sesssion join handler'];\n            try {\n              response = await sessionJoinHandler({ userId, sessionId, abortSignal: abortController.signal });\n            } catch (error) {\n              this.logger.error(`Unable to respond to session join request for user ${userId} and session ${sessionId}, error in session join handler`);\n              this.logger.errorStack(error);\n            }\n            if (abortController.signal.aborted) {\n              this.logger.warn(`Session join request for user ${userId} and session ${sessionId} was aborted`);\n              return;\n            }\n            try {\n              await this.publish(SESSION_JOIN_RESPONSE, {\n                userId,\n                sessionId,\n                success: response[0],\n                code: response[1],\n                text: response[2],\n              }, { CustomError: SessionJoinResponseError });\n            } catch (error) {\n              this.logger.error(`Unable to send session join response for user ${userId} and session ${sessionId}`);\n              this.logger.errorStack(error);\n            }\n            this.sessionJoinRequestMap.delete(requestHash);\n          })();\n          this.sessionJoinRequestMap.set(requestHash, [promise, abortController]);\n          await promise;\n        } catch (error) {\n          this.logger.error('Unable to process session join request');\n          this.logger.errorStack(error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown message type ${type}`);\n    }\n  }\n\n  async getConnectedPeer(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer !== 'undefined' && peer.connected) {\n      return peer;\n    }\n    return new Promise((resolve, reject) => {\n      let _peer; // eslint-disable-line no-underscore-dangle\n      const cleanup = () => {\n        this.removeListener('sessionClientLeave', handleSessionClientLeave);\n        this.removeListener('connect', handleConnect);\n        this.removeListener('peer', handlePeer);\n        if (typeof _peer !== 'undefined') {\n          _peer.removeListener('close', handlePeerClose);\n          _peer.removeListener('error', handlePeerError);\n        }\n      };\n      const handlePeerClose = () => {\n        cleanup();\n        reject(new Error(`Peer ${clientId} closed before connection was established`));\n      };\n      const handlePeerError = (error:Error) => {\n        cleanup();\n        reject(error);\n      };\n      const handlePeer = ({ clientId: newClientId, peer: _p }) => {\n        if (newClientId !== clientId) {\n          return;\n        }\n        _peer = _p;\n        _p.addListener('close', handlePeerClose);\n        _p.addListener('error', handlePeerError);\n      };\n      const handleConnect = ({ clientId: newClientId, peer: _p }) => {\n        if (newClientId !== clientId) {\n          return;\n        }\n        cleanup();\n        resolve(_p);\n      };\n      const handleSessionClientLeave = (oldClientId:number) => {\n        if (clientId !== oldClientId) {\n          return;\n        }\n        cleanup();\n        reject(new Error(`Client ${clientId} left before connection was established`));\n      };\n      this.addListener('sessionClientLeave', handleSessionClientLeave);\n      this.addListener('connect', handleConnect);\n      this.addListener('peer', handlePeer);\n    });\n  }\n\n  async handleSessionClientJoin(clientId:number) {\n    let interval;\n    let _peer; // eslint-disable-line no-underscore-dangle\n    let offset = 0;\n    const abortController = new AbortController();\n    const abortSignal = abortController.signal;\n    const cleanup = () => {\n      abortController.abort();\n      this.removeListener('sessionClientLeave', handleSessionClientLeave);\n      if (typeof _peer !== 'undefined') {\n        _peer.removeListener('close', handlePeerClose);\n        _peer.removeListener('data', handlePeerData);\n      }\n      this.data.removeListener('publish', handleDataPublish);\n      clearInterval(interval);\n    };\n    const handlePeerClose = () => {\n      cleanup();\n      if (this.sessionClientIds.has(clientId)) {\n        this.handleSessionClientJoin(clientId);\n      }\n    };\n    const handleSessionClientLeave = (oldClientId:number) => {\n      if (clientId !== oldClientId) {\n        return;\n      }\n      cleanup();\n    };\n    const handleDataPublish = (queue:[Array<*>, Array<*>]) => {\n      sendToPeer(new ObservedRemoveDump(queue));\n    };\n    const sendToPeer = (unpacked: any) => {\n      if (typeof peer === 'undefined') {\n        throw new Error('Peer does not exist');\n      }\n      peer.send(pack(unpacked));\n    };\n    const handlePeerData = (packed:Buffer) => {\n      const message = unpack(packed);\n      if (message instanceof Ping) {\n        sendToPeer(new Pong(message.timestamp, Date.now()));\n      } else if (message instanceof Pong) {\n        offset = (Date.now() - message.wallclock) - (performance.now() - message.timestamp) / 2;\n        this.sessionClientOffsetMap.set(clientId, offset);\n      } else if (message instanceof ObservedRemoveDump) {\n        this.data.process(message.queue);\n      }\n    };\n    this.addListener('sessionClientLeave', handleSessionClientLeave);\n    if (!this.isConnectedToClient(clientId)) {\n      await new Promise((resolve) => {\n        const handleConnect = ({ clientId: newClientId }) => {\n          if (newClientId !== clientId) {\n            return;\n          }\n          this.removeListener('connect', handleConnect);\n          abortSignal.removeEventListener('abort', handleAbort);\n          resolve();\n        };\n        const handleAbort = () => {\n          this.removeListener('connect', handleConnect);\n          abortSignal.removeEventListener('abort', handleAbort);\n          resolve();\n        };\n        this.addListener('connect', handleConnect);\n        abortSignal.addEventListener('abort', handleAbort);\n      });\n      if (abortSignal.aborted) {\n        return;\n      }\n    }\n    const peer = this.peerMap.get(clientId);\n    _peer = peer;\n    if (typeof peer === 'undefined') {\n      throw new Error('Peer does not exist');\n    }\n    peer.addListener('close', handlePeerClose);\n    peer.addListener('data', handlePeerData);\n    interval = setInterval(() => {\n      peer.send(pack(new Ping(performance.now())));\n    }, 1000);\n    peer.send(pack(new Ping(performance.now())));\n    this.data.addListener('publish', handleDataPublish);\n    handleDataPublish(this.data.dump());\n  }\n\n  close() {\n    this.active = false;\n    const oldSessionClientIds = this.sessionClientIds;\n    const oldSocketData = [...this.socketMap.values()];\n    const oldUserIds = [...this.userIds];\n    this.braidClient.data.removeListener('set', this.handleSet);\n    this.braidClient.stopPublishing(this.publishName);\n    this.braidClient.unsubscribe(this.name);\n    this.braidClient.removeServerEventListener(this.name);\n    this.socketMap.clear();\n    this.userIds.clear();\n    for (const timeout of this.peerDisconnectTimeoutMap.values()) {\n      clearTimeout(timeout);\n    }\n    for (const clientId of oldSessionClientIds) {\n      this.emit('sessionClientLeave', clientId);\n    }\n    for (const socketData of oldSocketData) {\n      this.emit('socketLeave', socketData);\n    }\n    for (const userId of oldUserIds) {\n      this.emit('leave', userId);\n    }\n    this.emit('close');\n  }\n}\n\nconst publish = (braidClient:BraidClient, abortSignal: AbortSignal, roomId:string, type:string, value:Object, options?: { timeoutDuration?: number, CustomError?: Class<RequestError> } = {}) => {\n  const name = `signal/${roomId}`;\n  const publishName = `signal/${roomId}/${Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(36)}`;\n  const timeoutDuration = typeof options.timeoutDuration === 'number' ? options.timeoutDuration : 5000;\n  const CustomError = typeof options.CustomError === 'function' ? options.CustomError : RequestError;\n  const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n  return new Promise((resolve, reject) => {\n    const cleanup = () => {\n      clearTimeout(timeout);\n      abortSignal.removeEventListener('abort', handleAbort);\n      braidClient.removeServerEventListener(name);\n      braidClient.stopPublishing(publishName);\n    };\n    const handleAbort = () => {\n      cleanup();\n      reject(new AbortError(`Publish request aborted before ${type} request completed`));\n    };\n    const timeout = setTimeout(() => {\n      cleanup();\n      reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n    }, timeoutDuration);\n    const handleMessage = (message:{ requestId?: number, type:string, value:Object }) => {\n      if (typeof message !== 'object') {\n        return;\n      }\n      const { requestId: responseId, type: responseType, value: responseValue } = message;\n      if (responseType !== RESPONSE) {\n        return;\n      }\n      if (responseId !== requestId) {\n        return;\n      }\n      const { success, code, text } = responseValue;\n      cleanup();\n      if (success) {\n        resolve({ code, text });\n        return;\n      }\n      reject(new CustomError(text, code));\n    };\n    abortSignal.addEventListener('abort', handleAbort);\n    Promise.all([\n      braidClient.startPublishing(publishName),\n      braidClient.addServerEventListener(name, handleMessage),\n    ]).then(() => {\n      braidClient.publish(publishName, { requestId, type, value });\n    }).catch((error) => {\n      cleanup();\n      reject(error);\n    });\n  });\n};\n\nBond.declineInviteToSession = (braidClient: BraidClient, abortSignal:AbortSignal, data: { roomId: string }) => {\n  const { roomId } = data;\n  return publish(braidClient, abortSignal, roomId, DECLINE_INVITE_TO_SESSION, data, { CustomError: DeclineInviteToSessionError });\n};\n\n"],"file":"index.js"}