{"version":3,"sources":["../../src/index.js"],"names":["EventEmitter","ObservedRemoveMap","SimplePeer","PQueue","pack","unpack","SIGNAL","START_SESSION","LEAVE_SESSION","JOIN_SESSION","INVITE_TO_SESSION","DECLINE_INVITE_TO_SESSION","SESSION_QUEUE","ABORT_SESSION_JOIN_REQUEST","SESSION_JOIN_REQUEST","SESSION_JOIN_RESPONSE","REMOVE_FROM_SESSION","CANCEL_INVITE_TO_SESSION","RESPONSE","AUTOMATIC_DISCOVERY_ROOM_ID","AbortError","RequestError","StartSessionError","RequestTimeoutError","JoinSessionError","LeaveSessionError","SignalError","SessionJoinResponseError","ClientClosedError","InviteToSessionError","InvitationDeclinedError","InvitedUserLeftError","InvitationTimeoutError","DeclineInviteToSessionError","RemoveFromSessionError","CancelInviteToSessionError","InvitationCancelledError","AbortSessionJoinError","Ping","Pong","ObservedRemoveDump","PeerEvent","Close","MultipartContainer","getSocketMap","values","Map","map","x","socketHash","socketId","serverId","userId","clientId","sessionId","getSessionId","getPeerIds","Set","getSessionMap","socketMap","socket","sessionClientMap","get","set","Bond","constructor","braidClient","roomId","options","active","Math","floor","random","Number","MAX_SAFE_INTEGER","localConnectionsOnly","name","publishName","toString","logger","peerOptions","userIds","peerMap","peerReconnectMap","queueMap","sessionMap","inviteDeclineHandlerMap","requestCallbackMap","signalQueueMap","peerDisconnectTimeoutMap","sessionJoinHandlerMap","sessionJoinRequestMap","data","bufferPublishing","sessionClientOffsetMap","preApprovedSessionUserIdSet","peerAddTrackHandlerMap","_ready","init","ready","joinSession","handleSessionClientJoin","sessionClientIds","size","clearTimeout","leaveSessionAfterLastClientTimeout","interval","_peer","offset","peerIsClosing","abortController","AbortController","abortSignal","signal","cleanup","abort","removeListener","handleSessionClientLeave","handlePeerClose","handlePeerData","handleDataPublish","clearInterval","has","oldClientId","queue","sendToPeer","unpacked","peer","Error","connected","warn","send","mergeChunkPromises","handleMultipartContainer","multipartContainer","existingMergeChunksPromise","id","push","mergeChunksPromise","getMergeChunksPromise","packed","error","stack","split","forEach","line","message","delete","timestamp","Date","now","wallclock","performance","process","emit","type","args","info","code","addListener","isConnectedToClient","Promise","resolve","handleConnect","newClientId","removeEventListener","handleAbort","addEventListener","aborted","setInterval","dump","handleSocketJoin","socketData","addToQueue","connectToPeer","handleSocketLeave","setTimeout","disconnectFromPeer","leaveSession","errorStack","handleSession","clear","handleBraidSet","key","oldSessionId","newSessionId","oldSocketMap","newSocketMap","oldUserIds","newUserIds","oldSessionMap","newSessionMap","oldLocalSessionSocketMap","newLocalSessionSocketMap","peerUserId","oldSessionSocketMap","newSessionSocketMap","handleBraidClose","reset","handleBraidCloseRequested","close","handleBraidReconnect","isReconnecting","startedSessionId","joinedSessionId","handleInitialized","startSession","catch","handleClose","handleError","keys","promise","reject","handleValue","value","all","subscribe","addServerEventListener","handleMessage","bind","startPublishing","queueId","func","add","newQueue","concurrency","on","publish","timeoutDuration","CustomError","requestId","timeout","handleResponse","success","text","reconnectCount","reconnectDelay","round","oldSocketHash","existingPeer","Object","assign","initiator","config","iceServers","addPeerListeners","handleSignal","handleStream","handlePeerError","handlePeerReconnect","stream","getTracks","track","stop","dispatchEvent","Event","candidate","addressParts","join","sdp","replace","signalQueue","Array","isArray","length","shift","emitToPeer","getConnectedPeer","chunks","chunk","ok","write","once","addStream","addTrackHandler","event","MediaStreamTrackEvent","addTrack","removeStream","destroy","onIdle","queueMicrotask","didStartSession","removeFromSession","cancelInviteToSession","inviteToSession","sessionJoinHandler","hasSessionId","globalThis","crypto","randomUUID","didCancel","handleCancelInviteBeforePublish","cancelledSessionId","cancelledUserId","handleSessionJoin","handleLeave","handleCancelInvite","isOnlySocketForUserId","handleDecline","previousStartedSessionId","wrappedSessionJoinHandler","didJoinSession","previousJoinedSessionId","abortJoinSession","JSON","stringify","callback","destroyed","destroying","requestHash","inviteDeclineHandler","existing","response","handlePeer","_p","declineInviteToSession","stopPublishing","removeServerEventListener","unsubscribe","responseId","responseType","responseValue","then","getLocalRoomId","_roomId","bond","localKey","negotiatedRoomId","handleSet","remoteRoomId","parseInt"],"mappings":";;AAEA,OAAOA,YAAP,MAAyB,QAAzB;AACA,OAAOC,iBAAP,MAA8B,0BAA9B;AAEA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,MAAP,MAAmB,SAAnB;AACA,SACEC,IADF,EAEEC,MAFF,QAGO,UAHP;AAIA,SACEC,MADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,YAJF,EAKEC,iBALF,EAMEC,yBANF,EAOEC,aAPF,EAQEC,0BARF,EASEC,oBATF,EAUEC,qBAVF,EAWEC,mBAXF,EAYEC,wBAZF,EAaEC,QAbF,EAcEC,2BAdF,QAeO,aAfP;AAgBA,SACEC,UADF,EAEEC,YAFF,EAGEC,iBAHF,EAIEC,mBAJF,EAKEC,gBALF,EAMEC,iBANF,EAOEC,WAPF,EAQEC,wBARF,EASEC,iBATF,EAUEC,oBAVF,EAWEC,uBAXF,EAYEC,oBAZF,EAaEC,sBAbF,EAcEC,2BAdF,EAeEC,sBAfF,EAgBEC,0BAhBF,EAiBEC,wBAjBF,EAkBEC,qBAlBF,QAmBO,UAnBP;AAoBA,SACEC,IADF,EAEEC,IAFF,EAGEC,kBAHF,EAIEC,SAJF,EAKEC,KALF,EAMEC,kBANF,QAOO,eAPP;;AA4BA,MAAMC,YAAY,GAAIC,MAAD,IAAmD;AACtE,MAAI,OAAOA,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAO,IAAIC,GAAJ,EAAP;AACD;;AACD,SAAO,IAAIA,GAAJ,CAAQD,MAAM,CAACE,GAAP,CAAYC,CAAD,IAAO;AAC/B,UAAMC,UAAU,GAAI,GAAED,CAAC,CAAC,CAAD,CAAI,IAAGA,CAAC,CAAC,CAAD,CAAI,EAAnC;AACA,WAAO,CAACC,UAAD,EAAa;AAAEA,MAAAA,UAAF;AAAcC,MAAAA,QAAQ,EAAEF,CAAC,CAAC,CAAD,CAAzB;AAA8BG,MAAAA,QAAQ,EAAEH,CAAC,CAAC,CAAD,CAAzC;AAA8CI,MAAAA,MAAM,EAAEJ,CAAC,CAAC,CAAD,CAAvD;AAA4DK,MAAAA,QAAQ,EAAEL,CAAC,CAAC,CAAD,CAAvE;AAA4EM,MAAAA,SAAS,EAAEN,CAAC,CAAC,CAAD;AAAxF,KAAb,CAAP;AACD,GAHc,CAAR,CAAP;AAID,CARD;;AAUA,MAAMO,YAAY,GAAG,CAACV,MAAD,EAA4BQ,QAA5B,KAAiE;AACpF,MAAI,OAAOR,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAO,KAAP;AACD;;AACD,OAAK,MAAMG,CAAX,IAAgBH,MAAhB,EAAwB;AACtB,QAAIG,CAAC,CAAC,CAAD,CAAD,KAASK,QAAb,EAAuB;AACrB,aAAOL,CAAC,CAAC,CAAD,CAAD,IAAQ,KAAf;AACD;AACF;;AACD,SAAO,KAAP;AACD,CAVD;;AAYA,MAAMQ,UAAU,GAAIX,MAAD,IAA2C;AAC5D,MAAI,OAAOA,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAO,IAAIY,GAAJ,EAAP;AACD;;AACD,SAAO,IAAIA,GAAJ,CAAQZ,MAAM,CAACE,GAAP,CAAYC,CAAD,IAAOA,CAAC,CAAC,CAAD,CAAnB,CAAR,CAAP;AACD,CALD;;AAOA,MAAMU,aAAa,GAAIC,SAAD,IAA4E;AAChG,QAAMZ,GAAG,GAAG,IAAID,GAAJ,EAAZ;;AACA,OAAK,MAAMc,MAAX,IAAqBD,SAAS,CAACd,MAAV,EAArB,EAAyC;AACvC,UAAM;AAAEQ,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA0BM,MAAhC;AACA,UAAMC,gBAAgB,GAAGd,GAAG,CAACe,GAAJ,CAAQR,SAAR,CAAzB;;AACA,QAAI,OAAOO,gBAAP,KAA4B,WAAhC,EAA6C;AAC3Cd,MAAAA,GAAG,CAACgB,GAAJ,CAAQT,SAAR,EAAmB,IAAIR,GAAJ,CAAQ,CAAC,CAACO,QAAD,EAAWO,MAAX,CAAD,CAAR,CAAnB;AACD,KAFD,MAEO;AACLC,MAAAA,gBAAgB,CAACE,GAAjB,CAAqBV,QAArB,EAA+BO,MAA/B;AACD;AACF;;AACD,SAAOb,GAAP;AACD,CAZD;;AAcA,OAAO,MAAMiB,IAAN,SAAmBhE,YAAnB,CAAgC;AA+CrCiE,EAAAA,WAAW,CAACC,WAAD,EAA2BC,MAA3B,EAA0Cf,MAA1C,EAAyDgB,OAAiB,GAAG,EAA7E,EAAiF;AAC1F;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKhB,QAAL,GAAgBiB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBC,MAAM,CAACC,gBAAlC,CAAhB;AACA,SAAKtB,MAAL,GAAcA,MAAd;AACA,SAAKe,MAAL,GAAcA,MAAd;AACA,SAAKb,SAAL,GAAiB,KAAjB;AACA,SAAKqB,oBAAL,GAA4B,CAAC,CAACP,OAAO,CAACO,oBAAtC;AACA,UAAMC,IAAI,GAAI,UAAS,KAAKT,MAAO,EAAnC;AACA,SAAKS,IAAL,GAAYA,IAAZ;AACA,SAAKC,WAAL,GAAoB,UAAS,KAAKV,MAAO,IAAG,KAAKd,QAAL,CAAcyB,QAAd,CAAuB,EAAvB,CAA2B,EAAvE;AACA,SAAKZ,WAAL,GAAmBA,WAAnB;AACA,SAAKa,MAAL,GAAcX,OAAO,CAACW,MAAR,IAAkBb,WAAW,CAACa,MAA5C;AACA,SAAKC,WAAL,GAAmBZ,OAAO,CAACY,WAA3B;AACA,SAAKrB,SAAL,GAAiB,IAAIb,GAAJ,EAAjB;AACA,SAAKmC,OAAL,GAAe,IAAIxB,GAAJ,EAAf;AACA,SAAKyB,OAAL,GAAe,IAAIpC,GAAJ,EAAf;AACA,SAAKqC,gBAAL,GAAwB,IAAIrC,GAAJ,EAAxB;AACA,SAAKsC,QAAL,GAAgB,IAAItC,GAAJ,EAAhB;AACA,SAAKuC,UAAL,GAAkB,IAAIvC,GAAJ,EAAlB;AACA,SAAKwC,uBAAL,GAA+B,IAAIxC,GAAJ,EAA/B;AACA,SAAKyC,kBAAL,GAA0B,IAAIzC,GAAJ,EAA1B;AACA,SAAK0C,cAAL,GAAsB,IAAI1C,GAAJ,EAAtB;AACA,SAAK2C,wBAAL,GAAgC,IAAI3C,GAAJ,EAAhC;AACA,SAAK4C,qBAAL,GAA6B,IAAI5C,GAAJ,EAA7B;AACA,SAAK6C,qBAAL,GAA6B,IAAI7C,GAAJ,EAA7B;AACA,SAAK8C,IAAL,GAAY,IAAI3F,iBAAJ,CAAsB,EAAtB,EAA0B;AAAE4F,MAAAA,gBAAgB,EAAE;AAApB,KAA1B,CAAZ;AACA,SAAKC,sBAAL,GAA8B,IAAIhD,GAAJ,EAA9B;AACA,SAAKiD,2BAAL,GAAmC,IAAItC,GAAJ,EAAnC;AACA,SAAKuC,sBAAL,GAA8B,IAAIlD,GAAJ,EAA9B;AAGA,SAAKmD,MAAL,GAAc,KAAKC,IAAL,EAAd,CAhC0F,CAgC/D;;AAE3B,QAAI,OAAO9B,OAAO,CAACd,SAAf,KAA6B,QAAjC,EAA2C;AACzC,WAAK6C,KAAL,GAAa,KAAKC,WAAL,CAAiBhC,OAAO,CAACd,SAAzB,CAAb;AACD,KAFD,MAEO;AACL,WAAK6C,KAAL,GAAa,KAAKF,MAAlB,CADK,CACqB;AAC3B;;AAED,SAAKI,uBAAL,GAA+B,MAAOhD,QAAP,IAA2B;AACxD,YAAMiD,gBAAgB,GAAG,KAAKA,gBAA9B;;AACA,UAAIA,gBAAgB,CAACC,IAAjB,GAAwB,CAA5B,EAA+B;AAC7BC,QAAAA,YAAY,CAAC,KAAKC,kCAAN,CAAZ;AACD;;AACD,UAAIC,QAAJ;;AACA,UAAIC,KAAJ,CANwD,CAM7C;;;AACX,UAAIC,MAAM,GAAG,CAAb;AACA,UAAIC,aAAa,GAAG,KAApB;AACA,YAAMC,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACA,YAAMC,WAAW,GAAGF,eAAe,CAACG,MAApC;;AACA,YAAMC,OAAO,GAAG,MAAM;AACpBJ,QAAAA,eAAe,CAACK,KAAhB;AACA,aAAKC,cAAL,CAAoB,oBAApB,EAA0CC,wBAA1C;;AACA,YAAI,OAAOV,KAAP,KAAiB,WAArB,EAAkC;AAChCA,UAAAA,KAAK,CAACS,cAAN,CAAqB,OAArB,EAA8BE,eAA9B;;AACAX,UAAAA,KAAK,CAACS,cAAN,CAAqB,MAArB,EAA6BG,cAA7B;AACD;;AACD,aAAK3B,IAAL,CAAUwB,cAAV,CAAyB,SAAzB,EAAoCI,iBAApC;AACAC,QAAAA,aAAa,CAACf,QAAD,CAAb;AACD,OATD;;AAUA,YAAMY,eAAe,GAAG,MAAM;AAC5BJ,QAAAA,OAAO;;AACP,YAAI,CAACL,aAAD,IAAkB,KAAKxC,MAAvB,IAAiC,KAAKiC,gBAAL,CAAsBoB,GAAtB,CAA0BrE,QAA1B,CAArC,EAA0E;AACxE,eAAKgD,uBAAL,CAA6BhD,QAA7B;AACD;AACF,OALD;;AAMA,YAAMgE,wBAAwB,GAAIM,WAAD,IAAwB;AACvD,YAAItE,QAAQ,KAAKsE,WAAjB,EAA8B;AAC5B;AACD;;AACDT,QAAAA,OAAO;AACR,OALD;;AAMA,YAAMM,iBAAiB,GAAII,KAAD,IAAgC;AACxDC,QAAAA,UAAU,CAAC,IAAIrF,kBAAJ,CAAuBoF,KAAvB,CAAD,CAAV;AACD,OAFD;;AAGA,YAAMC,UAAU,GAAIC,QAAD,IAAmB;AACpC,YAAI,OAAOC,IAAP,KAAgB,WAApB,EAAiC;AAC/B,gBAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AACD;;AACD,YAAI,CAACD,IAAI,CAACE,SAAV,EAAqB;AACnB,eAAKlD,MAAL,CAAYmD,IAAZ,CAAkB,oCAAmC7E,QAAS,yBAA9D;AACA;AACD;;AACD0E,QAAAA,IAAI,CAACI,IAAL,CAAU/H,IAAI,CAAC0H,QAAD,CAAd;AACD,OATD;;AAWA,YAAMM,kBAAkB,GAAG,IAAItF,GAAJ,EAA3B;;AAEA,YAAMuF,wBAAwB,GAAG,MAAOC,kBAAP,IAAiD;AAChF,cAAMC,0BAA0B,GAAGH,kBAAkB,CAACtE,GAAnB,CAAuBwE,kBAAkB,CAACE,EAA1C,CAAnC;;AACA,YAAI,OAAOD,0BAAP,KAAsC,WAA1C,EAAuD;AACrDA,UAAAA,0BAA0B,CAACE,IAA3B,CAAgCH,kBAAhC;AACA;AACD;;AACD,cAAMI,kBAAkB,GAAG/F,kBAAkB,CAACgG,qBAAnB,CAAyC,KAAzC,CAA3B;AACAD,QAAAA,kBAAkB,CAACD,IAAnB,CAAwBH,kBAAxB;AACAF,QAAAA,kBAAkB,CAACrE,GAAnB,CAAuBuE,kBAAkB,CAACE,EAA1C,EAA8CE,kBAA9C;;AACA,YAAI;AACF,gBAAME,MAAM,GAAG,MAAMF,kBAArB;AACAnB,UAAAA,cAAc,CAACqB,MAAD,CAAd;AACD,SAHD,CAGE,OAAOC,KAAP,EAAc;AACd,cAAIA,KAAK,CAACC,KAAV,EAAiB;AACf,iBAAK/D,MAAL,CAAY8D,KAAZ,CAAkB,2CAAlB;AACAA,YAAAA,KAAK,CAACC,KAAN,CAAYC,KAAZ,CAAkB,IAAlB,EAAwBC,OAAxB,CAAiCC,IAAD,IAAU,KAAKlE,MAAL,CAAY8D,KAAZ,CAAmB,KAAII,IAAK,EAA5B,CAA1C;AACD,WAHD,MAGO;AACL,iBAAKlE,MAAL,CAAY8D,KAAZ,CAAmB,6CAA4CA,KAAK,CAACK,OAAQ,EAA7E;AACD;AACF,SAVD,SAUU;AACRd,UAAAA,kBAAkB,CAACe,MAAnB,CAA0Bb,kBAAkB,CAACE,EAA7C;AACD;AACF,OAtBD;;AAwBA,YAAMjB,cAAc,GAAIqB,MAAD,IAAmB;AACxC,cAAMM,OAAO,GAAG7I,MAAM,CAACuI,MAAD,CAAtB;;AACA,YAAIM,OAAO,YAAY5G,IAAvB,EAA6B;AAC3BuF,UAAAA,UAAU,CAAC,IAAItF,IAAJ,CAAS2G,OAAO,CAACE,SAAjB,EAA4BC,IAAI,CAACC,GAAL,EAA5B,CAAD,CAAV;AACD,SAFD,MAEO,IAAIJ,OAAO,YAAY3G,IAAvB,EAA6B;AAClCqE,UAAAA,MAAM,GAAIyC,IAAI,CAACC,GAAL,KAAaJ,OAAO,CAACK,SAAtB,GAAmC,CAACC,WAAW,CAACF,GAAZ,KAAoBJ,OAAO,CAACE,SAA7B,IAA0C,CAAtF;AACA,eAAKtD,sBAAL,CAA4B/B,GAA5B,CAAgCV,QAAhC,EAA0CuD,MAA1C;AACD,SAHM,MAGA,IAAIsC,OAAO,YAAY1G,kBAAvB,EAA2C;AAChD,eAAKoD,IAAL,CAAU6D,OAAV,CAAkBP,OAAO,CAACtB,KAA1B;AACD,SAFM,MAEA,IAAIsB,OAAO,YAAYzG,SAAvB,EAAkC;AACvC,eAAKiH,IAAL,CAAUR,OAAO,CAACS,IAAlB,EAAwB,GAAGT,OAAO,CAACU,IAAnC;AACD,SAFM,MAEA,IAAIV,OAAO,YAAYxG,KAAvB,EAA8B;AACnC,eAAKqC,MAAL,CAAY8E,IAAZ,CAAkB,UAASxG,QAAS,sBAAqB6F,OAAO,CAACY,IAAK,KAAIZ,OAAO,CAACA,OAAQ,EAA1F;AACA,eAAKhE,OAAL,CAAaiE,MAAb,CAAoB9F,QAApB;AACAwD,UAAAA,aAAa,GAAG,IAAhB;AACD,SAJM,MAIA,IAAIqC,OAAO,YAAYvG,kBAAvB,EAA2C;AAChD0F,UAAAA,wBAAwB,CAACa,OAAD,CAAxB;AACD;AACF,OAlBD;;AAoBA,WAAKa,WAAL,CAAiB,oBAAjB,EAAuC1C,wBAAvC;;AACA,UAAI,CAAC,KAAK2C,mBAAL,CAAyB3G,QAAzB,CAAL,EAAyC;AACvC,cAAM,IAAI4G,OAAJ,CAAaC,OAAD,IAAa;AAC7B,gBAAMC,aAAa,GAAG,CAAC;AAAE9G,YAAAA,QAAQ,EAAE+G;AAAZ,WAAD,KAA+B;AACnD,gBAAIA,WAAW,KAAK/G,QAApB,EAA8B;AAC5B;AACD;;AACD,iBAAK+D,cAAL,CAAoB,SAApB,EAA+B+C,aAA/B;AACAnD,YAAAA,WAAW,CAACqD,mBAAZ,CAAgC,OAAhC,EAAyCC,WAAzC;AACAJ,YAAAA,OAAO;AACR,WAPD;;AAQA,gBAAMI,WAAW,GAAG,MAAM;AACxB,iBAAKlD,cAAL,CAAoB,SAApB,EAA+B+C,aAA/B;AACAnD,YAAAA,WAAW,CAACqD,mBAAZ,CAAgC,OAAhC,EAAyCC,WAAzC;AACAJ,YAAAA,OAAO;AACR,WAJD;;AAKA,eAAKH,WAAL,CAAiB,SAAjB,EAA4BI,aAA5B;AACAnD,UAAAA,WAAW,CAACuD,gBAAZ,CAA6B,OAA7B,EAAsCD,WAAtC;AACD,SAhBK,CAAN;;AAiBA,YAAItD,WAAW,CAACwD,OAAhB,EAAyB;AACvB;AACD;AACF;;AACD,YAAMzC,IAAI,GAAG,KAAK7C,OAAL,CAAapB,GAAb,CAAiBT,QAAjB,CAAb;AACAsD,MAAAA,KAAK,GAAGoB,IAAR;;AACA,UAAI,OAAOA,IAAP,KAAgB,WAApB,EAAiC;AAC/B,cAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AACD;;AACDD,MAAAA,IAAI,CAACgC,WAAL,CAAiB,OAAjB,EAA0BzC,eAA1B;AACAS,MAAAA,IAAI,CAACgC,WAAL,CAAiB,MAAjB,EAAyBxC,cAAzB;AACAb,MAAAA,QAAQ,GAAG+D,WAAW,CAAC,MAAM;AAC3B1C,QAAAA,IAAI,CAACI,IAAL,CAAU/H,IAAI,CAAC,IAAIkC,IAAJ,CAASkH,WAAW,CAACF,GAAZ,EAAT,CAAD,CAAd;AACD,OAFqB,EAEnB,IAFmB,CAAtB;AAGAvB,MAAAA,IAAI,CAACI,IAAL,CAAU/H,IAAI,CAAC,IAAIkC,IAAJ,CAASkH,WAAW,CAACF,GAAZ,EAAT,CAAD,CAAd;AACA,WAAK1D,IAAL,CAAUmE,WAAV,CAAsB,SAAtB,EAAiCvC,iBAAjC;AACAA,MAAAA,iBAAiB,CAAC,KAAK5B,IAAL,CAAU8E,IAAV,EAAD,CAAjB;AACD,KAjID;;AAmIA,SAAKC,gBAAL,GAAyBC,UAAD,IAAuB;AAC7C,YAAM;AAAEvH,QAAAA;AAAF,UAAeuH,UAArB;;AACA,UAAIvH,QAAQ,KAAK,KAAKA,QAAtB,EAAgC;AAC9B;AACD;;AACD,UAAI,KAAKoC,wBAAL,CAA8BiC,GAA9B,CAAkCrE,QAAlC,CAAJ,EAAiD;AAC/C,aAAK0B,MAAL,CAAY8E,IAAZ,CAAkB,mBAAkBxG,QAAS,uCAA7C;AACAmD,QAAAA,YAAY,CAAC,KAAKf,wBAAL,CAA8B3B,GAA9B,CAAkCT,QAAlC,CAAD,CAAZ;AACA,aAAKoC,wBAAL,CAA8B0D,MAA9B,CAAqC9F,QAArC;AACD;;AACD,WAAKwH,UAAL,CAAgBxH,QAAhB,EAA0B,MAAM,KAAKyH,aAAL,CAAmBF,UAAnB,CAAhC;AACD,KAXD;;AAcA,SAAKG,iBAAL,GAA0BH,UAAD,IAAuB;AAC9C,YAAM;AAAEvH,QAAAA;AAAF,UAAeuH,UAArB;;AACA,UAAIvH,QAAQ,KAAK,KAAKA,QAAtB,EAAgC;AAC9B;AACD;;AACDmD,MAAAA,YAAY,CAAC,KAAKf,wBAAL,CAA8B3B,GAA9B,CAAkCT,QAAlC,CAAD,CAAZ;;AACA,UAAI,KAAKgB,MAAT,EAAiB;AACf,aAAKoB,wBAAL,CAA8B1B,GAA9B,CAAkCV,QAAlC,EAA4C2H,UAAU,CAAC,MAAM;AAC3D,eAAKvF,wBAAL,CAA8B0D,MAA9B,CAAqC9F,QAArC;AACA,eAAKwH,UAAL,CAAgBxH,QAAhB,EAA0B,MAAM,KAAK4H,kBAAL,CAAwB5H,QAAxB,CAAhC;AACD,SAHqD,EAGnD,KAHmD,CAAtD;AAID,OALD,MAKO;AACL,aAAKwH,UAAL,CAAgBxH,QAAhB,EAA0B,MAAM,KAAK4H,kBAAL,CAAwB5H,QAAxB,CAAhC;AACD;AACF,KAdD;;AAgBA,SAAKgE,wBAAL,GAAgC,MAAM;AACpC,YAAMf,gBAAgB,GAAG,KAAKA,gBAA9B;;AACA,UAAIA,gBAAgB,CAACC,IAAjB,GAAwB,CAA5B,EAA+B;AAC7B;AACD;;AACD,WAAKE,kCAAL,GAA0CuE,UAAU,CAAC,YAAY;AAC/D,YAAI;AACF,gBAAM,KAAKE,YAAL,EAAN;AACD,SAFD,CAEE,OAAOrC,KAAP,EAAc;AACd,eAAK9D,MAAL,CAAY8D,KAAZ,CAAkB,gEAAlB;AACA,eAAK9D,MAAL,CAAYoG,UAAZ,CAAuBtC,KAAvB;AACD;AACF,OAPmD,EAOjD,IAPiD,CAApD;AAQD,KAbD;;AAeA,SAAKuC,aAAL,GAAqB,MAAM;AACzB,WAAKxF,IAAL,CAAUyF,KAAV;AACA,WAAKvF,sBAAL,CAA4BuF,KAA5B;AACD,KAHD;;AAKA,SAAKtB,WAAL,CAAiB,YAAjB,EAA+B,KAAKY,gBAApC;AACA,SAAKZ,WAAL,CAAiB,aAAjB,EAAgC,KAAKgB,iBAArC;AACA,SAAKhB,WAAL,CAAiB,mBAAjB,EAAsC,KAAK1D,uBAA3C;AACA,SAAK0D,WAAL,CAAiB,oBAAjB,EAAuC,KAAK1C,wBAA5C;AACA,SAAK0C,WAAL,CAAiB,SAAjB,EAA4B,KAAKqB,aAAjC;;AAEA,SAAKE,cAAL,GAAsB,CAACC,GAAD,EAAa1I,MAAb,KAA0C;AAC9D,UAAI0I,GAAG,KAAK3G,IAAZ,EAAkB;AAChB;AACD;;AACD,WAAKP,MAAL,GAAc,IAAd;AACA,YAAMmH,YAAY,GAAG,KAAKlI,SAA1B;AACA,YAAMmI,YAAY,GAAGlI,YAAY,CAACV,MAAD,EAAS,KAAKQ,QAAd,CAAjC;AACA,YAAMqI,YAAY,GAAG,KAAK/H,SAA1B;AACA,YAAMgI,YAAY,GAAG/I,YAAY,CAACC,MAAD,CAAjC;AACA,YAAM+I,UAAU,GAAG,KAAK3G,OAAxB;AACA,YAAM4G,UAAU,GAAGrI,UAAU,CAACX,MAAD,CAA7B;AACA,YAAMiJ,aAAa,GAAG,KAAKzG,UAA3B;AACA,YAAM0G,aAAa,GAAGrI,aAAa,CAACiI,YAAD,CAAnC;AACA,YAAMK,wBAAwB,GAAG,OAAOR,YAAP,KAAwB,QAAxB,GAAmCM,aAAa,CAAChI,GAAd,CAAkB0H,YAAlB,KAAmC,IAAI1I,GAAJ,EAAtE,GAAkF,IAAIA,GAAJ,EAAnH;AACA,YAAMmJ,wBAAwB,GAAG,OAAOR,YAAP,KAAwB,QAAxB,GAAmCM,aAAa,CAACjI,GAAd,CAAkB2H,YAAlB,KAAmC,IAAI3I,GAAJ,EAAtE,GAAkF,IAAIA,GAAJ,EAAnH;AACA,WAAKQ,SAAL,GAAiBmI,YAAjB;AACA,WAAKxG,OAAL,GAAe4G,UAAf;AACA,WAAKlI,SAAL,GAAiBgI,YAAjB;AACA,WAAKtG,UAAL,GAAkB0G,aAAlB;;AACA,UAAIN,YAAY,KAAKD,YAArB,EAAmC;AACjC,aAAK9B,IAAL,CAAU,SAAV,EAAqB+B,YAArB;AACD;;AACD,WAAK,MAAM,CAACxI,UAAD,EAAa2H,UAAb,CAAX,IAAuCc,YAAvC,EAAqD;AACnD,YAAI,CAACC,YAAY,CAACjE,GAAb,CAAiBzE,UAAjB,CAAL,EAAmC;AACjC,eAAKyG,IAAL,CAAU,aAAV,EAAyBkB,UAAzB;AACD;AACF;;AACD,WAAK,MAAM,CAAC3H,UAAD,EAAa2H,UAAb,CAAX,IAAuCe,YAAvC,EAAqD;AACnD,YAAI,CAACD,YAAY,CAAChE,GAAb,CAAiBzE,UAAjB,CAAL,EAAmC;AACjC,eAAKyG,IAAL,CAAU,YAAV,EAAwBkB,UAAxB;AACD;AACF;;AACD,WAAK,MAAMsB,UAAX,IAAyBN,UAAzB,EAAqC;AACnC,YAAI,CAACC,UAAU,CAACnE,GAAX,CAAewE,UAAf,CAAL,EAAiC;AAC/B,eAAKxC,IAAL,CAAU,OAAV,EAAmBwC,UAAnB;AACD;AACF;;AACD,WAAK,MAAMA,UAAX,IAAyBL,UAAzB,EAAqC;AACnC,YAAI,CAACD,UAAU,CAAClE,GAAX,CAAewE,UAAf,CAAL,EAAiC;AAC/B,eAAKxC,IAAL,CAAU,MAAV,EAAkBwC,UAAlB;AACD;AACF;;AACD,WAAK,MAAM,CAAC7I,QAAD,EAAWuH,UAAX,CAAX,IAAqCoB,wBAArC,EAA+D;AAC7D,YAAI3I,QAAQ,KAAK,KAAKA,QAAtB,EAAgC;AAC9B;AACD;;AACD,YAAI,CAAC4I,wBAAwB,CAACvE,GAAzB,CAA6BrE,QAA7B,CAAL,EAA6C;AAC3C,eAAKqG,IAAL,CAAU,oBAAV,EAAgCrG,QAAhC,EAA0CuH,UAA1C;AACD;AACF;;AACD,WAAK,MAAM,CAACvH,QAAD,EAAWuH,UAAX,CAAX,IAAqCqB,wBAArC,EAA+D;AAC7D,YAAI5I,QAAQ,KAAK,KAAKA,QAAtB,EAAgC;AAC9B;AACD;;AACD,YAAI,CAAC2I,wBAAwB,CAACtE,GAAzB,CAA6BrE,QAA7B,CAAL,EAA6C;AAC3C,eAAKqG,IAAL,CAAU,mBAAV,EAA+BrG,QAA/B,EAAyCuH,UAAzC;AACD;AACF;;AACD,WAAK,MAAM,CAACtH,SAAD,EAAY6I,mBAAZ,CAAX,IAA+CL,aAA/C,EAA8D;AAC5D,cAAMM,mBAAmB,GAAGL,aAAa,CAACjI,GAAd,CAAkBR,SAAlB,CAA5B;;AACA,YAAI,OAAO8I,mBAAP,KAA+B,WAAnC,EAAgD;AAC9C,eAAK,MAAMxB,UAAX,IAAyBuB,mBAAmB,CAACtJ,MAApB,EAAzB,EAAuD;AACrD,iBAAK6G,IAAL,CAAU,cAAV,EAA0BkB,UAA1B;AACD;AACF,SAJD,MAIO;AACL,eAAK,MAAM,CAAC3H,UAAD,EAAa2H,UAAb,CAAX,IAAuCuB,mBAAvC,EAA4D;AAC1D,gBAAI,CAACC,mBAAmB,CAAC1E,GAApB,CAAwBzE,UAAxB,CAAL,EAA0C;AACxC,mBAAKyG,IAAL,CAAU,cAAV,EAA0BkB,UAA1B;AACD;AACF;AACF;AACF;;AACD,WAAK,MAAM,CAACtH,SAAD,EAAY8I,mBAAZ,CAAX,IAA+CL,aAA/C,EAA8D;AAC5D,cAAMI,mBAAmB,GAAGL,aAAa,CAAChI,GAAd,CAAkBR,SAAlB,CAA5B;;AACA,YAAI,OAAO6I,mBAAP,KAA+B,WAAnC,EAAgD;AAC9C,eAAK,MAAMvB,UAAX,IAAyBwB,mBAAmB,CAACvJ,MAApB,EAAzB,EAAuD;AACrD,iBAAK6G,IAAL,CAAU,aAAV,EAAyBkB,UAAzB;AACD;AACF,SAJD,MAIO;AACL,eAAK,MAAM,CAAC3H,UAAD,EAAa2H,UAAb,CAAX,IAAuCwB,mBAAvC,EAA4D;AAC1D,gBAAI,CAACD,mBAAmB,CAACzE,GAApB,CAAwBzE,UAAxB,CAAL,EAA0C;AACxC,mBAAKyG,IAAL,CAAU,aAAV,EAAyBkB,UAAzB;AACD;AACF;AACF;AACF;AACF,KAtFD;;AAuFA,SAAKyB,gBAAL,GAAwB,MAAM;AAC5B,WAAKC,KAAL;AACD,KAFD;;AAGA,SAAKC,yBAAL,GAAiC,MAAM;AACrC,WAAKC,KAAL;AACD,KAFD;;AAGA,SAAKC,oBAAL,GAA6BC,cAAD,IAA6B;AACvD,UAAI,CAACA,cAAL,EAAqB;AACnB;AACD;;AACD,YAAMC,gBAAgB,GAAG,KAAKA,gBAA9B;AACA,YAAMC,eAAe,GAAG,KAAKA,eAA7B;;AACA,YAAMC,iBAAiB,GAAG,MAAM;AAC9B,YAAI,OAAOF,gBAAP,KAA4B,QAAhC,EAA0C;AACxC,eAAK5H,MAAL,CAAY8E,IAAZ,CAAkB,sBAAqB8C,gBAAiB,EAAxD;AACA,eAAKG,YAAL,CAAkBH,gBAAlB,EAAoCI,KAApC,CAA2ClE,KAAD,IAAW;AACnD,iBAAK9D,MAAL,CAAY8D,KAAZ,CAAmB,6BAA4B8D,gBAAiB,kBAAhE;AACA,iBAAK5H,MAAL,CAAYoG,UAAZ,CAAuBtC,KAAvB;AACD,WAHD;AAID;;AACD,YAAI,OAAO+D,eAAP,KAA2B,QAA/B,EAAyC;AACvC,eAAK7H,MAAL,CAAY8E,IAAZ,CAAkB,qBAAoB+C,eAAgB,EAAtD;AACA,eAAKxG,WAAL,CAAiBwG,eAAjB,EAAkCG,KAAlC,CAAyClE,KAAD,IAAW;AACjD,iBAAK9D,MAAL,CAAY8D,KAAZ,CAAmB,4BAA2B+D,eAAgB,kBAA9D;AACA,iBAAK7H,MAAL,CAAYoG,UAAZ,CAAuBtC,KAAvB;AACD,WAHD;AAID;;AACD,aAAK3E,WAAL,CAAiBkD,cAAjB,CAAgC,aAAhC,EAA+CyF,iBAA/C;AACA,aAAK3I,WAAL,CAAiBkD,cAAjB,CAAgC,OAAhC,EAAyC4F,WAAzC;AACA,aAAK9I,WAAL,CAAiBkD,cAAjB,CAAgC,OAAhC,EAAyC6F,WAAzC;AACD,OAlBD;;AAmBA,YAAMD,WAAW,GAAG,MAAM;AACxB,aAAK9I,WAAL,CAAiBkD,cAAjB,CAAgC,aAAhC,EAA+CyF,iBAA/C;AACA,aAAK3I,WAAL,CAAiBkD,cAAjB,CAAgC,OAAhC,EAAyC4F,WAAzC;AACA,aAAK9I,WAAL,CAAiBkD,cAAjB,CAAgC,OAAhC,EAAyC6F,WAAzC;AACD,OAJD;;AAKA,YAAMA,WAAW,GAAIpE,KAAD,IAAiB;AACnC,YAAI,OAAO8D,gBAAP,KAA4B,QAAhC,EAA0C;AACxC,eAAK5H,MAAL,CAAY8D,KAAZ,CAAmB,6BAA4B8D,gBAAiB,kBAAhE;AACA,eAAK5H,MAAL,CAAYoG,UAAZ,CAAuBtC,KAAvB;AACD;;AACD,aAAK3E,WAAL,CAAiBkD,cAAjB,CAAgC,aAAhC,EAA+CyF,iBAA/C;AACA,aAAK3I,WAAL,CAAiBkD,cAAjB,CAAgC,OAAhC,EAAyC4F,WAAzC;AACA,aAAK9I,WAAL,CAAiBkD,cAAjB,CAAgC,OAAhC,EAAyC6F,WAAzC;AACD,OARD;;AASA,WAAK/I,WAAL,CAAiB6F,WAAjB,CAA6B,aAA7B,EAA4C8C,iBAA5C;AACA,WAAK3I,WAAL,CAAiB6F,WAAjB,CAA6B,OAA7B,EAAsCiD,WAAtC;AACA,WAAK9I,WAAL,CAAiB6F,WAAjB,CAA6B,OAA7B,EAAsCkD,WAAtC;AACD,KA1CD;;AA2CA,SAAK/I,WAAL,CAAiB0B,IAAjB,CAAsBmE,WAAtB,CAAkC,KAAlC,EAAyC,KAAKuB,cAA9C;AACA,SAAKpH,WAAL,CAAiB6F,WAAjB,CAA6B,OAA7B,EAAsC,KAAKsC,gBAA3C;AACA,SAAKnI,WAAL,CAAiB6F,WAAjB,CAA6B,gBAA7B,EAA+C,KAAKwC,yBAApD;AACA,SAAKrI,WAAL,CAAiB6F,WAAjB,CAA6B,WAA7B,EAA0C,KAAK0C,oBAA/C;AACD;;AAEmB,MAAhB5I,gBAAgB,GAAuB;AACzC,UAAMP,SAAS,GAAG,KAAKA,SAAvB;;AACA,QAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjC,aAAO,IAAIR,GAAJ,EAAP;AACD;;AACD,UAAMe,gBAAgB,GAAG,KAAKwB,UAAL,CAAgBvB,GAAhB,CAAoBR,SAApB,CAAzB;;AACA,QAAI,OAAOO,gBAAP,KAA4B,WAAhC,EAA6C;AAC3C,aAAO,IAAIf,GAAJ,EAAP;AACD;;AACD,WAAOe,gBAAP;AACD;;AAEmB,MAAhByC,gBAAgB,GAAe;AACjC,WAAO,IAAI7C,GAAJ,CAAQ,KAAKI,gBAAL,CAAsBqJ,IAAtB,EAAR,CAAP;AACD;;AAES,QAAJhH,IAAI,GAAG;AACX,UAAMiH,OAAO,GAAG,IAAIlD,OAAJ,CAAY,CAACC,OAAD,EAAUkD,MAAV,KAAqB;AAC/C,YAAMJ,WAAW,GAAG,MAAM;AACxB,aAAK5F,cAAL,CAAoB,OAApB,EAA6B4F,WAA7B;AACA,aAAK9I,WAAL,CAAiB0B,IAAjB,CAAsBwB,cAAtB,CAAqC,KAArC,EAA4CiG,WAA5C;AACA,aAAKnJ,WAAL,CAAiBkD,cAAjB,CAAgC,OAAhC,EAAyC6F,WAAzC;AACAG,QAAAA,MAAM,CAAC,IAAIpF,KAAJ,CAAU,wCAAV,CAAD,CAAN;AACD,OALD;;AAMA,YAAMqF,WAAW,GAAG,CAAC9B,GAAD,EAAa+B,KAAb,KAA2B;AAC7C,YAAI/B,GAAG,KAAK,KAAK3G,IAAjB,EAAuB;AACrB;AACD;;AACD,YAAI,OAAO0I,KAAP,KAAiB,WAArB,EAAkC;AAChC;AACD;;AACD,aAAKlG,cAAL,CAAoB,OAApB,EAA6B4F,WAA7B;AACA,aAAK9I,WAAL,CAAiB0B,IAAjB,CAAsBwB,cAAtB,CAAqC,KAArC,EAA4CiG,WAA5C;AACA,aAAKnJ,WAAL,CAAiBkD,cAAjB,CAAgC,OAAhC,EAAyC6F,WAAzC;AACA/C,QAAAA,OAAO;AACR,OAXD;;AAYA,YAAM+C,WAAW,GAAIpE,KAAD,IAAiB;AACnC,aAAKzB,cAAL,CAAoB,OAApB,EAA6B4F,WAA7B;AACA,aAAK9I,WAAL,CAAiB0B,IAAjB,CAAsBwB,cAAtB,CAAqC,KAArC,EAA4CiG,WAA5C;AACA,aAAKnJ,WAAL,CAAiBkD,cAAjB,CAAgC,OAAhC,EAAyC6F,WAAzC;AACAG,QAAAA,MAAM,CAACvE,KAAD,CAAN;AACD,OALD;;AAMA,WAAKkB,WAAL,CAAiB,OAAjB,EAA0BiD,WAA1B;AACA,WAAK9I,WAAL,CAAiB0B,IAAjB,CAAsBmE,WAAtB,CAAkC,KAAlC,EAAyCsD,WAAzC;AACA,WAAKnJ,WAAL,CAAiB6F,WAAjB,CAA6B,OAA7B,EAAsCkD,WAAtC;AACAI,MAAAA,WAAW,CAAC,KAAKzI,IAAN,EAAY,KAAKV,WAAL,CAAiB0B,IAAjB,CAAsB9B,GAAtB,CAA0B,KAAKc,IAA/B,CAAZ,CAAX;AACD,KA7Be,CAAhB;;AA8BA,QAAI;AACF,YAAMqF,OAAO,CAACsD,GAAR,CAAY,CAChB,KAAKrJ,WAAL,CAAiBsJ,SAAjB,CAA2B,KAAK5I,IAAhC,CADgB,EAEhB,KAAKV,WAAL,CAAiBuJ,sBAAjB,CAAwC,KAAK7I,IAA7C,EAAmD,KAAK8I,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAAnD,CAFgB,CAAZ,CAAN;;AAIA,UAAI,CAAC,KAAKtJ,MAAV,EAAkB;AAChB;AACD;;AACD,YAAM8I,OAAN;;AACA,UAAI,CAAC,KAAK9I,MAAV,EAAkB;AAChB;AACD;;AACD,YAAM,KAAKH,WAAL,CAAiB0J,eAAjB,CAAiC,KAAK/I,WAAtC,CAAN;AACD,KAbD,CAaE,OAAOgE,KAAP,EAAc;AACd,WAAK3E,WAAL,CAAiBa,MAAjB,CAAwB8D,KAAxB,CAA+B,kBAAiB,KAAK1E,MAAO,EAA5D;AACA,YAAM0E,KAAN;AACD;AACF;;AAEDgC,EAAAA,UAAU,CAACgD,OAAD,EAA0BC,IAA1B,EAAiD;AACzD,UAAMlG,KAAK,GAAG,KAAKxC,QAAL,CAActB,GAAd,CAAkB+J,OAAlB,CAAd;;AACA,QAAI,OAAOjG,KAAP,KAAiB,WAArB,EAAkC;AAChC,aAAOA,KAAK,CAACmG,GAAN,CAAUD,IAAV,CAAP;AACD;;AACD,UAAME,QAAQ,GAAG,IAAI7N,MAAJ,CAAW;AAAE8N,MAAAA,WAAW,EAAE;AAAf,KAAX,CAAjB;AACA,UAAMd,OAAO,GAAGa,QAAQ,CAACD,GAAT,CAAaD,IAAb,CAAhB;AACA,SAAK1I,QAAL,CAAcrB,GAAd,CAAkB8J,OAAlB,EAA2BG,QAA3B;AACAA,IAAAA,QAAQ,CAACE,EAAT,CAAY,MAAZ,EAAoB,MAAM;AACxB,WAAK9I,QAAL,CAAc+D,MAAd,CAAqB0E,OAArB;AACD,KAFD;AAGA,WAAOV,OAAP;AACD;;AAEY,QAAPgB,OAAO,CAACxE,IAAD,EAAc2D,KAAd,EAA4BlJ,OAAyE,GAAG,EAAxG,EAAkJ;AAC7J,UAAM,KAAK6B,MAAX,CAD6J,CAC1I;;AACnB,UAAMmI,eAAe,GAAG,OAAOhK,OAAO,CAACgK,eAAf,KAAmC,QAAnC,GAA8ChK,OAAO,CAACgK,eAAtD,GAAwE,IAAhG;AACA,UAAMC,WAAW,GAAG,OAAOjK,OAAO,CAACiK,WAAf,KAA+B,UAA/B,GAA4CjK,OAAO,CAACiK,WAApD,GAAkEhN,YAAtF;AACA,UAAMiN,SAAS,GAAGhK,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBC,MAAM,CAACC,gBAAlC,CAAlB;AACA,WAAO,IAAIuF,OAAJ,CAAY,CAACC,OAAD,EAAUkD,MAAV,KAAqB;AACtC,YAAMJ,WAAW,GAAG,MAAM;AACxB,aAAKzH,kBAAL,CAAwB4D,MAAxB,CAA+BmF,SAA/B;AACA9H,QAAAA,YAAY,CAAC+H,OAAD,CAAZ;AACA,aAAKnH,cAAL,CAAoB,OAApB,EAA6B4F,WAA7B;AACAI,QAAAA,MAAM,CAAC,IAAIxL,iBAAJ,CAAuB,wBAAuB+H,IAAK,oBAAnD,CAAD,CAAN;AACD,OALD;;AAMA,YAAM4E,OAAO,GAAGvD,UAAU,CAAC,MAAM;AAC/B,aAAKzF,kBAAL,CAAwB4D,MAAxB,CAA+BmF,SAA/B;AACA,aAAKlH,cAAL,CAAoB,OAApB,EAA6B4F,WAA7B;AACAI,QAAAA,MAAM,CAAC,IAAI7L,mBAAJ,CAAyB,GAAEoI,IAAK,8BAA6ByE,eAAgB,IAA7E,CAAD,CAAN;AACD,OAJyB,EAIvBA,eAJuB,CAA1B;;AAKA,YAAMI,cAAc,GAAG,CAACC,OAAD,EAAkB3E,IAAlB,EAAgC4E,IAAhC,KAAgD;AACrE,aAAKnJ,kBAAL,CAAwB4D,MAAxB,CAA+BmF,SAA/B;AACA9H,QAAAA,YAAY,CAAC+H,OAAD,CAAZ;AACA,aAAKnH,cAAL,CAAoB,OAApB,EAA6B4F,WAA7B;;AACA,YAAIyB,OAAJ,EAAa;AACXvE,UAAAA,OAAO,CAAC;AAAEJ,YAAAA,IAAF;AAAQ4E,YAAAA;AAAR,WAAD,CAAP;AACA;AACD;;AACDtB,QAAAA,MAAM,CAAC,IAAIiB,WAAJ,CAAgBK,IAAhB,EAAsB5E,IAAtB,CAAD,CAAN;AACD,OATD;;AAUA,WAAKC,WAAL,CAAiB,OAAjB,EAA0BiD,WAA1B;AACA,WAAKzH,kBAAL,CAAwBxB,GAAxB,CAA4BuK,SAA5B,EAAuCE,cAAvC;AACA,WAAKtK,WAAL,CAAiBiK,OAAjB,CAAyB,KAAKtJ,WAA9B,EAA2C;AAAEyJ,QAAAA,SAAF;AAAa3E,QAAAA,IAAb;AAAmB2D,QAAAA;AAAnB,OAA3C;AACD,KAzBM,CAAP;AA0BD;;AAEDtD,EAAAA,mBAAmB,CAAC3G,QAAD,EAAkB;AACnC,UAAM0E,IAAI,GAAG,KAAK7C,OAAL,CAAapB,GAAb,CAAiBT,QAAjB,CAAb;;AACA,QAAI,OAAO0E,IAAP,KAAgB,WAApB,EAAiC;AAC/B,aAAO,KAAP;AACD;;AACD,WAAO,CAAC,CAACA,IAAI,CAACE,SAAd;AACD;;AAEkB,QAAb6C,aAAa,CAAClH,MAAD,EAAgB;AACjC,UAAM;AAAER,MAAAA,MAAF;AAAUD,MAAAA,QAAV;AAAoBD,MAAAA,QAApB;AAA8BG,MAAAA,QAA9B;AAAwCJ,MAAAA;AAAxC,QAAuDW,MAA7D;AACA,UAAM+K,cAAc,GAAG,KAAKxJ,gBAAL,CAAsBrB,GAAtB,CAA0BT,QAA1B,KAAuC,CAA9D;AACA,UAAMuL,cAAc,GAAGD,cAAc,GAAG,CAAjB,GAAqB,KAArB,GAA6B,QAAQA,cAAc,GAAGA,cAAzB,CAApD;;AACA,QAAIC,cAAc,GAAG,CAArB,EAAwB;AACtB,WAAK7J,MAAL,CAAY8E,IAAZ,CAAkB,uBAAsBvF,IAAI,CAACuK,KAAL,CAAWD,cAAc,GAAG,IAA5B,CAAkC,IAAGA,cAAc,KAAK,IAAnB,GAA0B,QAA1B,GAAqC,SAAU,eAAcD,cAAe,EAAzJ;AACA,YAAM,IAAI1E,OAAJ,CAAaC,OAAD,IAAa;AAC7B,cAAMqE,OAAO,GAAGvD,UAAU,CAAC,MAAM;AAC/B,eAAK5D,cAAL,CAAoB,OAApB,EAA6B4F,WAA7B;AACA,eAAK5F,cAAL,CAAoB,aAApB,EAAmC2D,iBAAnC;AACAb,UAAAA,OAAO;AACR,SAJyB,EAIvB0E,cAJuB,CAA1B;;AAKA,cAAM5B,WAAW,GAAG,MAAM;AACxBxG,UAAAA,YAAY,CAAC+H,OAAD,CAAZ;AACA,eAAKnH,cAAL,CAAoB,OAApB,EAA6B4F,WAA7B;AACA,eAAK5F,cAAL,CAAoB,aAApB,EAAmC2D,iBAAnC;AACAb,UAAAA,OAAO;AACR,SALD;;AAMA,cAAMa,iBAAiB,GAAG,CAAC;AAAE9H,UAAAA,UAAU,EAAE6L;AAAd,SAAD,KAA0C;AAClE,cAAI7L,UAAU,KAAK6L,aAAnB,EAAkC;AAChC;AACD;;AACDtI,UAAAA,YAAY,CAAC+H,OAAD,CAAZ;AACA,eAAKnH,cAAL,CAAoB,OAApB,EAA6B4F,WAA7B;AACA,eAAK5F,cAAL,CAAoB,aAApB,EAAmC2D,iBAAnC;AACAb,UAAAA,OAAO;AACR,SARD;;AASA,aAAKH,WAAL,CAAiB,OAAjB,EAA0BiD,WAA1B;AACA,aAAKjD,WAAL,CAAiB,aAAjB,EAAgCgB,iBAAhC;AACD,OAvBK,CAAN;;AAwBA,UAAI,CAAC,KAAKpH,SAAL,CAAe+D,GAAf,CAAmBzE,UAAnB,CAAL,EAAqC;AACnC;AACD;AACF;;AACD,UAAM8L,YAAY,GAAG,KAAK7J,OAAL,CAAapB,GAAb,CAAiBT,QAAjB,CAArB;AACA,UAAMe,OAAO,GAAG4K,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB;AAAEC,MAAAA,SAAS,EAAE7L,QAAQ,GAAG,KAAKA;AAA7B,KAAlB,EAA2D,KAAK2B,WAAhE,CAAhB;;AACA,QAAI,KAAKL,oBAAT,EAA+B;AAC7BP,MAAAA,OAAO,CAAC+K,MAAR,GAAiB;AACfC,QAAAA,UAAU,EAAE;AADG,OAAjB;AAGD;;AACD,UAAMrH,IAAI,GAAGgH,YAAY,IAAI,IAAI7O,UAAJ,CAAekE,OAAf,CAA7B;AACA,SAAKc,OAAL,CAAanB,GAAb,CAAiBV,QAAjB,EAA2B0E,IAA3B;AACA,SAAK5C,gBAAL,CAAsBpB,GAAtB,CAA0BV,QAA1B,EAAoCsL,cAAc,GAAG,CAArD;AACA,SAAKjF,IAAL,CAAU,MAAV,EAAkB;AAAErG,MAAAA,QAAF;AAAY0E,MAAAA;AAAZ,KAAlB;;AACA,UAAMsH,gBAAgB,GAAG,MAAM;AAC7B,WAAKlK,gBAAL,CAAsBpB,GAAtB,CAA0BV,QAA1B,EAAoC,CAApC;;AACA,YAAM6D,OAAO,GAAG,MAAM;AACpBa,QAAAA,IAAI,CAACX,cAAL,CAAoB,QAApB,EAA8BkI,YAA9B;AACAvH,QAAAA,IAAI,CAACX,cAAL,CAAoB,QAApB,EAA8BmI,YAA9B;AACAxH,QAAAA,IAAI,CAACX,cAAL,CAAoB,OAApB,EAA6BoI,eAA7B;AACAzH,QAAAA,IAAI,CAACX,cAAL,CAAoB,OAApB,EAA6BE,eAA7B;AACAS,QAAAA,IAAI,CAACX,cAAL,CAAoB,eAApB,EAAqCqI,mBAArC;AACD,OAND;;AAOA,YAAMH,YAAY,GAAG,MAAO1J,IAAP,IAAuB;AAC1C,YAAI;AACF,gBAAM,KAAKuI,OAAL,CAAa7N,MAAb,EAAqB;AAAE6C,YAAAA,QAAF;AAAYD,YAAAA,QAAZ;AAAsB0C,YAAAA;AAAtB,WAArB,EAAmD;AAAEyI,YAAAA,WAAW,EAAE3M;AAAf,WAAnD,CAAN;AACD,SAFD,CAEE,OAAOmH,KAAP,EAAc;AACd,eAAK9D,MAAL,CAAY8D,KAAZ,CAAmB,yBAAwBzF,MAAO,WAAUC,QAAS,SAArE;AACA,eAAK0B,MAAL,CAAYoG,UAAZ,CAAuBtC,KAAvB;AACD;AACF,OAPD;;AAQA,YAAM0G,YAAY,GAAIG,MAAD,IAAwB;AAC3C,YAAI,CAAC,KAAKpJ,gBAAL,CAAsBoB,GAAtB,CAA0BrE,QAA1B,CAAL,EAA0C;AACxC,eAAK0B,MAAL,CAAY8D,KAAZ,CAAmB,uDAAsDzF,MAAO,WAAUC,QAAS,EAAnG;AACAqM,UAAAA,MAAM,CAACC,SAAP,GAAmB3G,OAAnB,CAA4B4G,KAAD,IAAW;AACpCA,YAAAA,KAAK,CAACC,IAAN;AACAD,YAAAA,KAAK,CAACE,aAAN,CAAoB,IAAIC,KAAJ,CAAU,MAAV,CAApB;AACD,WAHD;AAIA;AACD;;AACD,aAAKrG,IAAL,CAAU,QAAV,EAAoB;AAAEgG,UAAAA,MAAF;AAAUtM,UAAAA,MAAV;AAAkBD,UAAAA,QAAlB;AAA4BD,UAAAA,QAA5B;AAAsCG,UAAAA;AAAtC,SAApB;AACD,OAVD;;AAWA,YAAMiE,eAAe,GAAG,MAAM;AAC5B,aAAKvC,MAAL,CAAY8E,IAAZ,CAAkB,0BAAyBzG,MAAO,WAAUC,QAAS,EAArE;AACA6D,QAAAA,OAAO;AACP,aAAKwC,IAAL,CAAU,YAAV,EAAwB;AAAEtG,UAAAA,MAAF;AAAUD,UAAAA,QAAV;AAAoBD,UAAAA,QAApB;AAA8BG,UAAAA;AAA9B,SAAxB;;AACA,YAAI,KAAKgB,MAAL,IAAe,KAAKa,OAAL,CAAawC,GAAb,CAAiBrE,QAAjB,CAAnB,EAA+C;AAC7C,eAAK6B,OAAL,CAAaiE,MAAb,CAAoB9F,QAApB;AACA,eAAKyH,aAAL,CAAmBlH,MAAnB;AACA,eAAKmB,MAAL,CAAYmD,IAAZ,CAAkB,wBAAuB9E,MAAO,WAAUC,QAAS,EAAnE;AACD;AACF,OATD;;AAUA,YAAMmM,eAAe,GAAI3G,KAAD,IAAiB;AACvC,aAAK9D,MAAL,CAAY8D,KAAZ,CAAmB,+BAA8BzF,MAAO,WAAUC,QAAS,EAA3E;AACA,aAAK0B,MAAL,CAAYoG,UAAZ,CAAuBtC,KAAvB;AACA,aAAKa,IAAL,CAAU,WAAV,EAAuB;AAAEtG,UAAAA,MAAF;AAAUD,UAAAA,QAAV;AAAoBD,UAAAA,QAApB;AAA8BG,UAAAA,QAA9B;AAAwCwF,UAAAA;AAAxC,SAAvB;AACD,OAJD;;AAKA,YAAM4G,mBAAmB,GAAG,MAAM;AAChC,aAAK1K,MAAL,CAAY8E,IAAZ,CAAkB,uBAAsBzG,MAAO,WAAUC,QAAS,EAAlE;AACA6D,QAAAA,OAAO;AACR,OAHD;;AAIAa,MAAAA,IAAI,CAACgC,WAAL,CAAiB,QAAjB,EAA2BuF,YAA3B;AACAvH,MAAAA,IAAI,CAACgC,WAAL,CAAiB,QAAjB,EAA2BwF,YAA3B;AACAxH,MAAAA,IAAI,CAACgC,WAAL,CAAiB,OAAjB,EAA0BzC,eAA1B;AACAS,MAAAA,IAAI,CAACgC,WAAL,CAAiB,OAAjB,EAA0ByF,eAA1B;AACAzH,MAAAA,IAAI,CAACgC,WAAL,CAAiB,eAAjB,EAAkC0F,mBAAlC;AACD,KApDD;;AAqDA,QAAI1H,IAAI,CAACE,SAAT,EAAoB;AAClBF,MAAAA,IAAI,CAAC2B,IAAL,CAAU,eAAV;AACA2F,MAAAA,gBAAgB;AAChB,WAAK3F,IAAL,CAAU,SAAV,EAAqB;AAAEtG,QAAAA,MAAF;AAAUC,QAAAA,QAAV;AAAoBF,QAAAA,QAApB;AAA8BD,QAAAA,QAA9B;AAAwCD,QAAAA,UAAxC;AAAoD8E,QAAAA;AAApD,OAArB;AACA;AACD;;AACD,UAAM,IAAIkC,OAAJ,CAAaC,OAAD,IAAa;AAC7B,YAAMhD,OAAO,GAAG,MAAM;AACpBV,QAAAA,YAAY,CAAC+H,OAAD,CAAZ;AACAxG,QAAAA,IAAI,CAACX,cAAL,CAAoB,OAApB,EAA6BoI,eAA7B;AACAzH,QAAAA,IAAI,CAACX,cAAL,CAAoB,OAApB,EAA6BE,eAA7B;AACAS,QAAAA,IAAI,CAACX,cAAL,CAAoB,SAApB,EAA+B+C,aAA/B;AACApC,QAAAA,IAAI,CAACX,cAAL,CAAoB,QAApB,EAA8BkI,YAA9B;AACA,aAAKlI,cAAL,CAAoB,OAApB,EAA6B4F,WAA7B;AACA,aAAK5F,cAAL,CAAoB,aAApB,EAAmC2D,iBAAnC;AACD,OARD;;AASA,YAAMwD,OAAO,GAAGvD,UAAU,CAAC,MAAM;AAC/B9D,QAAAA,OAAO;AACPgD,QAAAA,OAAO;AACR,OAHyB,EAGvB,IAHuB,CAA1B;;AAIA,YAAMC,aAAa,GAAG,MAAM;AAC1BjD,QAAAA,OAAO;AACPmI,QAAAA,gBAAgB;AAChB,aAAK3F,IAAL,CAAU,SAAV,EAAqB;AAAEtG,UAAAA,MAAF;AAAUC,UAAAA,QAAV;AAAoBF,UAAAA,QAApB;AAA8BD,UAAAA,QAA9B;AAAwCD,UAAAA,UAAxC;AAAoD8E,UAAAA;AAApD,SAArB;AACAmC,QAAAA,OAAO;AACR,OALD;;AAMA,YAAMoF,YAAY,GAAG,MAAO1J,IAAP,IAAuB;AAC1C,YAAI,KAAKjB,oBAAT,EAA+B;AAC7B,cAAIiB,IAAI,CAAC+D,IAAL,KAAc,WAAlB,EAA+B;AAC7B,kBAAM;AAAEqG,cAAAA,SAAS,EAAE;AAAEA,gBAAAA;AAAF;AAAb,gBAA+BpK,IAArC;AACA,kBAAMqK,YAAY,GAAGD,SAAS,CAACjH,KAAV,CAAgB,GAAhB,CAArB;;AACA,gBAAIkH,YAAY,CAAC,CAAD,CAAZ,KAAoB,WAApB,IAAmCA,YAAY,CAAC,CAAD,CAAZ,KAAoB,KAA3D,EAAkE;AAChEA,cAAAA,YAAY,CAAC,CAAD,CAAZ,GAAkB,WAAlB;AACArK,cAAAA,IAAI,CAACoK,SAAL,CAAeA,SAAf,GAA2BC,YAAY,CAACC,IAAb,CAAkB,GAAlB,CAA3B,CAFgE,CAEb;AACpD;AACF,WAPD,MAOO,IAAItK,IAAI,CAAC+D,IAAL,KAAc,QAAd,IAA0B/D,IAAI,CAAC+D,IAAL,KAAc,OAA5C,EAAqD;AAC1D/D,YAAAA,IAAI,CAACuK,GAAL,GAAWvK,IAAI,CAACuK,GAAL,CAASC,OAAT,CAAiB,yEAAjB,EAA4F,gBAA5F,CAAX,CAD0D,CACgE;AAC3H;AACF;;AACD,YAAI;AACF,gBAAM,KAAKjC,OAAL,CAAa7N,MAAb,EAAqB;AAAE6C,YAAAA,QAAF;AAAYD,YAAAA,QAAZ;AAAsB0C,YAAAA;AAAtB,WAArB,EAAmD;AAAEyI,YAAAA,WAAW,EAAE3M;AAAf,WAAnD,CAAN;AACD,SAFD,CAEE,OAAOmH,KAAP,EAAc;AACd,cAAIA,KAAK,YAAYnH,WAAjB,IAAgCmH,KAAK,CAACiB,IAAN,KAAe,GAAnD,EAAwD;AACtD,iBAAK/E,MAAL,CAAY8D,KAAZ,CAAmB,yBAAwBzF,MAAO,YAAWC,QAAS,yBAAtE;AACA6D,YAAAA,OAAO;AACPgD,YAAAA,OAAO;AACR,WAJD,MAIO;AACL,iBAAKnF,MAAL,CAAY8D,KAAZ,CAAmB,yBAAwBzF,MAAO,YAAWC,QAAS,EAAtE;AACA,iBAAK0B,MAAL,CAAYoG,UAAZ,CAAuBtC,KAAvB;AACD;AACF;AACF,OAzBD;;AA0BA,YAAMmE,WAAW,GAAG,MAAM;AACxB9F,QAAAA,OAAO;AACPgD,QAAAA,OAAO;AACR,OAHD;;AAIA,YAAM5C,eAAe,GAAG,MAAM;AAC5B,aAAKvC,MAAL,CAAY8E,IAAZ,CAAkB,sBAAqBzG,MAAO,WAAUC,QAAS,SAAjE;AACA6D,QAAAA,OAAO;;AACP,YAAI,KAAKhC,OAAL,CAAawC,GAAb,CAAiBrE,QAAjB,CAAJ,EAAgC;AAC9B,eAAK6B,OAAL,CAAaiE,MAAb,CAAoB9F,QAApB;AACA,eAAKyH,aAAL,CAAmBlH,MAAnB;AACA,eAAKmB,MAAL,CAAYmD,IAAZ,CAAkB,wBAAuB9E,MAAO,WAAUC,QAAS,EAAnE;AACD;;AACD6G,QAAAA,OAAO;AACR,OATD;;AAUA,YAAMsF,eAAe,GAAI3G,KAAD,IAAiB;AACvC3B,QAAAA,OAAO;AACP,aAAKnC,MAAL,CAAY8D,KAAZ,CAAmB,uBAAsBzF,MAAO,EAAhD;AACA,aAAK2B,MAAL,CAAYoG,UAAZ,CAAuBtC,KAAvB;AACA,aAAKa,IAAL,CAAU,WAAV,EAAuB;AAAEtG,UAAAA,MAAF;AAAUD,UAAAA,QAAV;AAAoBD,UAAAA,QAApB;AAA8BG,UAAAA,QAA9B;AAAwCwF,UAAAA;AAAxC,SAAvB;AACA,aAAKa,IAAL,CAAU,OAAV,EAAmBb,KAAnB;AACAqB,QAAAA,OAAO;AACR,OAPD;;AAQA,YAAMa,iBAAiB,GAAG,CAAC;AAAE9H,QAAAA,UAAU,EAAE6L;AAAd,OAAD,KAA0C;AAClE,YAAI7L,UAAU,KAAK6L,aAAnB,EAAkC;AAChC;AACD;;AACD5H,QAAAA,OAAO;AACP,aAAKnC,MAAL,CAAYmD,IAAZ,CAAkB,6BAA4B9E,MAAO,WAAUC,QAAS,iDAAxE;AACA6G,QAAAA,OAAO;AACR,OAPD;;AAQAnC,MAAAA,IAAI,CAACgC,WAAL,CAAiB,OAAjB,EAA0ByF,eAA1B;AACAzH,MAAAA,IAAI,CAACgC,WAAL,CAAiB,OAAjB,EAA0BzC,eAA1B;AACAS,MAAAA,IAAI,CAACgC,WAAL,CAAiB,SAAjB,EAA4BI,aAA5B;AACApC,MAAAA,IAAI,CAACgC,WAAL,CAAiB,QAAjB,EAA2BuF,YAA3B;AACA,WAAKvF,WAAL,CAAiB,OAAjB,EAA0BiD,WAA1B;AACA,WAAKjD,WAAL,CAAiB,aAAjB,EAAgCgB,iBAAhC;AACA,YAAMsF,WAAW,GAAG,KAAK7K,cAAL,CAAoB1B,GAApB,CAAwBT,QAAxB,CAApB;;AACA,UAAIiN,KAAK,CAACC,OAAN,CAAcF,WAAd,CAAJ,EAAgC;AAC9B,eAAOA,WAAW,CAACG,MAAZ,GAAqB,CAA5B,EAA+B;AAC7B,gBAAM5K,IAAI,GAAGyK,WAAW,CAACI,KAAZ,EAAb;AACA1I,UAAAA,IAAI,CAACd,MAAL,CAAYrB,IAAZ;AACD;AACF;AACF,KAzFK,CAAN;AA0FD;;AAEe,QAAV8K,UAAU,CAACrN,QAAD,EAAkBsG,IAAlB,EAA+B,GAAGC,IAAlC,EAAmD;AACjE,UAAM7B,IAAI,GAAG,MAAM,KAAK4I,gBAAL,CAAsBtN,QAAtB,CAAnB;AACA,UAAM6F,OAAO,GAAG9I,IAAI,CAAC,IAAIqC,SAAJ,CAAckH,IAAd,EAAoBC,IAApB,CAAD,CAApB;;AACA,QAAIV,OAAO,CAACsH,MAAR,GAAiB,KAArB,EAA4B;AAC1B,YAAMI,MAAM,GAAGjO,kBAAkB,CAACkO,KAAnB,CAAyB3H,OAAzB,EAAkC,KAAlC,CAAf;;AACA,WAAK,MAAM2H,KAAX,IAAoBD,MAApB,EAA4B;AAC1B,cAAME,EAAE,GAAG/I,IAAI,CAACgJ,KAAL,CAAWF,KAAX,CAAX;;AACA,YAAI,CAACC,EAAL,EAAS;AACP,gBAAM,IAAI7G,OAAJ,CAAaC,OAAD,IAAa;AAC7BnC,YAAAA,IAAI,CAACiJ,IAAL,CAAU,OAAV,EAAmB,MAAM;AACvB9G,cAAAA,OAAO;AACR,aAFD;AAGD,WAJK,CAAN;AAKD;AACF;AACF,KAZD,MAYO;AACL,YAAM4G,EAAE,GAAG/I,IAAI,CAACgJ,KAAL,CAAW7H,OAAX,CAAX;;AACA,UAAI,CAAC4H,EAAL,EAAS;AACP,cAAM,IAAI7G,OAAJ,CAAaC,OAAD,IAAa;AAC7BnC,UAAAA,IAAI,CAACiJ,IAAL,CAAU,OAAV,EAAmB,MAAM;AACvB9G,YAAAA,OAAO;AACR,WAFD;AAGD,SAJK,CAAN;AAKD;AACF;AACF;;AAEc,QAAT+G,SAAS,CAAC5N,QAAD,EAAkBqM,MAAlB,EAAsC;AACnD,UAAM3H,IAAI,GAAG,MAAM,KAAK4I,gBAAL,CAAsBtN,QAAtB,CAAnB;;AACA,UAAM6N,eAAe,GAAIC,KAAD,IAAiB;AACvC,UAAIA,KAAK,YAAYC,qBAArB,EAA4C;AAC1CrJ,QAAAA,IAAI,CAACsJ,QAAL,CAAcF,KAAK,CAACvB,KAApB;AACD;AACF,KAJD;;AAKA,SAAK5J,sBAAL,CAA4BjC,GAA5B,CAAgC2L,MAAhC,EAAwCwB,eAAxC;AACAxB,IAAAA,MAAM,CAACnF,gBAAP,CAAwB,UAAxB,EAAoC2G,eAApC;AACAnJ,IAAAA,IAAI,CAACkJ,SAAL,CAAevB,MAAf;AACD;;AAEiB,QAAZ4B,YAAY,CAACjO,QAAD,EAAkBqM,MAAlB,EAAsC;AACtD,UAAM3H,IAAI,GAAG,MAAM,KAAK4I,gBAAL,CAAsBtN,QAAtB,CAAnB;AACA,UAAM6N,eAAe,GAAG,KAAKlL,sBAAL,CAA4BlC,GAA5B,CAAgC4L,MAAhC,CAAxB;;AACA,QAAI,OAAOwB,eAAP,KAA2B,UAA/B,EAA2C;AACzCxB,MAAAA,MAAM,CAACrF,mBAAP,CAA2B,UAA3B,EAAuC6G,eAAvC;AACD;;AACDnJ,IAAAA,IAAI,CAACuJ,YAAL,CAAkB5B,MAAlB;AACD;;AAEuB,QAAlBzE,kBAAkB,CAAC5H,QAAD,EAAkB;AACxC,UAAM0E,IAAI,GAAG,KAAK7C,OAAL,CAAapB,GAAb,CAAiBT,QAAjB,CAAb;;AACA,QAAI,OAAO0E,IAAP,KAAgB,WAApB,EAAiC;AAC/B;AACD;;AACD,SAAK7C,OAAL,CAAaiE,MAAb,CAAoB9F,QAApB;;AACA,QAAI0E,IAAI,CAACE,SAAT,EAAoB;AAClBF,MAAAA,IAAI,CAACI,IAAL,CAAU/H,IAAI,CAAC,IAAIsC,KAAJ,CAAU,IAAV,EAAgB,sBAAhB,CAAD,CAAd;AACD;;AACDqF,IAAAA,IAAI,CAACwJ,OAAL;AACD;;AAEW,QAANC,MAAM,GAAG;AACb,WAAO,KAAKpM,QAAL,CAAcmB,IAAd,GAAqB,CAA5B,EAA+B;AAC7B,WAAK,MAAMqB,KAAX,IAAoB,KAAKxC,QAAL,CAAcvC,MAAd,EAApB,EAA4C;AAC1C,cAAM+E,KAAK,CAAC4J,MAAN,EAAN;AACD,OAH4B,CAI7B;;;AACA,YAAM,IAAIvH,OAAJ,CAAaC,OAAD,IAAauH,cAAc,CAACvH,OAAD,CAAvC,CAAN;AACD;AACF;;AAEDwH,EAAAA,eAAe,GAAG;AAChB,QAAI,CAAC,KAAKpO,SAAV,EAAqB;AACnB,aAAO,KAAP;AACD;;AACD,WAAO,KAAKqJ,gBAAL,KAA0B,KAAKrJ,SAAtC;AACD;;AAEsB,QAAjBqO,iBAAiB,CAACtO,QAAD,EAAkB;AACvC,UAAMC,SAAS,GAAG,KAAKA,SAAvB;;AACA,QAAIA,SAAS,KAAK,KAAlB,EAAyB;AACvB,WAAKyB,MAAL,CAAYmD,IAAZ,CAAkB,2BAA0B7E,QAAS,iCAArD;AACA;AACD;;AACD,UAAMQ,gBAAgB,GAAG,KAAKA,gBAA9B;AACA,UAAMD,MAAM,GAAGC,gBAAgB,CAACC,GAAjB,CAAqBT,QAArB,CAAf;;AACA,QAAI,OAAOO,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAKmB,MAAL,CAAYmD,IAAZ,CAAkB,2BAA0B7E,QAAS,2BAA0BC,SAAU,EAAzF;AACA;AACD;;AACD,UAAM;AAAEF,MAAAA,MAAF;AAAUF,MAAAA,QAAV;AAAoBC,MAAAA;AAApB,QAAiCS,MAAvC;;AACA,QAAI,KAAKR,MAAL,KAAgBA,MAApB,EAA4B;AAC1B,WAAK2C,2BAAL,CAAiCoD,MAAjC,CAAwC/F,MAAxC;AACD;;AACD,UAAM,KAAK+K,OAAL,CAAanN,mBAAb,EAAkC;AAAEoC,MAAAA,MAAF;AAAUF,MAAAA,QAAV;AAAoBC,MAAAA;AAApB,KAAlC,EAAkE;AAAEkL,MAAAA,WAAW,EAAEnM;AAAf,KAAlE,CAAN;AACD;;AAE0B,QAArB0P,qBAAqB,CAACxO,MAAD,EAAgB;AACzC,UAAMwE,KAAK,GAAG,KAAKxC,QAAL,CAActB,GAAd,CAAkBlD,aAAlB,CAAd;;AACA,QAAI,OAAOgH,KAAP,KAAiB,WAArB,EAAkC;AAChC,YAAMA,KAAK,CAAC4J,MAAN,EAAN;AACD;;AACD,UAAMlO,SAAS,GAAG,KAAKA,SAAvB,CALyC,CAKP;;AAClC,QAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjC,WAAKyC,2BAAL,CAAiCoD,MAAjC,CAAwC/F,MAAxC;AACA,WAAKsG,IAAL,CAAU,cAAV,EAA0B;AAAEpG,QAAAA,SAAF;AAAaF,QAAAA;AAAb,OAA1B;AACA,YAAM,KAAK+K,OAAL,CAAalN,wBAAb,EAAuC;AAAEqC,QAAAA,SAAF;AAAaF,QAAAA;AAAb,OAAvC,EAA8D;AAAEiL,QAAAA,WAAW,EAAElM;AAAf,OAA9D,CAAN;AACD,KAJD,MAIO;AACL,WAAK4C,MAAL,CAAYmD,IAAZ,CAAkB,mCAAkC9E,MAAO,kBAA3D;AACD;AACF;;AAEoB,QAAfyO,eAAe,CAACzO,MAAD,EAAgBgB,OAA4F,GAAG,EAA/G,EAAmH;AACtI,UAAM;AAAEwB,MAAAA,IAAF;AAAQwI,MAAAA,eAAe,GAAG,KAA1B;AAAiC0D,MAAAA;AAAjC,QAAwD1N,OAA9D;AACA,UAAMwD,KAAK,GAAG,KAAKxC,QAAL,CAActB,GAAd,CAAkBlD,aAAlB,CAAd;;AACA,QAAI,OAAOgH,KAAP,KAAiB,WAArB,EAAkC;AAChC,YAAMA,KAAK,CAAC4J,MAAN,EAAN;AACD;;AACD,UAAMO,YAAY,GAAG,KAAKzO,SAAL,KAAmB,QAAxC,CANsI,CAOtI;;AACA,UAAMA,SAAS,GAAG,KAAKA,SAAL,IAAkB0O,UAAU,CAACC,MAAX,CAAkBC,UAAlB,EAApC,CARsI,CAQlE;;AACpE,QAAIC,SAAS,GAAG,KAAhB;;AACA,UAAMC,+BAA+B,GAAG,CAAC;AAAE9O,MAAAA,SAAS,EAAE+O,kBAAb;AAAiCjP,MAAAA,MAAM,EAAEkP;AAAzC,KAAD,KAAoG;AAC1I,UAAID,kBAAkB,KAAK/O,SAA3B,EAAsC;AACpC;AACD;;AACD,UAAIgP,eAAe,KAAKlP,MAAxB,EAAgC;AAC9B;AACD;;AACD+O,MAAAA,SAAS,GAAG,IAAZ;AACD,KARD;;AASA,UAAMjH,YAAY,GAAG,YAAY;AAC/B,UAAI6G,YAAJ,EAAkB;AAChB;AACD;;AACD,UAAI;AACF,cAAM,KAAK7G,YAAL,EAAN;AACD,OAFD,CAEE,OAAOrC,KAAP,EAAc;AACd,aAAK9D,MAAL,CAAY8D,KAAZ,CAAkB,yBAAlB;AACA,aAAK9D,MAAL,CAAYoG,UAAZ,CAAuBtC,KAAvB;AACD;AACF,KAVD;;AAWA,SAAKkB,WAAL,CAAiB,cAAjB,EAAiCqI,+BAAjC;;AACA,QAAI;AACF,UAAIL,YAAJ,EAAkB;AAChB,aAAKhM,2BAAL,CAAiCgI,GAAjC,CAAqC3K,MAArC;AACA,cAAM,KAAK+K,OAAL,CAAazN,iBAAb,EAAgC;AAAE0C,UAAAA,MAAF;AAAUE,UAAAA,SAAV;AAAqBsC,UAAAA;AAArB,SAAhC,EAA6D;AAAEyI,UAAAA,WAAW,EAAExM;AAAf,SAA7D,CAAN;AACD,OAHD,MAGO;AACL,cAAM,KAAKiL,YAAL,CAAkBxJ,SAAlB,EAA6BwO,kBAA7B,CAAN;AACA,aAAK/L,2BAAL,CAAiCgI,GAAjC,CAAqC3K,MAArC;AACA,cAAM,KAAK+K,OAAL,CAAazN,iBAAb,EAAgC;AAAE0C,UAAAA,MAAF;AAAUE,UAAAA,SAAV;AAAqBsC,UAAAA;AAArB,SAAhC,EAA6D;AAAEyI,UAAAA,WAAW,EAAExM;AAAf,SAA7D,CAAN;AACD;AACF,KATD,CASE,OAAOgH,KAAP,EAAc;AACd,YAAMA,KAAN;AACD,KAXD,SAWU;AACR,WAAKzB,cAAL,CAAoB,cAApB,EAAoCgL,+BAApC;AACD;;AACD,QAAID,SAAJ,EAAe;AACb,YAAMjH,YAAY,EAAlB;AACA,YAAM,IAAI9I,wBAAJ,CAA8B,sBAAqBgB,MAAO,gBAA1D,CAAN;AACD;;AACD,UAAM,IAAI6G,OAAJ,CAAY,CAACC,OAAD,EAAUkD,MAAV,KAAqB;AACrC,YAAMlG,OAAO,GAAG,MAAM;AACpBV,QAAAA,YAAY,CAAC+H,OAAD,CAAZ;AACA,aAAKnH,cAAL,CAAoB,aAApB,EAAmCmL,iBAAnC;AACA,aAAKnL,cAAL,CAAoB,OAApB,EAA6B4F,WAA7B;AACA,aAAK5F,cAAL,CAAoB,OAApB,EAA6BoL,WAA7B;AACA,aAAKpL,cAAL,CAAoB,SAApB,EAA+BgE,aAA/B;AACA,aAAKhE,cAAL,CAAoB,aAApB,EAAmC2D,iBAAnC;AACA,aAAK3D,cAAL,CAAoB,cAApB,EAAoCqL,kBAApC;AACA,aAAKnN,uBAAL,CAA6B6D,MAA7B,CAAqC,GAAE/F,MAAO,IAAGE,SAAU,EAA3D;AACD,OATD;;AAUA,YAAMiL,OAAO,GAAGvD,UAAU,CAAC,YAAY;AACrC9D,QAAAA,OAAO;AACP,cAAMgE,YAAY,EAAlB;AACAkC,QAAAA,MAAM,CAAC,IAAIpL,sBAAJ,CAA4B,8BAA6BsC,IAAI,CAACuK,KAAL,CAAWT,eAAe,GAAG,GAA7B,IAAoC,EAAG,UAAhG,CAAD,CAAN;AACD,OAJyB,EAIvBA,eAJuB,CAA1B;;AAKA,YAAMqE,kBAAkB,GAAG,OAAO;AAAEnP,QAAAA,SAAS,EAAE+O,kBAAb;AAAiCjP,QAAAA,MAAM,EAAEkP;AAAzC,OAAP,KAA0G;AACnI,YAAID,kBAAkB,KAAK/O,SAA3B,EAAsC;AACpC;AACD;;AACD,YAAIgP,eAAe,KAAKlP,MAAxB,EAAgC;AAC9B;AACD;;AACD8D,QAAAA,OAAO;AACP,cAAMgE,YAAY,EAAlB;AACAkC,QAAAA,MAAM,CAAC,IAAIhL,wBAAJ,CAA8B,sBAAqBgB,MAAO,gBAA1D,CAAD,CAAN;AACD,OAVD;;AAWA,YAAMmP,iBAAiB,GAAI3O,MAAD,IAAoB;AAC5C,YAAIA,MAAM,CAACN,SAAP,KAAqBA,SAAzB,EAAoC;AAClC;AACD;;AACD,YAAIM,MAAM,CAACR,MAAP,KAAkBA,MAAtB,EAA8B;AAC5B;AACD;;AACD8D,QAAAA,OAAO;AACPgD,QAAAA,OAAO;AACR,OATD,CA3BqC,CAqCrC;;;AACA,YAAMa,iBAAiB,GAAG,MAAOnH,MAAP,IAA0B;AAClD,YAAIA,MAAM,CAACR,MAAP,KAAkB,KAAKA,MAA3B,EAAmC;AACjC;AACD;;AACD,YAAIsP,qBAAqB,GAAG,IAA5B;;AACA,aAAK,MAAM9H,UAAX,IAAyB,KAAKjH,SAAL,CAAed,MAAf,EAAzB,EAAkD;AAChD,cAAI+H,UAAU,CAACxH,MAAX,KAAsB,KAAKA,MAA/B,EAAuC;AACrC;AACD;;AACD,cAAIwH,UAAU,CAACvH,QAAX,KAAwB,KAAKA,QAAjC,EAA2C;AACzC;AACD;;AACDqP,UAAAA,qBAAqB,GAAG,KAAxB;AACD;;AACD,YAAIA,qBAAJ,EAA2B;AACzBxL,UAAAA,OAAO;AACP,gBAAMgE,YAAY,EAAlB;AACAkC,UAAAA,MAAM,CAAC,IAAIrL,oBAAJ,CAA0B,QAAOqB,MAAO,uCAAxC,CAAD,CAAN;AACD;AACF,OAnBD;;AAoBA,YAAMgI,aAAa,GAAIK,YAAD,IAAiC;AACrD,YAAIA,YAAY,KAAKnI,SAArB,EAAgC;AAC9B;AACD;;AACD4D,QAAAA,OAAO;AACPgD,QAAAA,OAAO;AACR,OAND;;AAOA,YAAM8C,WAAW,GAAG,MAAM;AACxB9F,QAAAA,OAAO;AACPkG,QAAAA,MAAM,CAAC,IAAIxL,iBAAJ,CAAsB,sBAAtB,CAAD,CAAN;AACD,OAHD;;AAIA,YAAM+Q,aAAa,GAAG,YAAY;AAChCzL,QAAAA,OAAO;AACP,cAAMgE,YAAY,EAAlB;AACAkC,QAAAA,MAAM,CAAC,IAAItL,uBAAJ,CAA4B,qBAA5B,CAAD,CAAN;AACD,OAJD;;AAKA,YAAM0Q,WAAW,GAAG,MAAOtG,UAAP,IAA6B;AAC/C,YAAI9I,MAAM,KAAK8I,UAAf,EAA2B;AACzB;AACD;;AACDhF,QAAAA,OAAO;AACP,cAAMgE,YAAY,EAAlB;AACAkC,QAAAA,MAAM,CAAC,IAAIrL,oBAAJ,CAA0B,QAAOqB,MAAO,uCAAxC,CAAD,CAAN;AACD,OAPD;;AAQA,WAAKkC,uBAAL,CAA6BvB,GAA7B,CAAkC,GAAEX,MAAO,IAAGE,SAAS,IAAI,EAAG,EAA9D,EAAiEqP,aAAjE;AACA,WAAK5I,WAAL,CAAiB,aAAjB,EAAgCwI,iBAAhC;AACA,WAAKxI,WAAL,CAAiB,OAAjB,EAA0BiD,WAA1B;AACA,WAAKjD,WAAL,CAAiB,OAAjB,EAA0ByI,WAA1B;AACA,WAAKzI,WAAL,CAAiB,SAAjB,EAA4BqB,aAA5B;;AACA,UAAI,KAAKhI,MAAL,KAAgBA,MAApB,EAA4B;AAC1B,aAAK2G,WAAL,CAAiB,aAAjB,EAAgCgB,iBAAhC;AACD;;AACD,WAAKhB,WAAL,CAAiB,cAAjB,EAAiC0I,kBAAjC;AACD,KA3FK,CAAN;AA4FD;;AAEiB,QAAZ3F,YAAY,CAACxJ,SAAD,EAAmBwO,kBAAnB,EAA4D;AAC5E,SAAK/L,2BAAL,CAAiCsF,KAAjC;AACA,UAAMuH,wBAAwB,GAAG,KAAKjG,gBAAtC;AACA,SAAKA,gBAAL,GAAwBrJ,SAAxB;;AACA,QAAI;AACF,YAAM,KAAKuH,UAAL,CAAgBjK,aAAhB,EAA+B,MAAM,KAAKuN,OAAL,CAAa5N,aAAb,EAA4B;AAAE+C,QAAAA;AAAF,OAA5B,EAA2C;AAAE+K,QAAAA,WAAW,EAAE/M;AAAf,OAA3C,CAArC,CAAN;AACD,KAFD,CAEE,OAAOuH,KAAP,EAAc;AACd,WAAK8D,gBAAL,GAAwBiG,wBAAxB;AACA,YAAM/J,KAAN;AACD;;AACD,WAAO,KAAK+D,eAAZ;;AACA,QAAI,OAAOkF,kBAAP,KAA8B,UAAlC,EAA8C;AAC5C,YAAMe,yBAAyB,GAAG,MAAOhQ,MAAP,IAAkB;AAClD,YAAI,KAAKkD,2BAAL,CAAiC2B,GAAjC,CAAqC7E,MAAM,CAACO,MAA5C,CAAJ,EAAyD;AACvD,iBAAO,CAAC,IAAD,EAAO,GAAP,EAAY,YAAZ,CAAP;AACD;;AACD,YAAI,KAAKA,MAAL,KAAgBP,MAAM,CAACO,MAA3B,EAAmC;AACjC,iBAAO,CAAC,IAAD,EAAO,GAAP,EAAY,YAAZ,CAAP;AACD;;AACD,YAAI,OAAO0O,kBAAP,KAA8B,UAAlC,EAA8C;AAC5C,iBAAOA,kBAAkB,CAACjP,MAAD,CAAzB;AACD;;AACD,eAAO,CAAC,IAAD,EAAO,GAAP,EAAY,YAAZ,CAAP;AACD,OAXD;;AAYA,WAAK6C,qBAAL,CAA2B3B,GAA3B,CAA+BT,SAA/B,EAA0CuP,yBAA1C;AACD,KAdD,MAcO;AACL,WAAKnN,qBAAL,CAA2B3B,GAA3B,CAA+BT,SAA/B,EAA0C,MAAM,CAAC,IAAD,EAAO,GAAP,EAAY,YAAZ,CAAhD;AACD;AACF;;AAEDwP,EAAAA,cAAc,GAAG;AACf,QAAI,CAAC,KAAKxP,SAAV,EAAqB;AACnB,aAAO,KAAP;AACD;;AACD,WAAO,KAAKsJ,eAAL,KAAyB,KAAKtJ,SAArC;AACD;;AAEgB,QAAX8C,WAAW,CAAC9C,SAAD,EAAmB8K,eAAwB,GAAG,KAA9C,EAAqD;AACpE,UAAM2E,uBAAuB,GAAG,KAAKnG,eAArC;AACA,SAAKA,eAAL,GAAuBtJ,SAAvB;;AACA,QAAI;AACF,YAAM,KAAKuH,UAAL,CAAgBjK,aAAhB,EAA+B,MAAM,KAAKuN,OAAL,CAAa1N,YAAb,EAA2B;AAAE6C,QAAAA,SAAF;AAAa8K,QAAAA;AAAb,OAA3B,EAA2D;AAAEC,QAAAA,WAAW,EAAE7M,gBAAf;AAAiC4M,QAAAA,eAAe,EAAEA,eAAe,GAAG;AAApE,OAA3D,CAArC,CAAN;AACD,KAFD,CAEE,OAAOvF,KAAP,EAAc;AACd,WAAK+D,eAAL,GAAuBmG,uBAAvB;AACA,YAAMlK,KAAN;AACD;;AACD,UAAM8D,gBAAgB,GAAG,KAAKA,gBAA9B;AACA,WAAO,KAAKA,gBAAZ;;AACA,QAAI,OAAOA,gBAAP,KAA4B,QAAhC,EAA0C;AACxC,WAAKjH,qBAAL,CAA2ByD,MAA3B,CAAkCwD,gBAAlC;AACD;AACF;;AAEqB,QAAhBqG,gBAAgB,GAAG;AACvB,UAAM,KAAK7E,OAAL,CAAatN,0BAAb,EAAyC,EAAzC,EAA8C;AAAEwN,MAAAA,WAAW,EAAEhM;AAAf,KAA9C,CAAN;AACD;;AAEiB,QAAZ6I,YAAY,GAAG;AACnB,QAAI;AACF,YAAM,KAAKL,UAAL,CAAgBjK,aAAhB,EAA+B,MAAM,KAAKuN,OAAL,CAAa3N,aAAb,EAA4B,EAA5B,EAAgC;AAAE6N,QAAAA,WAAW,EAAE5M;AAAf,OAAhC,CAArC,CAAN;AACA,YAAMkL,gBAAgB,GAAG,KAAKA,gBAA9B;AACA,aAAO,KAAKA,gBAAZ;AACA,aAAO,KAAKC,eAAZ;;AACA,UAAI,OAAOD,gBAAP,KAA4B,QAAhC,EAA0C;AACxC,aAAKjH,qBAAL,CAA2ByD,MAA3B,CAAkCwD,gBAAlC;AACD;AACF,KARD,CAQE,OAAO9D,KAAP,EAAc;AACd,UAAIA,KAAK,YAAYjH,iBAArB,EAAwC;AACtC;AACD;;AACD,YAAMiH,KAAN;AACD;AACF;;AAEkB,QAAb6E,aAAa,CAACxE,OAAD,EAA4D;AAC7E,QAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,WAAKnE,MAAL,CAAY8D,KAAZ,CAAkB,wBAAlB;AACA,WAAK9D,MAAL,CAAY8D,KAAZ,CAAkBoK,IAAI,CAACC,SAAL,CAAehK,OAAf,CAAlB;AACA;AACD;;AACD,UAAM;AAAEoF,MAAAA,SAAF;AAAa3E,MAAAA,IAAb;AAAmB2D,MAAAA;AAAnB,QAA6BpE,OAAnC;;AACA,QAAI,OAAOS,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAK5E,MAAL,CAAY8D,KAAZ,CAAkB,kEAAlB;AACA,WAAK9D,MAAL,CAAY8D,KAAZ,CAAkBoK,IAAI,CAACC,SAAL,CAAehK,OAAf,CAAlB;AACA;AACD;;AACD,QAAI,OAAOoE,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAKvI,MAAL,CAAY8D,KAAZ,CAAkB,mEAAlB;AACA,WAAK9D,MAAL,CAAY8D,KAAZ,CAAkBoK,IAAI,CAACC,SAAL,CAAehK,OAAf,CAAlB;AACA;AACD;;AACD,QAAIS,IAAI,KAAKzI,QAAT,IAAqB,OAAOoN,SAAP,KAAqB,QAA9C,EAAwD;AACtD,YAAM6E,QAAQ,GAAG,KAAK5N,kBAAL,CAAwBzB,GAAxB,CAA4BwK,SAA5B,CAAjB;;AACA,UAAI,OAAO6E,QAAP,KAAoB,UAAxB,EAAoC;AAClC,aAAKpO,MAAL,CAAY8D,KAAZ,CAAmB,wBAAuByF,SAAU,iBAApD;AACA;AACD;;AACD,YAAM;AAAEG,QAAAA,OAAF;AAAW3E,QAAAA,IAAX;AAAiB4E,QAAAA;AAAjB,UAA0BpB,KAAhC;;AACA,UAAI,OAAOmB,OAAP,KAAmB,SAAvB,EAAkC;AAChC,aAAK1J,MAAL,CAAY8D,KAAZ,CAAkB,8DAAlB;AACA,aAAK9D,MAAL,CAAY8D,KAAZ,CAAkBoK,IAAI,CAACC,SAAL,CAAehK,OAAf,CAAlB;AACAiK,QAAAA,QAAQ,CAAC,KAAD,EAAQ,GAAR,EAAa,8DAAb,CAAR;AACA;AACD;;AACD,UAAI,OAAOrJ,IAAP,KAAgB,QAApB,EAA8B;AAC5B,aAAK/E,MAAL,CAAY8D,KAAZ,CAAkB,2DAAlB;AACA,aAAK9D,MAAL,CAAY8D,KAAZ,CAAkBoK,IAAI,CAACC,SAAL,CAAehK,OAAf,CAAlB;AACAiK,QAAAA,QAAQ,CAAC,KAAD,EAAQ,GAAR,EAAa,2DAAb,CAAR;AACA;AACD;;AACD,UAAI,OAAOzE,IAAP,KAAgB,QAApB,EAA8B;AAC5B,aAAK3J,MAAL,CAAY8D,KAAZ,CAAkB,2DAAlB;AACA,aAAK9D,MAAL,CAAY8D,KAAZ,CAAkBoK,IAAI,CAACC,SAAL,CAAehK,OAAf,CAAlB;AACAiK,QAAAA,QAAQ,CAAC,KAAD,EAAQ,GAAR,EAAa,2DAAb,CAAR;AACA;AACD;;AACDA,MAAAA,QAAQ,CAAC1E,OAAD,EAAU3E,IAAV,EAAgB4E,IAAhB,CAAR;AACA;AACD;;AACD,YAAQ/E,IAAR;AACE,WAAKrJ,MAAL;AACE,YAAI;AACF,gBAAM;AACJ+C,YAAAA,QADI;AAEJF,YAAAA,QAFI;AAGJD,YAAAA,QAHI;AAIJ0C,YAAAA;AAJI,cAKF0H,KALJ;;AAMA,cAAI,OAAOnK,QAAP,KAAoB,QAAxB,EAAkC;AAChC,iBAAK4B,MAAL,CAAY8D,KAAZ,CAAkB,+CAAlB;AACA,iBAAK9D,MAAL,CAAY8D,KAAZ,CAAkBoK,IAAI,CAACC,SAAL,CAAehK,OAAf,CAAlB;AACA;AACD;;AACD,cAAI,OAAOhG,QAAP,KAAoB,QAAxB,EAAkC;AAChC,iBAAK6B,MAAL,CAAY8D,KAAZ,CAAkB,+CAAlB;AACA,iBAAK9D,MAAL,CAAY8D,KAAZ,CAAkBoK,IAAI,CAACC,SAAL,CAAehK,OAAf,CAAlB;AACA;AACD;;AACD,cAAI,OAAOtD,IAAP,KAAgB,QAApB,EAA8B;AAC5B,iBAAKb,MAAL,CAAY8D,KAAZ,CAAkB,mDAAlB;AACA,iBAAK9D,MAAL,CAAY8D,KAAZ,CAAkBoK,IAAI,CAACC,SAAL,CAAehK,OAAf,CAAlB;AACA;AACD;;AACD,gBAAMnB,IAAI,GAAG,KAAK7C,OAAL,CAAapB,GAAb,CAAiBT,QAAjB,CAAb;;AACA,cAAI,OAAO0E,IAAP,KAAgB,WAApB,EAAiC;AAC/B,kBAAMsI,WAAW,GAAG,KAAK7K,cAAL,CAAoB1B,GAApB,CAAwBT,QAAxB,CAApB;;AACA,gBAAIiN,KAAK,CAACC,OAAN,CAAcF,WAAd,CAAJ,EAAgC;AAC9BA,cAAAA,WAAW,CAAC5H,IAAZ,CAAiB7C,IAAjB;AACA;AACD;;AACD,iBAAKJ,cAAL,CAAoBzB,GAApB,CAAwBV,QAAxB,EAAkC,CAACuC,IAAD,CAAlC;AACA;AACD;;AACD,cAAImC,IAAI,CAACqL,SAAL,IAAkBrL,IAAI,CAACsL,UAA3B,EAAuC;AACrC;AACD;;AACDtL,UAAAA,IAAI,CAACd,MAAL,CAAYrB,IAAZ;AACD,SApCD,CAoCE,OAAOiD,KAAP,EAAc;AACd,eAAK9D,MAAL,CAAY8D,KAAZ,CAAkB,kCAAlB;AACA,eAAK9D,MAAL,CAAYoG,UAAZ,CAAuBtC,KAAvB;AACD;;AACD;;AACF,WAAKlI,yBAAL;AACE,YAAI;AACF,gBAAM;AACJyC,YAAAA,MADI;AAEJE,YAAAA;AAFI,cAGFgK,KAHJ;;AAIA,cAAI,OAAOlK,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,iBAAK2B,MAAL,CAAY8D,KAAZ,CAAkB,qDAAlB;AACA,iBAAK9D,MAAL,CAAY8D,KAAZ,CAAkBoK,IAAI,CAACC,SAAL,CAAehK,OAAf,CAAlB;AACA;AACD;;AACD,cAAI,OAAO5F,SAAP,KAAqB,QAAzB,EAAmC;AACjC,iBAAKyB,MAAL,CAAY8D,KAAZ,CAAkB,wDAAlB;AACA,iBAAK9D,MAAL,CAAY8D,KAAZ,CAAkBoK,IAAI,CAACC,SAAL,CAAehK,OAAf,CAAlB;AACA;AACD;;AACD,gBAAMoK,WAAW,GAAI,GAAElQ,MAAO,IAAGE,SAAU,EAA3C;AACA,gBAAMiQ,oBAAoB,GAAG,KAAKjO,uBAAL,CAA6BxB,GAA7B,CAAiCwP,WAAjC,CAA7B;;AACA,cAAI,OAAOC,oBAAP,KAAgC,UAApC,EAAgD;AAC9CA,YAAAA,oBAAoB;AACrB;AACF,SApBD,CAoBE,OAAO1K,KAAP,EAAc;AACd,eAAK9D,MAAL,CAAY8D,KAAZ,CAAkB,0CAAlB;AACA,eAAK9D,MAAL,CAAYoG,UAAZ,CAAuBtC,KAAvB;AACD;;AACD;;AACF,WAAKhI,0BAAL;AACE,YAAI;AACF,gBAAM;AACJuC,YAAAA,MADI;AAEJE,YAAAA;AAFI,cAGFgK,KAHJ;;AAIA,cAAI,OAAOlK,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,iBAAK2B,MAAL,CAAY8D,KAAZ,CAAkB,yDAAlB;AACA,iBAAK9D,MAAL,CAAY8D,KAAZ,CAAkBoK,IAAI,CAACC,SAAL,CAAehK,OAAf,CAAlB;AACA;AACD;;AACD,cAAI,OAAO5F,SAAP,KAAqB,QAAzB,EAAmC;AACjC,iBAAKyB,MAAL,CAAY8D,KAAZ,CAAkB,4DAAlB;AACA,iBAAK9D,MAAL,CAAY8D,KAAZ,CAAkBoK,IAAI,CAACC,SAAL,CAAehK,OAAf,CAAlB;AACA;AACD;;AACD,gBAAMoK,WAAW,GAAI,GAAElQ,MAAO,IAAGE,SAAU,EAA3C;AACA,gBAAMkQ,QAAQ,GAAG,KAAK7N,qBAAL,CAA2B7B,GAA3B,CAA+BwP,WAA/B,CAAjB;;AACA,cAAI,CAAChD,KAAK,CAACC,OAAN,CAAciD,QAAd,CAAL,EAA8B;AAC5B,iBAAKzO,MAAL,CAAYmD,IAAZ,CAAkB,iDAAgD9E,MAAO,gBAAeE,SAAU,0BAAlG;AACA;AACD;;AACD,eAAKyB,MAAL,CAAYmD,IAAZ,CAAkB,0CAAyC9E,MAAO,gBAAeE,SAAU,EAA3F;AACAkQ,UAAAA,QAAQ,CAAC,CAAD,CAAR,CAAYrM,KAAZ;AACD,SAvBD,CAuBE,OAAO0B,KAAP,EAAc;AACd,eAAK9D,MAAL,CAAY8D,KAAZ,CAAkB,8CAAlB;AACA,eAAK9D,MAAL,CAAYoG,UAAZ,CAAuBtC,KAAvB;AACD;;AACD;;AACF,WAAK/H,oBAAL;AACE,YAAI;AACF,gBAAM;AACJsC,YAAAA,MADI;AAEJE,YAAAA;AAFI,cAGFgK,KAHJ;;AAIA,cAAI,OAAOlK,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,iBAAK2B,MAAL,CAAY8D,KAAZ,CAAkB,mDAAlB;AACA,iBAAK9D,MAAL,CAAY8D,KAAZ,CAAkBoK,IAAI,CAACC,SAAL,CAAehK,OAAf,CAAlB;AACA;AACD;;AACD,cAAI,OAAO5F,SAAP,KAAqB,QAAzB,EAAmC;AACjC,iBAAKyB,MAAL,CAAY8D,KAAZ,CAAkB,sDAAlB;AACA,iBAAK9D,MAAL,CAAY8D,KAAZ,CAAkBoK,IAAI,CAACC,SAAL,CAAehK,OAAf,CAAlB;AACA;AACD;;AACD,gBAAMoK,WAAW,GAAI,GAAElQ,MAAO,IAAGE,SAAU,EAA3C;AACA,gBAAMkQ,QAAQ,GAAG,KAAK7N,qBAAL,CAA2B7B,GAA3B,CAA+BwP,WAA/B,CAAjB;;AACA,cAAIhD,KAAK,CAACC,OAAN,CAAciD,QAAd,CAAJ,EAA6B;AAC3B,iBAAKzO,MAAL,CAAYmD,IAAZ,CAAkB,iCAAgC9E,MAAO,gBAAeE,SAAU,iBAAlF;AACA,kBAAMkQ,QAAQ,CAAC,CAAD,CAAd;AACA;AACD;;AACD,gBAAM1B,kBAAkB,GAAG,KAAKpM,qBAAL,CAA2B5B,GAA3B,CAA+BR,SAA/B,CAA3B;;AACA,cAAI,OAAOwO,kBAAP,KAA8B,UAAlC,EAA8C;AAC5C,iBAAK/M,MAAL,CAAY8D,KAAZ,CAAmB,uBAAsBvF,SAAU,iBAAnD;AACA;AACD;;AACD,gBAAMwD,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACAD,UAAAA,eAAe,CAACG,MAAhB,CAAuBsD,gBAAvB,CAAwC,OAAxC,EAAiD,MAAM;AACrD,iBAAK5E,qBAAL,CAA2BwD,MAA3B,CAAkCmK,WAAlC;AACD,WAFD;;AAGA,gBAAMnG,OAAO,GAAG,CAAC,YAAY;AAC3B,gBAAIsG,QAAQ,GAAG,CAAC,KAAD,EAAQ,GAAR,EAAa,gCAAb,CAAf;;AACA,gBAAI;AACFA,cAAAA,QAAQ,GAAG,MAAM3B,kBAAkB,CAAC;AAAE1O,gBAAAA,MAAF;AAAUE,gBAAAA,SAAV;AAAqB0D,gBAAAA,WAAW,EAAEF,eAAe,CAACG;AAAlD,eAAD,CAAnC;AACD,aAFD,CAEE,OAAO4B,KAAP,EAAc;AACd,mBAAK9D,MAAL,CAAY8D,KAAZ,CAAmB,sDAAqDzF,MAAO,gBAAeE,SAAU,iCAAxG;AACA,mBAAKyB,MAAL,CAAYoG,UAAZ,CAAuBtC,KAAvB;AACD;;AACD,gBAAI/B,eAAe,CAACG,MAAhB,CAAuBuD,OAA3B,EAAoC;AAClC,mBAAKzF,MAAL,CAAYmD,IAAZ,CAAkB,iCAAgC9E,MAAO,gBAAeE,SAAU,cAAlF;AACA;AACD;;AACD,gBAAI;AACF,oBAAM,KAAK6K,OAAL,CAAapN,qBAAb,EAAoC;AACxCqC,gBAAAA,MADwC;AAExCE,gBAAAA,SAFwC;AAGxCmL,gBAAAA,OAAO,EAAEgF,QAAQ,CAAC,CAAD,CAHuB;AAIxC3J,gBAAAA,IAAI,EAAE2J,QAAQ,CAAC,CAAD,CAJ0B;AAKxC/E,gBAAAA,IAAI,EAAE+E,QAAQ,CAAC,CAAD;AAL0B,eAApC,EAMH;AAAEpF,gBAAAA,WAAW,EAAE1M;AAAf,eANG,CAAN;AAOD,aARD,CAQE,OAAOkH,KAAP,EAAc;AACd,mBAAK9D,MAAL,CAAY8D,KAAZ,CAAmB,iDAAgDzF,MAAO,gBAAeE,SAAU,EAAnG;AACA,mBAAKyB,MAAL,CAAYoG,UAAZ,CAAuBtC,KAAvB;AACD;;AACD,iBAAKlD,qBAAL,CAA2BwD,MAA3B,CAAkCmK,WAAlC;AACD,WAzBe,GAAhB;;AA0BA,eAAK3N,qBAAL,CAA2B5B,GAA3B,CAA+BuP,WAA/B,EAA4C,CAACnG,OAAD,EAAUrG,eAAV,CAA5C;AACA,gBAAMqG,OAAN;AACD,SA3DD,CA2DE,OAAOtE,KAAP,EAAc;AACd,eAAK9D,MAAL,CAAY8D,KAAZ,CAAkB,wCAAlB;AACA,eAAK9D,MAAL,CAAYoG,UAAZ,CAAuBtC,KAAvB;AACD;;AACD;;AACF;AACE,aAAK9D,MAAL,CAAYmD,IAAZ,CAAkB,wBAAuByB,IAAK,EAA9C;AApKJ;AAsKD;;AAEqB,QAAhBgH,gBAAgB,CAACtN,QAAD,EAAkB;AACtC,UAAM0E,IAAI,GAAG,KAAK7C,OAAL,CAAapB,GAAb,CAAiBT,QAAjB,CAAb;;AACA,QAAI,OAAO0E,IAAP,KAAgB,WAAhB,IAA+BA,IAAI,CAACE,SAAxC,EAAmD;AACjD,aAAOF,IAAP;AACD;;AACD,WAAO,IAAIkC,OAAJ,CAAY,CAACC,OAAD,EAAUkD,MAAV,KAAqB;AACtC,UAAIzG,KAAJ,CADsC,CAC3B;;;AACX,YAAMO,OAAO,GAAG,MAAM;AACpB,aAAKE,cAAL,CAAoB,oBAApB,EAA0CC,wBAA1C;AACA,aAAKD,cAAL,CAAoB,SAApB,EAA+B+C,aAA/B;AACA,aAAK/C,cAAL,CAAoB,MAApB,EAA4BsM,UAA5B;;AACA,YAAI,OAAO/M,KAAP,KAAiB,WAArB,EAAkC;AAChCA,UAAAA,KAAK,CAACS,cAAN,CAAqB,OAArB,EAA8BE,eAA9B;;AACAX,UAAAA,KAAK,CAACS,cAAN,CAAqB,OAArB,EAA8BoI,eAA9B;AACD;AACF,OARD;;AASA,YAAMlI,eAAe,GAAG,MAAM;AAC5BJ,QAAAA,OAAO;AACPkG,QAAAA,MAAM,CAAC,IAAIpF,KAAJ,CAAW,QAAO3E,QAAS,2CAA3B,CAAD,CAAN;AACD,OAHD;;AAIA,YAAMmM,eAAe,GAAI3G,KAAD,IAAiB;AACvC3B,QAAAA,OAAO;AACPkG,QAAAA,MAAM,CAACvE,KAAD,CAAN;AACD,OAHD;;AAIA,YAAM6K,UAAU,GAAG,CAAC;AAAErQ,QAAAA,QAAQ,EAAE+G,WAAZ;AAAyBrC,QAAAA,IAAI,EAAE4L;AAA/B,OAAD,KAAyC;AAC1D,YAAIvJ,WAAW,KAAK/G,QAApB,EAA8B;AAC5B;AACD;;AACDsD,QAAAA,KAAK,GAAGgN,EAAR;;AACAA,QAAAA,EAAE,CAAC5J,WAAH,CAAe,OAAf,EAAwBzC,eAAxB;;AACAqM,QAAAA,EAAE,CAAC5J,WAAH,CAAe,OAAf,EAAwByF,eAAxB;AACD,OAPD;;AAQA,YAAMrF,aAAa,GAAG,CAAC;AAAE9G,QAAAA,QAAQ,EAAE+G,WAAZ;AAAyBrC,QAAAA,IAAI,EAAE4L;AAA/B,OAAD,KAAyC;AAC7D,YAAIvJ,WAAW,KAAK/G,QAApB,EAA8B;AAC5B;AACD;;AACD6D,QAAAA,OAAO;AACPgD,QAAAA,OAAO,CAACyJ,EAAD,CAAP;AACD,OAND;;AAOA,YAAMtM,wBAAwB,GAAIM,WAAD,IAAwB;AACvD,YAAItE,QAAQ,KAAKsE,WAAjB,EAA8B;AAC5B;AACD;;AACDT,QAAAA,OAAO;AACPkG,QAAAA,MAAM,CAAC,IAAIpF,KAAJ,CAAW,UAAS3E,QAAS,yCAA7B,CAAD,CAAN;AACD,OAND;;AAOA,WAAK0G,WAAL,CAAiB,oBAAjB,EAAuC1C,wBAAvC;AACA,WAAK0C,WAAL,CAAiB,SAAjB,EAA4BI,aAA5B;AACA,WAAKJ,WAAL,CAAiB,MAAjB,EAAyB2J,UAAzB;AACD,KA5CM,CAAP;AA6CD;;AAEDE,EAAAA,sBAAsB,CAAChO,IAAD,EAAe;AACnC,WAAO,KAAKuI,OAAL,CAAaxN,yBAAb,EAAwCiF,IAAxC,EAA8C;AAAEyI,MAAAA,WAAW,EAAEpM;AAAf,KAA9C,CAAP;AACD;;AAEDqK,EAAAA,KAAK,GAAG;AACN,SAAKhB,cAAL,CAAoB,KAAK1G,IAAzB,EAA+B,EAA/B;AACA4B,IAAAA,YAAY,CAAC,KAAKC,kCAAN,CAAZ;AACD;;AAEU,QAAL+F,KAAK,GAAG;AACZ,SAAKzH,MAAL,CAAY8E,IAAZ,CAAiB,SAAjB;AACA,SAAKxF,MAAL,GAAc,KAAd;AAEA,SAAKiI,KAAL;;AAEA,SAAK,MAAM,CAACjJ,QAAD,EAAWkL,OAAX,CAAX,IAAkC,KAAK9I,wBAAvC,EAAiE;AAC/De,MAAAA,YAAY,CAAC+H,OAAD,CAAZ;AACA,WAAK1D,UAAL,CAAgBxH,QAAhB,EAA0B,MAAM,KAAK4H,kBAAL,CAAwB5H,QAAxB,CAAhC;AACD;;AACD,SAAKoC,wBAAL,CAA8B4F,KAA9B;AAEA,SAAK3B,IAAL,CAAU,OAAV;;AAEA,QAAI;AACF,YAAM,KAAK8H,MAAL,EAAN;AACD,KAFD,CAEE,OAAO3I,KAAP,EAAc;AACd,WAAK9D,MAAL,CAAY8D,KAAZ,CAAkB,6BAAlB;AACA,WAAK9D,MAAL,CAAYoG,UAAZ,CAAuBtC,KAAvB;AACD;;AAED,SAAKzB,cAAL,CAAoB,YAApB,EAAkC,KAAKuD,gBAAvC;AACA,SAAKvD,cAAL,CAAoB,aAApB,EAAmC,KAAK2D,iBAAxC;AACA,SAAK3D,cAAL,CAAoB,mBAApB,EAAyC,KAAKf,uBAA9C;AACA,SAAKe,cAAL,CAAoB,oBAApB,EAA0C,KAAKC,wBAA/C;AACA,SAAKD,cAAL,CAAoB,SAApB,EAA+B,KAAKgE,aAApC;AAEA,SAAKlH,WAAL,CAAiB0B,IAAjB,CAAsBwB,cAAtB,CAAqC,KAArC,EAA4C,KAAKkE,cAAjD;AACA,SAAKpH,WAAL,CAAiBkD,cAAjB,CAAgC,OAAhC,EAAyC,KAAKiF,gBAA9C;AACA,SAAKnI,WAAL,CAAiBkD,cAAjB,CAAgC,gBAAhC,EAAkD,KAAKmF,yBAAvD;AACA,SAAKrI,WAAL,CAAiBkD,cAAjB,CAAgC,WAAhC,EAA6C,KAAKqF,oBAAlD;AACA,SAAKvI,WAAL,CAAiB2P,cAAjB,CAAgC,KAAKhP,WAArC;AACA,SAAKX,WAAL,CAAiB4P,yBAAjB,CAA2C,KAAKlP,IAAhD;AACA,SAAKV,WAAL,CAAiB6P,WAAjB,CAA6B,KAAKnP,IAAlC;AACD;;AAz1CoC;;gBAA1BZ,I;;gBAAAA,I;;AA41Cb,MAAMmK,OAAO,GAAG,CAACjK,WAAD,EAA0B8C,WAA1B,EAAoD7C,MAApD,EAAmEwF,IAAnE,EAAgF2D,KAAhF,EAA8FlJ,OAAyE,GAAG,EAA1K,KAAiL;AAC/L,QAAMQ,IAAI,GAAI,UAAST,MAAO,EAA9B;AACA,QAAMU,WAAW,GAAI,UAASV,MAAO,IAAGG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBC,MAAM,CAACC,gBAAlC,EAAoDI,QAApD,CAA6D,EAA7D,CAAiE,EAAzG;AACA,QAAMsJ,eAAe,GAAG,OAAOhK,OAAO,CAACgK,eAAf,KAAmC,QAAnC,GAA8ChK,OAAO,CAACgK,eAAtD,GAAwE,IAAhG;AACA,QAAMC,WAAW,GAAG,OAAOjK,OAAO,CAACiK,WAAf,KAA+B,UAA/B,GAA4CjK,OAAO,CAACiK,WAApD,GAAkEhN,YAAtF;AACA,QAAMiN,SAAS,GAAGhK,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBC,MAAM,CAACC,gBAAlC,CAAlB;AACA,SAAO,IAAIuF,OAAJ,CAAY,CAACC,OAAD,EAAUkD,MAAV,KAAqB;AACtC,UAAMlG,OAAO,GAAG,MAAM;AACpBV,MAAAA,YAAY,CAAC+H,OAAD,CAAZ;AACAvH,MAAAA,WAAW,CAACqD,mBAAZ,CAAgC,OAAhC,EAAyCC,WAAzC;AACApG,MAAAA,WAAW,CAAC4P,yBAAZ,CAAsClP,IAAtC;AACAV,MAAAA,WAAW,CAAC2P,cAAZ,CAA2BhP,WAA3B;AACD,KALD;;AAMA,UAAMyF,WAAW,GAAG,MAAM;AACxBpD,MAAAA,OAAO;AACPkG,MAAAA,MAAM,CAAC,IAAIhM,UAAJ,CAAgB,kCAAiCuI,IAAK,oBAAtD,CAAD,CAAN;AACD,KAHD;;AAIA,UAAM4E,OAAO,GAAGvD,UAAU,CAAC,MAAM;AAC/B9D,MAAAA,OAAO;AACPkG,MAAAA,MAAM,CAAC,IAAI7L,mBAAJ,CAAyB,GAAEoI,IAAK,8BAA6ByE,eAAgB,IAA7E,CAAD,CAAN;AACD,KAHyB,EAGvBA,eAHuB,CAA1B;;AAIA,UAAMV,aAAa,GAAIxE,OAAD,IAA+D;AACnF,UAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/B;AACD;;AACD,YAAM;AAAEoF,QAAAA,SAAS,EAAE0F,UAAb;AAAyBrK,QAAAA,IAAI,EAAEsK,YAA/B;AAA6C3G,QAAAA,KAAK,EAAE4G;AAApD,UAAsEhL,OAA5E;;AACA,UAAI+K,YAAY,KAAK/S,QAArB,EAA+B;AAC7B;AACD;;AACD,UAAI8S,UAAU,KAAK1F,SAAnB,EAA8B;AAC5B;AACD;;AACD,YAAM;AAAEG,QAAAA,OAAF;AAAW3E,QAAAA,IAAX;AAAiB4E,QAAAA;AAAjB,UAA0BwF,aAAhC;AACAhN,MAAAA,OAAO;;AACP,UAAIuH,OAAJ,EAAa;AACXvE,QAAAA,OAAO,CAAC;AAAEJ,UAAAA,IAAF;AAAQ4E,UAAAA;AAAR,SAAD,CAAP;AACA;AACD;;AACDtB,MAAAA,MAAM,CAAC,IAAIiB,WAAJ,CAAgBK,IAAhB,EAAsB5E,IAAtB,CAAD,CAAN;AACD,KAlBD;;AAmBA9C,IAAAA,WAAW,CAACuD,gBAAZ,CAA6B,OAA7B,EAAsCD,WAAtC;AACAL,IAAAA,OAAO,CAACsD,GAAR,CAAY,CACVrJ,WAAW,CAAC0J,eAAZ,CAA4B/I,WAA5B,CADU,EAEVX,WAAW,CAACuJ,sBAAZ,CAAmC7I,IAAnC,EAAyC8I,aAAzC,CAFU,CAAZ,EAGGyG,IAHH,CAGQ,MAAM;AACZjQ,MAAAA,WAAW,CAACiK,OAAZ,CAAoBtJ,WAApB,EAAiC;AAAEyJ,QAAAA,SAAF;AAAa3E,QAAAA,IAAb;AAAmB2D,QAAAA;AAAnB,OAAjC;AACD,KALD,EAKGP,KALH,CAKUlE,KAAD,IAAW;AAClB3B,MAAAA,OAAO;AACPkG,MAAAA,MAAM,CAACvE,KAAD,CAAN;AACD,KARD;AASD,GA5CM,CAAP;AA6CD,CAnDD;;AAqDA7E,IAAI,CAAC4P,sBAAL,GAA8B,CAAC1P,WAAD,EAA2B8C,WAA3B,EAAoDpB,IAApD,KAAiF;AAC7G,QAAM;AAAEzB,IAAAA;AAAF,MAAayB,IAAnB;AACA,SAAOuI,OAAO,CAACjK,WAAD,EAAc8C,WAAd,EAA2B7C,MAA3B,EAAmCxD,yBAAnC,EAA8DiF,IAA9D,EAAoE;AAAEyI,IAAAA,WAAW,EAAEpM;AAAf,GAApE,CAAd;AACD,CAHD;;AAKA+B,IAAI,CAACoQ,cAAL,GAAsB,OAAOlQ,WAAP,EAAiCmQ,OAAjC,EAAyDjR,MAAzD,EAAwE4D,WAAxE,EAAkG5C,OAAiB,GAAG,EAAtH,KAA6H;AACjJ,QAAMkQ,IAAI,GAAG,IAAItQ,IAAJ,CAASE,WAAT,EAAsB/C,2BAAtB,EAAmDiC,MAAnD,EAA2D4L,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB7K,OAAlB,EAA2B;AAAEO,IAAAA,oBAAoB,EAAE;AAAxB,GAA3B,CAA3D,CAAb;AACA,MAAIR,MAAM,GAAGkQ,OAAb,CAFiJ,CAE3H;;AACtB,QAAME,QAAQ,GAAGD,IAAI,CAACjR,QAAL,CAAcyB,QAAd,CAAuB,EAAvB,CAAjB;AACA,QAAMC,MAAM,GAAGX,OAAO,CAACW,MAAR,IAAkBb,WAAW,CAACa,MAA7C;AACA,QAAMyP,gBAAgB,GAAG,MAAM,IAAIvK,OAAJ,CAAY,CAACC,OAAD,EAAUkD,MAAV,KAAqB;AAC9D,UAAMhC,aAAa,GAAG,MAAM;AAC1BkJ,MAAAA,IAAI,CAAC1O,IAAL,CAAU7B,GAAV,CAAcwQ,QAAd,EAAwBpQ,MAAxB;AACD,KAFD;;AAGA,UAAMgG,aAAa,GAAG,CAAC;AAAE9G,MAAAA,QAAF;AAAYJ,MAAAA;AAAZ,KAAD,KAAqC;AACzD,YAAMW,MAAM,GAAG0Q,IAAI,CAAC3Q,SAAL,CAAeG,GAAf,CAAmBb,UAAnB,CAAf;;AACA,UAAI,OAAOW,MAAP,KAAkB,WAAtB,EAAmC;AACjC;AACD;;AACD,YAAM;AAAEN,QAAAA;AAAF,UAAgBM,MAAtB;;AACA,UAAI,OAAON,SAAP,KAAqB,QAAzB,EAAmC;AACjC;AACD;;AACD,UAAID,QAAQ,GAAGiR,IAAI,CAACjR,QAApB,EAA8B;AAC5BiR,QAAAA,IAAI,CAAClO,WAAL,CAAiB9C,SAAjB,EAA4ByJ,KAA5B,CAAmClE,KAAD,IAAW;AAC3C9D,UAAAA,MAAM,CAAC8D,KAAP,CAAa,iDAAb;AACA9D,UAAAA,MAAM,CAACoG,UAAP,CAAkBtC,KAAlB;AACD,SAHD;AAID;AACF,KAfD;;AAgBA,UAAM0J,iBAAiB,GAAG,CAAC;AAAElP,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAD,KAAoC;AAC5D,UAAI,OAAOA,SAAP,KAAqB,QAArB,IAAiCgR,IAAI,CAAChR,SAAL,KAAmBA,SAAxD,EAAmE;AACjE;AACD;;AACD,UAAI,CAACgR,IAAI,CAACpP,OAAL,CAAawC,GAAb,CAAiBrE,QAAjB,CAAL,EAAiC;AAC/B;AACD;;AACD,UAAI,OAAOC,SAAP,KAAqB,QAAzB,EAAmC;AACjC;AACD;;AACD,UAAID,QAAQ,GAAGiR,IAAI,CAACjR,QAApB,EAA8B;AAC5BiR,QAAAA,IAAI,CAAClO,WAAL,CAAiB9C,SAAjB,EAA4ByJ,KAA5B,CAAmClE,KAAD,IAAW;AAC3C9D,UAAAA,MAAM,CAAC8D,KAAP,CAAa,iDAAb;AACA9D,UAAAA,MAAM,CAACoG,UAAP,CAAkBtC,KAAlB;AACD,SAHD;AAID;AACF,KAhBD;;AAiBA,UAAM4L,SAAS,GAAG,CAAClJ,GAAD,EAAamJ,YAAb,KAA6C;AAC7D,UAAInJ,GAAG,KAAKgJ,QAAZ,EAAsB;AACpB;AACD;;AACD,YAAMlR,QAAQ,GAAGsR,QAAQ,CAACpJ,GAAD,EAAM,EAAN,CAAzB;;AACA,UAAI,CAAC+I,IAAI,CAACpP,OAAL,CAAawC,GAAb,CAAiBrE,QAAjB,CAAL,EAAiC;AAC/B;AACD;;AACD,UAAIc,MAAM,KAAK,KAAX,IAAoBuQ,YAAY,KAAK,KAArC,IAA8CrR,QAAQ,GAAGiR,IAAI,CAACjR,QAAlE,EAA4E;AAC1Ec,QAAAA,MAAM,GAAG6N,UAAU,CAACC,MAAX,CAAkBC,UAAlB,EAAT,CAD0E,CACjC;;AACzCoC,QAAAA,IAAI,CAAC1O,IAAL,CAAU7B,GAAV,CAAcwQ,QAAd,EAAwBpQ,MAAxB;AACA;AACD,OAJD,MAIO,IAAI,OAAOA,MAAP,KAAkB,QAAlB,IAA8B,OAAOuQ,YAAP,KAAwB,QAAtD,IAAkEvQ,MAAM,KAAKuQ,YAA7E,IAA6FrR,QAAQ,GAAGiR,IAAI,CAACjR,QAAjH,EAA2H;AAChIc,QAAAA,MAAM,GAAGuQ,YAAT;AACAJ,QAAAA,IAAI,CAAC1O,IAAL,CAAU7B,GAAV,CAAcwQ,QAAd,EAAwBG,YAAxB;AACD,OAHM,MAGA,IAAIvQ,MAAM,KAAK,KAAX,IAAoB,OAAOuQ,YAAP,KAAwB,QAAhD,EAA0D;AAC/DvQ,QAAAA,MAAM,GAAGuQ,YAAT;AACAJ,QAAAA,IAAI,CAAC1O,IAAL,CAAU7B,GAAV,CAAcwQ,QAAd,EAAwBG,YAAxB;AACD,OAHM,MAGA,IAAI,OAAOvQ,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,KAAKuQ,YAA7C,EAA2D;AAChE;AACD;;AACD1N,MAAAA,WAAW,CAACqD,mBAAZ,CAAgC,OAAhC,EAAyCC,WAAzC;AACAgK,MAAAA,IAAI,CAAClN,cAAL,CAAoB,OAApB,EAA6B4F,WAA7B;AACAsH,MAAAA,IAAI,CAAClN,cAAL,CAAoB,SAApB,EAA+B+C,aAA/B;AACAmK,MAAAA,IAAI,CAAClN,cAAL,CAAoB,aAApB,EAAmCmL,iBAAnC;AACA+B,MAAAA,IAAI,CAAClN,cAAL,CAAoB,SAApB,EAA+BgE,aAA/B;AACAkJ,MAAAA,IAAI,CAAC1O,IAAL,CAAUwB,cAAV,CAAyB,KAAzB,EAAgCqN,SAAhC;AACAvK,MAAAA,OAAO,CAAC/F,MAAD,CAAP;AACD,KA5BD;;AA6BA,UAAM6I,WAAW,GAAG,MAAM;AACxBhG,MAAAA,WAAW,CAACqD,mBAAZ,CAAgC,OAAhC,EAAyCC,WAAzC;AACAgK,MAAAA,IAAI,CAAClN,cAAL,CAAoB,OAApB,EAA6B4F,WAA7B;AACAsH,MAAAA,IAAI,CAAClN,cAAL,CAAoB,SAApB,EAA+B+C,aAA/B;AACAmK,MAAAA,IAAI,CAAClN,cAAL,CAAoB,aAApB,EAAmCmL,iBAAnC;AACA+B,MAAAA,IAAI,CAAClN,cAAL,CAAoB,SAApB,EAA+BgE,aAA/B;AACAkJ,MAAAA,IAAI,CAAC1O,IAAL,CAAUwB,cAAV,CAAyB,KAAzB,EAAgCqN,SAAhC;AACArH,MAAAA,MAAM,CAAC,IAAIxL,iBAAJ,CAAsB,mDAAtB,CAAD,CAAN;AACD,KARD;;AASA,UAAM0I,WAAW,GAAG,YAAY;AAC9BtD,MAAAA,WAAW,CAACqD,mBAAZ,CAAgC,OAAhC,EAAyCC,WAAzC;AACAgK,MAAAA,IAAI,CAAClN,cAAL,CAAoB,OAApB,EAA6B4F,WAA7B;AACAsH,MAAAA,IAAI,CAAClN,cAAL,CAAoB,SAApB,EAA+B+C,aAA/B;AACAmK,MAAAA,IAAI,CAAClN,cAAL,CAAoB,aAApB,EAAmCmL,iBAAnC;AACA+B,MAAAA,IAAI,CAAClN,cAAL,CAAoB,SAApB,EAA+BgE,aAA/B;AACAkJ,MAAAA,IAAI,CAAC1O,IAAL,CAAUwB,cAAV,CAAyB,KAAzB,EAAgCqN,SAAhC;;AACA,UAAI;AACF,cAAM7M,KAAK,GAAG0M,IAAI,CAAClP,QAAL,CAActB,GAAd,CAAkBlD,aAAlB,CAAd;;AACA,YAAI,OAAOgH,KAAP,KAAiB,WAArB,EAAkC;AAChC,gBAAMA,KAAK,CAAC4J,MAAN,EAAN;AACD;;AACD,cAAM8C,IAAI,CAAC9H,KAAL,EAAN;AACD,OAND,CAME,OAAO3D,KAAP,EAAc;AACd9D,QAAAA,MAAM,CAAC8D,KAAP,CAAa,6CAAb;AACA9D,QAAAA,MAAM,CAACoG,UAAP,CAAkBtC,KAAlB;AACD;;AACDuE,MAAAA,MAAM,CAAC,IAAIhM,UAAJ,CAAe,iCAAf,CAAD,CAAN;AACD,KAlBD;;AAmBA4F,IAAAA,WAAW,CAACuD,gBAAZ,CAA6B,OAA7B,EAAsCD,WAAtC;AACAgK,IAAAA,IAAI,CAAC1O,IAAL,CAAUmE,WAAV,CAAsB,KAAtB,EAA6B0K,SAA7B;AACAH,IAAAA,IAAI,CAACvK,WAAL,CAAiB,OAAjB,EAA0BiD,WAA1B;AACAsH,IAAAA,IAAI,CAACvK,WAAL,CAAiB,SAAjB,EAA4BI,aAA5B;AACAmK,IAAAA,IAAI,CAACvK,WAAL,CAAiB,aAAjB,EAAgCwI,iBAAhC;AACA+B,IAAAA,IAAI,CAACvK,WAAL,CAAiB,SAAjB,EAA4BqB,aAA5B;AACAkJ,IAAAA,IAAI,CAACxH,YAAL,CAAkBkF,UAAU,CAACC,MAAX,CAAkBC,UAAlB,EAAlB,EApG8D,CAoGX;AACpD,GArG8B,CAA/B;AAsGA,QAAMoC,IAAI,CAAC9H,KAAL,EAAN;AACA,SAAOgI,gBAAP;AACD,CA7GD","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport ObservedRemoveMap from 'observed-remove/dist/map';\nimport type BraidClient from '@bunchtogether/braid-client';\nimport SimplePeer from 'simple-peer';\nimport PQueue from 'p-queue';\nimport {\n  pack,\n  unpack,\n} from 'msgpackr';\nimport {\n  SIGNAL,\n  START_SESSION,\n  LEAVE_SESSION,\n  JOIN_SESSION,\n  INVITE_TO_SESSION,\n  DECLINE_INVITE_TO_SESSION,\n  SESSION_QUEUE,\n  ABORT_SESSION_JOIN_REQUEST,\n  SESSION_JOIN_REQUEST,\n  SESSION_JOIN_RESPONSE,\n  REMOVE_FROM_SESSION,\n  CANCEL_INVITE_TO_SESSION,\n  RESPONSE,\n  AUTOMATIC_DISCOVERY_ROOM_ID,\n} from './constants';\nimport {\n  AbortError,\n  RequestError,\n  StartSessionError,\n  RequestTimeoutError,\n  JoinSessionError,\n  LeaveSessionError,\n  SignalError,\n  SessionJoinResponseError,\n  ClientClosedError,\n  InviteToSessionError,\n  InvitationDeclinedError,\n  InvitedUserLeftError,\n  InvitationTimeoutError,\n  DeclineInviteToSessionError,\n  RemoveFromSessionError,\n  CancelInviteToSessionError,\n  InvitationCancelledError,\n  AbortSessionJoinError,\n} from './errors';\nimport {\n  Ping,\n  Pong,\n  ObservedRemoveDump,\n  PeerEvent,\n  Close,\n  MultipartContainer,\n} from './messagepack';\n\ntype Logger = {\n  debug: (string | number, ...any) => void,\n  info: (string | number, ...any) => void,\n  warn: (string | number, ...any) => void,\n  error: (string | number, ...any) => void,\n  errorStack: (error:Error | MediaError) => void,\n};\n\ntype Options = {\n  peerOptions?: Object,\n  logger?: Logger,\n  sessionId?: string,\n  localConnectionsOnly?: boolean\n}\n\nexport type SessionJoinHandler = ({ sessionId: string, userId: string, abortSignal: AbortSignal }) => [boolean, number, string] | Promise<[boolean, number, string]>;\nexport type Connection = [number, number, string, number, string | false];\nexport type Socket = { socketHash: string, socketId: number, serverId: number, userId: string, clientId: number, sessionId: string | false };\n\nconst getSocketMap = (values?:Array<Connection>):Map<string, Socket> => {\n  if (typeof values === 'undefined') {\n    return new Map();\n  }\n  return new Map(values.map((x) => {\n    const socketHash = `${x[0]}:${x[1]}`;\n    return [socketHash, { socketHash, socketId: x[0], serverId: x[1], userId: x[2], clientId: x[3], sessionId: x[4] }];\n  }));\n};\n\nconst getSessionId = (values?:Array<Connection>, clientId:number):(string | false) => {\n  if (typeof values === 'undefined') {\n    return false;\n  }\n  for (const x of values) {\n    if (x[3] === clientId) {\n      return x[4] || false;\n    }\n  }\n  return false;\n};\n\nconst getPeerIds = (values?:Array<Connection>):Set<string> => {\n  if (typeof values === 'undefined') {\n    return new Set();\n  }\n  return new Set(values.map((x) => x[2]));\n};\n\nconst getSessionMap = (socketMap:Map<string, Socket>):Map<string | false, Map<number, Socket>> => {\n  const map = new Map();\n  for (const socket of socketMap.values()) {\n    const { clientId, sessionId } = socket;\n    const sessionClientMap = map.get(sessionId);\n    if (typeof sessionClientMap === 'undefined') {\n      map.set(sessionId, new Map([[clientId, socket]]));\n    } else {\n      sessionClientMap.set(clientId, socket);\n    }\n  }\n  return map;\n};\n\nexport class Bond extends EventEmitter {\n  static declineInviteToSession: (BraidClient, AbortSignal, { roomId: string, userId: string, clientId: number, sessionId: string, data: Object }) => Promise<{ code:number, text:string }>;\n  static getLocalRoomId: (BraidClient, string | false, string, AbortSignal, Options) => Promise<string>;\n\n  declare roomId: string;\n  declare clientId: number;\n  declare userId: string;\n  declare name: string;\n  declare publishName: string;\n  declare braidClient: BraidClient;\n  declare logger: Logger;\n  declare _ready: Promise<void>;\n  declare ready: Promise<void>;\n  declare socketMap: Map<string, Socket>;\n  declare sessionMap: Map<string | false, Map<number, Socket>>;\n  declare userIds: Set<string>;\n  declare peerOptions: void | Object;\n  declare peerMap: Map<number, SimplePeer>;\n  declare peerReconnectMap: Map<number, number>;\n  declare queueMap: Map<string | number, PQueue>;\n  declare handleSocketJoin: (Socket) => void;\n  declare handleSocketLeave: (Socket) => void;\n  declare handleSessionClientLeave: () => void;\n  declare handleSessionClientJoin: (number) => Promise<void>;\n  declare handleSession: () => void;\n  declare handleBraidSet: (string, any) => void;\n  declare handleBraidClose: () => void;\n  declare handleBraidCloseRequested: () => void;\n  declare handleBraidReconnect: (boolean) => void;\n  declare handlePeerData: (Buffer) => void;\n  declare signalQueueMap: Map<number, Array<[string, Object]>>;\n  declare requestCallbackMap: Map<number, (boolean, number, string) => void | Promise<void>>;\n  declare inviteDeclineHandlerMap: Map<string, () => Promise<void>>;\n  declare sessionId: false | string;\n  declare startedSessionId: void | string;\n  declare joinedSessionId: void | string;\n  declare active: boolean;\n  declare peerDisconnectTimeoutMap: Map<number, TimeoutID>;\n  declare sessionJoinHandlerMap: Map<string, SessionJoinHandler>;\n  declare sessionJoinRequestMap: Map<string, [Promise<void>, AbortController]>;\n  declare data: ObservedRemoveMap<string | number, any>;\n  declare sessionClientOffsetMap: Map<number, number>;\n  declare leaveSessionAfterLastClientTimeout: void | TimeoutID;\n  declare preApprovedSessionUserIdSet: Set<string>;\n  declare peerAddTrackHandlerMap: Map<Object, (Event) => void>;\n  declare localConnectionsOnly: boolean;\n\n  constructor(braidClient: BraidClient, roomId:string, userId:string, options?: Options = {}) {\n    super();\n    this.active = true;\n    this.clientId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    this.userId = userId;\n    this.roomId = roomId;\n    this.sessionId = false;\n    this.localConnectionsOnly = !!options.localConnectionsOnly;\n    const name = `signal/${this.roomId}`;\n    this.name = name;\n    this.publishName = `signal/${this.roomId}/${this.clientId.toString(36)}`;\n    this.braidClient = braidClient;\n    this.logger = options.logger || braidClient.logger;\n    this.peerOptions = options.peerOptions;\n    this.socketMap = new Map();\n    this.userIds = new Set();\n    this.peerMap = new Map();\n    this.peerReconnectMap = new Map();\n    this.queueMap = new Map();\n    this.sessionMap = new Map();\n    this.inviteDeclineHandlerMap = new Map();\n    this.requestCallbackMap = new Map();\n    this.signalQueueMap = new Map();\n    this.peerDisconnectTimeoutMap = new Map();\n    this.sessionJoinHandlerMap = new Map();\n    this.sessionJoinRequestMap = new Map();\n    this.data = new ObservedRemoveMap([], { bufferPublishing: 0 });\n    this.sessionClientOffsetMap = new Map();\n    this.preApprovedSessionUserIdSet = new Set();\n    this.peerAddTrackHandlerMap = new Map();\n\n\n    this._ready = this.init(); // eslint-disable-line no-underscore-dangle\n\n    if (typeof options.sessionId === 'string') {\n      this.ready = this.joinSession(options.sessionId);\n    } else {\n      this.ready = this._ready; // eslint-disable-line no-underscore-dangle\n    }\n\n    this.handleSessionClientJoin = async (clientId:number) => {\n      const sessionClientIds = this.sessionClientIds;\n      if (sessionClientIds.size > 1) {\n        clearTimeout(this.leaveSessionAfterLastClientTimeout);\n      }\n      let interval;\n      let _peer; // eslint-disable-line no-underscore-dangle\n      let offset = 0;\n      let peerIsClosing = false;\n      const abortController = new AbortController();\n      const abortSignal = abortController.signal;\n      const cleanup = () => {\n        abortController.abort();\n        this.removeListener('sessionClientLeave', handleSessionClientLeave);\n        if (typeof _peer !== 'undefined') {\n          _peer.removeListener('close', handlePeerClose);\n          _peer.removeListener('data', handlePeerData);\n        }\n        this.data.removeListener('publish', handleDataPublish);\n        clearInterval(interval);\n      };\n      const handlePeerClose = () => {\n        cleanup();\n        if (!peerIsClosing && this.active && this.sessionClientIds.has(clientId)) {\n          this.handleSessionClientJoin(clientId);\n        }\n      };\n      const handleSessionClientLeave = (oldClientId:number) => {\n        if (clientId !== oldClientId) {\n          return;\n        }\n        cleanup();\n      };\n      const handleDataPublish = (queue:[Array<*>, Array<*>]) => {\n        sendToPeer(new ObservedRemoveDump(queue));\n      };\n      const sendToPeer = (unpacked: any) => {\n        if (typeof peer === 'undefined') {\n          throw new Error('Peer does not exist');\n        }\n        if (!peer.connected) {\n          this.logger.warn(`Unable to send message to client ${clientId}, connection is closing`);\n          return;\n        }\n        peer.send(pack(unpacked));\n      };\n\n      const mergeChunkPromises = new Map();\n\n      const handleMultipartContainer = async (multipartContainer:MultipartContainer) => {\n        const existingMergeChunksPromise = mergeChunkPromises.get(multipartContainer.id);\n        if (typeof existingMergeChunksPromise !== 'undefined') {\n          existingMergeChunksPromise.push(multipartContainer);\n          return;\n        }\n        const mergeChunksPromise = MultipartContainer.getMergeChunksPromise(60000);\n        mergeChunksPromise.push(multipartContainer);\n        mergeChunkPromises.set(multipartContainer.id, mergeChunksPromise);\n        try {\n          const packed = await mergeChunksPromise;\n          handlePeerData(packed);\n        } catch (error) {\n          if (error.stack) {\n            this.logger.error('Unable to merge multipart message chunks:');\n            error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n          } else {\n            this.logger.error(`Unable to merge multipart message chunks: ${error.message}`);\n          }\n        } finally {\n          mergeChunkPromises.delete(multipartContainer.id);\n        }\n      };\n\n      const handlePeerData = (packed:Buffer) => {\n        const message = unpack(packed);\n        if (message instanceof Ping) {\n          sendToPeer(new Pong(message.timestamp, Date.now()));\n        } else if (message instanceof Pong) {\n          offset = (Date.now() - message.wallclock) - (performance.now() - message.timestamp) / 2;\n          this.sessionClientOffsetMap.set(clientId, offset);\n        } else if (message instanceof ObservedRemoveDump) {\n          this.data.process(message.queue);\n        } else if (message instanceof PeerEvent) {\n          this.emit(message.type, ...message.args);\n        } else if (message instanceof Close) {\n          this.logger.info(`Client ${clientId} closing with code ${message.code}: ${message.message}`);\n          this.peerMap.delete(clientId);\n          peerIsClosing = true;\n        } else if (message instanceof MultipartContainer) {\n          handleMultipartContainer(message);\n        }\n      };\n\n      this.addListener('sessionClientLeave', handleSessionClientLeave);\n      if (!this.isConnectedToClient(clientId)) {\n        await new Promise((resolve) => {\n          const handleConnect = ({ clientId: newClientId }) => {\n            if (newClientId !== clientId) {\n              return;\n            }\n            this.removeListener('connect', handleConnect);\n            abortSignal.removeEventListener('abort', handleAbort);\n            resolve();\n          };\n          const handleAbort = () => {\n            this.removeListener('connect', handleConnect);\n            abortSignal.removeEventListener('abort', handleAbort);\n            resolve();\n          };\n          this.addListener('connect', handleConnect);\n          abortSignal.addEventListener('abort', handleAbort);\n        });\n        if (abortSignal.aborted) {\n          return;\n        }\n      }\n      const peer = this.peerMap.get(clientId);\n      _peer = peer;\n      if (typeof peer === 'undefined') {\n        throw new Error('Peer does not exist');\n      }\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('data', handlePeerData);\n      interval = setInterval(() => {\n        peer.send(pack(new Ping(performance.now())));\n      }, 1000);\n      peer.send(pack(new Ping(performance.now())));\n      this.data.addListener('publish', handleDataPublish);\n      handleDataPublish(this.data.dump());\n    };\n\n    this.handleSocketJoin = (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (clientId === this.clientId) {\n        return;\n      }\n      if (this.peerDisconnectTimeoutMap.has(clientId)) {\n        this.logger.info(`Clearing client ${clientId} disconnect timeout after socket join`);\n        clearTimeout(this.peerDisconnectTimeoutMap.get(clientId));\n        this.peerDisconnectTimeoutMap.delete(clientId);\n      }\n      this.addToQueue(clientId, () => this.connectToPeer(socketData));\n    };\n\n\n    this.handleSocketLeave = (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (clientId === this.clientId) {\n        return;\n      }\n      clearTimeout(this.peerDisconnectTimeoutMap.get(clientId));\n      if (this.active) {\n        this.peerDisconnectTimeoutMap.set(clientId, setTimeout(() => {\n          this.peerDisconnectTimeoutMap.delete(clientId);\n          this.addToQueue(clientId, () => this.disconnectFromPeer(clientId));\n        }, 15000));\n      } else {\n        this.addToQueue(clientId, () => this.disconnectFromPeer(clientId));\n      }\n    };\n\n    this.handleSessionClientLeave = () => {\n      const sessionClientIds = this.sessionClientIds;\n      if (sessionClientIds.size > 1) {\n        return;\n      }\n      this.leaveSessionAfterLastClientTimeout = setTimeout(async () => {\n        try {\n          await this.leaveSession();\n        } catch (error) {\n          this.logger.error('Unable to leave session after timeout when last session closed');\n          this.logger.errorStack(error);\n        }\n      }, 5000);\n    };\n\n    this.handleSession = () => {\n      this.data.clear();\n      this.sessionClientOffsetMap.clear();\n    };\n\n    this.addListener('socketJoin', this.handleSocketJoin);\n    this.addListener('socketLeave', this.handleSocketLeave);\n    this.addListener('sessionClientJoin', this.handleSessionClientJoin);\n    this.addListener('sessionClientLeave', this.handleSessionClientLeave);\n    this.addListener('session', this.handleSession);\n\n    this.handleBraidSet = (key:string, values:Array<Connection>) => {\n      if (key !== name) {\n        return;\n      }\n      this.active = true;\n      const oldSessionId = this.sessionId;\n      const newSessionId = getSessionId(values, this.clientId);\n      const oldSocketMap = this.socketMap;\n      const newSocketMap = getSocketMap(values);\n      const oldUserIds = this.userIds;\n      const newUserIds = getPeerIds(values);\n      const oldSessionMap = this.sessionMap;\n      const newSessionMap = getSessionMap(newSocketMap);\n      const oldLocalSessionSocketMap = typeof oldSessionId === 'string' ? oldSessionMap.get(oldSessionId) || new Map() : new Map();\n      const newLocalSessionSocketMap = typeof newSessionId === 'string' ? newSessionMap.get(newSessionId) || new Map() : new Map();\n      this.sessionId = newSessionId;\n      this.userIds = newUserIds;\n      this.socketMap = newSocketMap;\n      this.sessionMap = newSessionMap;\n      if (newSessionId !== oldSessionId) {\n        this.emit('session', newSessionId);\n      }\n      for (const [socketHash, socketData] of oldSocketMap) {\n        if (!newSocketMap.has(socketHash)) {\n          this.emit('socketLeave', socketData);\n        }\n      }\n      for (const [socketHash, socketData] of newSocketMap) {\n        if (!oldSocketMap.has(socketHash)) {\n          this.emit('socketJoin', socketData);\n        }\n      }\n      for (const peerUserId of oldUserIds) {\n        if (!newUserIds.has(peerUserId)) {\n          this.emit('leave', peerUserId);\n        }\n      }\n      for (const peerUserId of newUserIds) {\n        if (!oldUserIds.has(peerUserId)) {\n          this.emit('join', peerUserId);\n        }\n      }\n      for (const [clientId, socketData] of oldLocalSessionSocketMap) {\n        if (clientId === this.clientId) {\n          continue;\n        }\n        if (!newLocalSessionSocketMap.has(clientId)) {\n          this.emit('sessionClientLeave', clientId, socketData);\n        }\n      }\n      for (const [clientId, socketData] of newLocalSessionSocketMap) {\n        if (clientId === this.clientId) {\n          continue;\n        }\n        if (!oldLocalSessionSocketMap.has(clientId)) {\n          this.emit('sessionClientJoin', clientId, socketData);\n        }\n      }\n      for (const [sessionId, oldSessionSocketMap] of oldSessionMap) {\n        const newSessionSocketMap = newSessionMap.get(sessionId);\n        if (typeof newSessionSocketMap === 'undefined') {\n          for (const socketData of oldSessionSocketMap.values()) {\n            this.emit('sessionLeave', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of oldSessionSocketMap) {\n            if (!newSessionSocketMap.has(socketHash)) {\n              this.emit('sessionLeave', socketData);\n            }\n          }\n        }\n      }\n      for (const [sessionId, newSessionSocketMap] of newSessionMap) {\n        const oldSessionSocketMap = oldSessionMap.get(sessionId);\n        if (typeof oldSessionSocketMap === 'undefined') {\n          for (const socketData of newSessionSocketMap.values()) {\n            this.emit('sessionJoin', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of newSessionSocketMap) {\n            if (!oldSessionSocketMap.has(socketHash)) {\n              this.emit('sessionJoin', socketData);\n            }\n          }\n        }\n      }\n    };\n    this.handleBraidClose = () => {\n      this.reset();\n    };\n    this.handleBraidCloseRequested = () => {\n      this.close();\n    };\n    this.handleBraidReconnect = (isReconnecting: boolean) => {\n      if (!isReconnecting) {\n        return;\n      }\n      const startedSessionId = this.startedSessionId;\n      const joinedSessionId = this.joinedSessionId;\n      const handleInitialized = () => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.info(`Restarting session ${startedSessionId}`);\n          this.startSession(startedSessionId).catch((error) => {\n            this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        if (typeof joinedSessionId === 'string') {\n          this.logger.info(`Rejoining session ${joinedSessionId}`);\n          this.joinSession(joinedSessionId).catch((error) => {\n            this.logger.error(`Unable to rejoin session ${joinedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleClose = () => {\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleError = (error:Error) => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n          this.logger.errorStack(error);\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      this.braidClient.addListener('initialized', handleInitialized);\n      this.braidClient.addListener('close', handleClose);\n      this.braidClient.addListener('error', handleError);\n    };\n    this.braidClient.data.addListener('set', this.handleBraidSet);\n    this.braidClient.addListener('close', this.handleBraidClose);\n    this.braidClient.addListener('closeRequested', this.handleBraidCloseRequested);\n    this.braidClient.addListener('reconnect', this.handleBraidReconnect);\n  }\n\n  get sessionClientMap():Map<number, Socket> {\n    const sessionId = this.sessionId;\n    if (typeof sessionId !== 'string') {\n      return new Map();\n    }\n    const sessionClientMap = this.sessionMap.get(sessionId);\n    if (typeof sessionClientMap === 'undefined') {\n      return new Map();\n    }\n    return sessionClientMap;\n  }\n\n  get sessionClientIds():Set<number> {\n    return new Set(this.sessionClientMap.keys());\n  }\n\n  async init() {\n    const promise = new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(new Error('Closed before initialization completed'));\n      };\n      const handleValue = (key:string, value:any) => {\n        if (key !== this.name) {\n          return;\n        }\n        if (typeof value === 'undefined') {\n          return;\n        }\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(error);\n      };\n      this.addListener('close', handleClose);\n      this.braidClient.data.addListener('set', handleValue);\n      this.braidClient.addListener('error', handleError);\n      handleValue(this.name, this.braidClient.data.get(this.name));\n    });\n    try {\n      await Promise.all([\n        this.braidClient.subscribe(this.name),\n        this.braidClient.addServerEventListener(this.name, this.handleMessage.bind(this)),\n      ]);\n      if (!this.active) {\n        return;\n      }\n      await promise;\n      if (!this.active) {\n        return;\n      }\n      await this.braidClient.startPublishing(this.publishName);\n    } catch (error) {\n      this.braidClient.logger.error(`Unable to join ${this.roomId}`);\n      throw error;\n    }\n  }\n\n  addToQueue(queueId:string | number, func:() => Promise<*>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      return queue.add(func);\n    }\n    const newQueue = new PQueue({ concurrency: 1 });\n    const promise = newQueue.add(func);\n    this.queueMap.set(queueId, newQueue);\n    newQueue.on('idle', () => {\n      this.queueMap.delete(queueId);\n    });\n    return promise;\n  }\n\n  async publish(type:string, value:Object, options?: { timeoutDuration?: number, CustomError?: Class<RequestError> } = {}):Promise<{ text:string, code:number }> {\n    await this._ready; // eslint-disable-line no-underscore-dangle\n    const timeoutDuration = typeof options.timeoutDuration === 'number' ? options.timeoutDuration : 5000;\n    const CustomError = typeof options.CustomError === 'function' ? options.CustomError : RequestError;\n    const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    return new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        reject(new ClientClosedError(`Client closed before ${type} request completed`));\n      };\n      const timeout = setTimeout(() => {\n        this.requestCallbackMap.delete(requestId);\n        this.removeListener('close', handleClose);\n        reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n      }, timeoutDuration);\n      const handleResponse = (success:boolean, code: number, text:string) => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        if (success) {\n          resolve({ code, text });\n          return;\n        }\n        reject(new CustomError(text, code));\n      };\n      this.addListener('close', handleClose);\n      this.requestCallbackMap.set(requestId, handleResponse);\n      this.braidClient.publish(this.publishName, { requestId, type, value });\n    });\n  }\n\n  isConnectedToClient(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return false;\n    }\n    return !!peer.connected;\n  }\n\n  async connectToPeer(socket:Socket) {\n    const { userId, serverId, socketId, clientId, socketHash } = socket;\n    const reconnectCount = this.peerReconnectMap.get(clientId) || 0;\n    const reconnectDelay = reconnectCount > 5 ? 30000 : 1000 * (reconnectCount * reconnectCount);\n    if (reconnectDelay > 0) {\n      this.logger.info(`Delaying connect by ${Math.round(reconnectDelay / 1000)} ${reconnectDelay === 1000 ? 'second' : 'seconds'} on attempt ${reconnectCount}`);\n      await new Promise((resolve) => {\n        const timeout = setTimeout(() => {\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        }, reconnectDelay);\n        const handleClose = () => {\n          clearTimeout(timeout);\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        };\n        const handleSocketLeave = ({ socketHash: oldSocketHash }:Socket) => {\n          if (socketHash !== oldSocketHash) {\n            return;\n          }\n          clearTimeout(timeout);\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        };\n        this.addListener('close', handleClose);\n        this.addListener('socketLeave', handleSocketLeave);\n      });\n      if (!this.socketMap.has(socketHash)) {\n        return;\n      }\n    }\n    const existingPeer = this.peerMap.get(clientId);\n    const options = Object.assign({}, { initiator: clientId > this.clientId }, this.peerOptions);\n    if (this.localConnectionsOnly) {\n      options.config = {\n        iceServers: [],\n      };\n    }\n    const peer = existingPeer || new SimplePeer(options);\n    this.peerMap.set(clientId, peer);\n    this.peerReconnectMap.set(clientId, reconnectCount + 1);\n    this.emit('peer', { clientId, peer });\n    const addPeerListeners = () => {\n      this.peerReconnectMap.set(clientId, 0);\n      const cleanup = () => {\n        peer.removeListener('signal', handleSignal);\n        peer.removeListener('stream', handleStream);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('peerReconnect', handlePeerReconnect);\n      };\n      const handleSignal = async (data:Object) => {\n        try {\n          await this.publish(SIGNAL, { serverId, socketId, data }, { CustomError: SignalError });\n        } catch (error) {\n          this.logger.error(`Unable to signal user ${userId} client ${clientId} closed`);\n          this.logger.errorStack(error);\n        }\n      };\n      const handleStream = (stream:MediaStream) => {\n        if (!this.sessionClientIds.has(clientId)) {\n          this.logger.error(`Received an unexpected stream from non-session user ${userId} client ${clientId}`);\n          stream.getTracks().forEach((track) => {\n            track.stop();\n            track.dispatchEvent(new Event('stop'));\n          });\n          return;\n        }\n        this.emit('stream', { stream, userId, serverId, socketId, clientId });\n      };\n      const handlePeerClose = () => {\n        this.logger.info(`Disconnected from user ${userId} client ${clientId}`);\n        cleanup();\n        this.emit('disconnect', { userId, serverId, socketId, clientId });\n        if (this.active && this.peerMap.has(clientId)) {\n          this.peerMap.delete(clientId);\n          this.connectToPeer(socket);\n          this.logger.warn(`Reconnecting to user ${userId} client ${clientId}`);\n        }\n      };\n      const handlePeerError = (error:Error) => {\n        this.logger.error(`Error in connection to user ${userId} client ${clientId}`);\n        this.logger.errorStack(error);\n        this.emit('peerError', { userId, serverId, socketId, clientId, error });\n      };\n      const handlePeerReconnect = () => {\n        this.logger.info(`Reconnected to user ${userId} client ${clientId}`);\n        cleanup();\n      };\n      peer.addListener('signal', handleSignal);\n      peer.addListener('stream', handleStream);\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('error', handlePeerError);\n      peer.addListener('peerReconnect', handlePeerReconnect);\n    };\n    if (peer.connected) {\n      peer.emit('peerReconnect');\n      addPeerListeners();\n      this.emit('connect', { userId, clientId, serverId, socketId, socketHash, peer });\n      return;\n    }\n    await new Promise((resolve) => {\n      const cleanup = () => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n      };\n      const timeout = setTimeout(() => {\n        cleanup();\n        resolve();\n      }, 5000);\n      const handleConnect = () => {\n        cleanup();\n        addPeerListeners();\n        this.emit('connect', { userId, clientId, serverId, socketId, socketHash, peer });\n        resolve();\n      };\n      const handleSignal = async (data:Object) => {\n        if (this.localConnectionsOnly) {\n          if (data.type === 'candidate') {\n            const { candidate: { candidate } } = data;\n            const addressParts = candidate.split(' ');\n            if (addressParts[4] !== '127.0.0.1' && addressParts[4] !== '::1') {\n              addressParts[4] = '127.0.0.1';\n              data.candidate.candidate = addressParts.join(' '); // eslint-disable-line no-param-reassign\n            }\n          } else if (data.type === 'answer' || data.type === 'offer') {\n            data.sdp = data.sdp.replace(/(a=candidate[^\\s]+?\\s[^\\s]+?\\s[^\\s]+?\\s[^\\s]+?\\s)([^\\s]+?\\s)(.*?\\r?\\n)/g, '$1127.0.0.1 $3'); // eslint-disable-line no-param-reassign\n          }\n        }\n        try {\n          await this.publish(SIGNAL, { serverId, socketId, data }, { CustomError: SignalError });\n        } catch (error) {\n          if (error instanceof SignalError && error.code === 404) {\n            this.logger.error(`Unable to signal user ${userId}, client ${clientId}, client does not exist`);\n            cleanup();\n            resolve();\n          } else {\n            this.logger.error(`Unable to signal user ${userId}, client ${clientId}`);\n            this.logger.errorStack(error);\n          }\n        }\n      };\n      const handleClose = () => {\n        cleanup();\n        resolve();\n      };\n      const handlePeerClose = () => {\n        this.logger.info(`Connection to user ${userId} client ${clientId} closed`);\n        cleanup();\n        if (this.peerMap.has(clientId)) {\n          this.peerMap.delete(clientId);\n          this.connectToPeer(socket);\n          this.logger.warn(`Reconnecting to user ${userId} client ${clientId}`);\n        }\n        resolve();\n      };\n      const handlePeerError = (error:Error) => {\n        cleanup();\n        this.logger.error(`Error connecting to ${userId}`);\n        this.logger.errorStack(error);\n        this.emit('peerError', { userId, serverId, socketId, clientId, error });\n        this.emit('error', error);\n        resolve();\n      };\n      const handleSocketLeave = ({ socketHash: oldSocketHash }:Socket) => {\n        if (socketHash !== oldSocketHash) {\n          return;\n        }\n        cleanup();\n        this.logger.warn(`Unable to connect to user ${userId} client ${clientId}, socket closed before connection was completed`);\n        resolve();\n      };\n      peer.addListener('error', handlePeerError);\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('connect', handleConnect);\n      peer.addListener('signal', handleSignal);\n      this.addListener('close', handleClose);\n      this.addListener('socketLeave', handleSocketLeave);\n      const signalQueue = this.signalQueueMap.get(clientId);\n      if (Array.isArray(signalQueue)) {\n        while (signalQueue.length > 0) {\n          const data = signalQueue.shift();\n          peer.signal(data);\n        }\n      }\n    });\n  }\n\n  async emitToPeer(clientId:number, type:string, ...args:Array<any>) {\n    const peer = await this.getConnectedPeer(clientId);\n    const message = pack(new PeerEvent(type, args));\n    if (message.length > 65536) {\n      const chunks = MultipartContainer.chunk(message, 65536);\n      for (const chunk of chunks) {\n        const ok = peer.write(chunk);\n        if (!ok) {\n          await new Promise((resolve) => {\n            peer.once('drain', () => {\n              resolve();\n            });\n          });\n        }\n      }\n    } else {\n      const ok = peer.write(message);\n      if (!ok) {\n        await new Promise((resolve) => {\n          peer.once('drain', () => {\n            resolve();\n          });\n        });\n      }\n    }\n  }\n\n  async addStream(clientId:number, stream:MediaStream) {\n    const peer = await this.getConnectedPeer(clientId);\n    const addTrackHandler = (event:Event) => {\n      if (event instanceof MediaStreamTrackEvent) {\n        peer.addTrack(event.track);\n      }\n    };\n    this.peerAddTrackHandlerMap.set(stream, addTrackHandler);\n    stream.addEventListener('addtrack', addTrackHandler);\n    peer.addStream(stream);\n  }\n\n  async removeStream(clientId:number, stream:MediaStream) {\n    const peer = await this.getConnectedPeer(clientId);\n    const addTrackHandler = this.peerAddTrackHandlerMap.get(stream);\n    if (typeof addTrackHandler === 'function') {\n      stream.removeEventListener('addtrack', addTrackHandler);\n    }\n    peer.removeStream(stream);\n  }\n\n  async disconnectFromPeer(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return;\n    }\n    this.peerMap.delete(clientId);\n    if (peer.connected) {\n      peer.send(pack(new Close(1000, 'Disconnect requested')));\n    }\n    peer.destroy();\n  }\n\n  async onIdle() {\n    while (this.queueMap.size > 0) {\n      for (const queue of this.queueMap.values()) {\n        await queue.onIdle();\n      }\n      // $FlowFixMe\n      await new Promise((resolve) => queueMicrotask(resolve));\n    }\n  }\n\n  didStartSession() {\n    if (!this.sessionId) {\n      return false;\n    }\n    return this.startedSessionId === this.sessionId;\n  }\n\n  async removeFromSession(clientId:number) {\n    const sessionId = this.sessionId;\n    if (sessionId === false) {\n      this.logger.warn(`Unable to remove client ${clientId} from session, not in a session`);\n      return;\n    }\n    const sessionClientMap = this.sessionClientMap;\n    const socket = sessionClientMap.get(clientId);\n    if (typeof socket === 'undefined') {\n      this.logger.warn(`Unable to remove client ${clientId}, client not in session ${sessionId}`);\n      return;\n    }\n    const { userId, socketId, serverId } = socket;\n    if (this.userId !== userId) {\n      this.preApprovedSessionUserIdSet.delete(userId);\n    }\n    await this.publish(REMOVE_FROM_SESSION, { userId, socketId, serverId }, { CustomError: RemoveFromSessionError });\n  }\n\n  async cancelInviteToSession(userId:string) {\n    const queue = this.queueMap.get(SESSION_QUEUE);\n    if (typeof queue !== 'undefined') {\n      await queue.onIdle();\n    }\n    const sessionId = this.sessionId; // eslint-disable-line no-undef\n    if (typeof sessionId === 'string') {\n      this.preApprovedSessionUserIdSet.delete(userId);\n      this.emit('cancelInvite', { sessionId, userId });\n      await this.publish(CANCEL_INVITE_TO_SESSION, { sessionId, userId }, { CustomError: CancelInviteToSessionError });\n    } else {\n      this.logger.warn(`Unable to cancel invite to user ${userId}, not in session`);\n    }\n  }\n\n  async inviteToSession(userId:string, options?:{ data?:Object, timeoutDuration?: number, sessionJoinHandler?: SessionJoinHandler } = {}) {\n    const { data, timeoutDuration = 30000, sessionJoinHandler } = options;\n    const queue = this.queueMap.get(SESSION_QUEUE);\n    if (typeof queue !== 'undefined') {\n      await queue.onIdle();\n    }\n    const hasSessionId = this.sessionId === 'string';\n    // $FlowFixMe\n    const sessionId = this.sessionId || globalThis.crypto.randomUUID(); // eslint-disable-line no-undef\n    let didCancel = false;\n    const handleCancelInviteBeforePublish = ({ sessionId: cancelledSessionId, userId: cancelledUserId }:{ sessionId:string, userId:string }) => {\n      if (cancelledSessionId !== sessionId) {\n        return;\n      }\n      if (cancelledUserId !== userId) {\n        return;\n      }\n      didCancel = true;\n    };\n    const leaveSession = async () => {\n      if (hasSessionId) {\n        return;\n      }\n      try {\n        await this.leaveSession();\n      } catch (error) {\n        this.logger.error('Unable to leave session');\n        this.logger.errorStack(error);\n      }\n    };\n    this.addListener('cancelInvite', handleCancelInviteBeforePublish);\n    try {\n      if (hasSessionId) {\n        this.preApprovedSessionUserIdSet.add(userId);\n        await this.publish(INVITE_TO_SESSION, { userId, sessionId, data }, { CustomError: InviteToSessionError });\n      } else {\n        await this.startSession(sessionId, sessionJoinHandler);\n        this.preApprovedSessionUserIdSet.add(userId);\n        await this.publish(INVITE_TO_SESSION, { userId, sessionId, data }, { CustomError: InviteToSessionError });\n      }\n    } catch (error) {\n      throw error;\n    } finally {\n      this.removeListener('cancelInvite', handleCancelInviteBeforePublish);\n    }\n    if (didCancel) {\n      await leaveSession();\n      throw new InvitationCancelledError(`Invitation to user ${userId} was cancelled`);\n    }\n    await new Promise((resolve, reject) => {\n      const cleanup = () => {\n        clearTimeout(timeout);\n        this.removeListener('sessionJoin', handleSessionJoin);\n        this.removeListener('close', handleClose);\n        this.removeListener('leave', handleLeave);\n        this.removeListener('session', handleSession);\n        this.removeListener('socketLeave', handleSocketLeave);\n        this.removeListener('cancelInvite', handleCancelInvite);\n        this.inviteDeclineHandlerMap.delete(`${userId}:${sessionId}`);\n      };\n      const timeout = setTimeout(async () => {\n        cleanup();\n        await leaveSession();\n        reject(new InvitationTimeoutError(`Invitation timed out after ${Math.round(timeoutDuration / 100) / 10} seconds`));\n      }, timeoutDuration);\n      const handleCancelInvite = async ({ sessionId: cancelledSessionId, userId: cancelledUserId }:{ sessionId:string, userId:string }) => {\n        if (cancelledSessionId !== sessionId) {\n          return;\n        }\n        if (cancelledUserId !== userId) {\n          return;\n        }\n        cleanup();\n        await leaveSession();\n        reject(new InvitationCancelledError(`Invitation to user ${userId} was cancelled`));\n      };\n      const handleSessionJoin = (socket: Socket) => {\n        if (socket.sessionId !== sessionId) {\n          return;\n        }\n        if (socket.userId !== userId) {\n          return;\n        }\n        cleanup();\n        resolve();\n      };\n      // Only listen for socket leave events if the user is inviting themselves\n      const handleSocketLeave = async (socket: Socket) => {\n        if (socket.userId !== this.userId) {\n          return;\n        }\n        let isOnlySocketForUserId = true;\n        for (const socketData of this.socketMap.values()) {\n          if (socketData.userId !== this.userId) {\n            continue;\n          }\n          if (socketData.clientId === this.clientId) {\n            continue;\n          }\n          isOnlySocketForUserId = false;\n        }\n        if (isOnlySocketForUserId) {\n          cleanup();\n          await leaveSession();\n          reject(new InvitedUserLeftError(`User ${userId} left before accepting the invitation`));\n        }\n      };\n      const handleSession = (newSessionId:string | false) => {\n        if (newSessionId === sessionId) {\n          return;\n        }\n        cleanup();\n        resolve();\n      };\n      const handleClose = () => {\n        cleanup();\n        reject(new ClientClosedError('Closed before invite'));\n      };\n      const handleDecline = async () => {\n        cleanup();\n        await leaveSession();\n        reject(new InvitationDeclinedError('Invitation declined'));\n      };\n      const handleLeave = async (peerUserId:string) => {\n        if (userId !== peerUserId) {\n          return;\n        }\n        cleanup();\n        await leaveSession();\n        reject(new InvitedUserLeftError(`User ${userId} left before accepting the invitation`));\n      };\n      this.inviteDeclineHandlerMap.set(`${userId}:${sessionId || ''}`, handleDecline);\n      this.addListener('sessionJoin', handleSessionJoin);\n      this.addListener('close', handleClose);\n      this.addListener('leave', handleLeave);\n      this.addListener('session', handleSession);\n      if (this.userId === userId) {\n        this.addListener('socketLeave', handleSocketLeave);\n      }\n      this.addListener('cancelInvite', handleCancelInvite);\n    });\n  }\n\n  async startSession(sessionId:string, sessionJoinHandler?: SessionJoinHandler) {\n    this.preApprovedSessionUserIdSet.clear();\n    const previousStartedSessionId = this.startedSessionId;\n    this.startedSessionId = sessionId;\n    try {\n      await this.addToQueue(SESSION_QUEUE, () => this.publish(START_SESSION, { sessionId }, { CustomError: StartSessionError }));\n    } catch (error) {\n      this.startedSessionId = previousStartedSessionId;\n      throw error;\n    }\n    delete this.joinedSessionId;\n    if (typeof sessionJoinHandler === 'function') {\n      const wrappedSessionJoinHandler = async (values) => {\n        if (this.preApprovedSessionUserIdSet.has(values.userId)) {\n          return [true, 200, 'Authorized'];\n        }\n        if (this.userId === values.userId) {\n          return [true, 200, 'Authorized'];\n        }\n        if (typeof sessionJoinHandler === 'function') {\n          return sessionJoinHandler(values);\n        }\n        return [true, 200, 'Authorized'];\n      };\n      this.sessionJoinHandlerMap.set(sessionId, wrappedSessionJoinHandler);\n    } else {\n      this.sessionJoinHandlerMap.set(sessionId, () => [true, 200, 'Authorized']);\n    }\n  }\n\n  didJoinSession() {\n    if (!this.sessionId) {\n      return false;\n    }\n    return this.joinedSessionId === this.sessionId;\n  }\n\n  async joinSession(sessionId:string, timeoutDuration?: number = 30000) {\n    const previousJoinedSessionId = this.joinedSessionId;\n    this.joinedSessionId = sessionId;\n    try {\n      await this.addToQueue(SESSION_QUEUE, () => this.publish(JOIN_SESSION, { sessionId, timeoutDuration }, { CustomError: JoinSessionError, timeoutDuration: timeoutDuration + 5000 }));\n    } catch (error) {\n      this.joinedSessionId = previousJoinedSessionId;\n      throw error;\n    }\n    const startedSessionId = this.startedSessionId;\n    delete this.startedSessionId;\n    if (typeof startedSessionId === 'string') {\n      this.sessionJoinHandlerMap.delete(startedSessionId);\n    }\n  }\n\n  async abortJoinSession() {\n    await this.publish(ABORT_SESSION_JOIN_REQUEST, { }, { CustomError: AbortSessionJoinError });\n  }\n\n  async leaveSession() {\n    try {\n      await this.addToQueue(SESSION_QUEUE, () => this.publish(LEAVE_SESSION, {}, { CustomError: LeaveSessionError }));\n      const startedSessionId = this.startedSessionId;\n      delete this.startedSessionId;\n      delete this.joinedSessionId;\n      if (typeof startedSessionId === 'string') {\n        this.sessionJoinHandlerMap.delete(startedSessionId);\n      }\n    } catch (error) {\n      if (error instanceof ClientClosedError) {\n        return;\n      }\n      throw error;\n    }\n  }\n\n  async handleMessage(message:{ requestId?: number, type:string, value:Object }) {\n    if (typeof message !== 'object') {\n      this.logger.error('Invalid message format');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    const { requestId, type, value } = message;\n    if (typeof type !== 'string') {\n      this.logger.error('Invalid message format, type property should be of type \"string\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (typeof value !== 'object') {\n      this.logger.error('Invalid message format, value property should be of type \"object\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (type === RESPONSE && typeof requestId === 'number') {\n      const callback = this.requestCallbackMap.get(requestId);\n      if (typeof callback !== 'function') {\n        this.logger.error(`Callback for request ${requestId} does not exist`);\n        return;\n      }\n      const { success, code, text } = value;\n      if (typeof success !== 'boolean') {\n        this.logger.error('Response message contained an invalid value success property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value success property');\n        return;\n      }\n      if (typeof code !== 'number') {\n        this.logger.error('Response message contained an invalid value code property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value code property');\n        return;\n      }\n      if (typeof text !== 'string') {\n        this.logger.error('Response message contained an invalid value text property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value text property');\n        return;\n      }\n      callback(success, code, text);\n      return;\n    }\n    switch (type) {\n      case SIGNAL:\n        try {\n          const {\n            clientId,\n            serverId,\n            socketId,\n            data,\n          } = value;\n          if (typeof serverId !== 'number') {\n            this.logger.error('Signal message contained an invalid server ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof socketId !== 'number') {\n            this.logger.error('Signal message contained an invalid socket ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof data !== 'object') {\n            this.logger.error('Signal message contained an invalid data property');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const peer = this.peerMap.get(clientId);\n          if (typeof peer === 'undefined') {\n            const signalQueue = this.signalQueueMap.get(clientId);\n            if (Array.isArray(signalQueue)) {\n              signalQueue.push(data);\n              return;\n            }\n            this.signalQueueMap.set(clientId, [data]);\n            return;\n          }\n          if (peer.destroyed || peer.destroying) {\n            return;\n          }\n          peer.signal(data);\n        } catch (error) {\n          this.logger.error('Unable to process signal message');\n          this.logger.errorStack(error);\n        }\n        break;\n      case DECLINE_INVITE_TO_SESSION:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Decline invite request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Decline invite request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const inviteDeclineHandler = this.inviteDeclineHandlerMap.get(requestHash);\n          if (typeof inviteDeclineHandler === 'function') {\n            inviteDeclineHandler();\n          }\n        } catch (error) {\n          this.logger.error('Unable to process decline invite request');\n          this.logger.errorStack(error);\n        }\n        break;\n      case ABORT_SESSION_JOIN_REQUEST:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Abort session join request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Abort session join request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const existing = this.sessionJoinRequestMap.get(requestHash);\n          if (!Array.isArray(existing)) {\n            this.logger.warn(`Unable to abort session join request for user ${userId} and session ${sessionId}, request does not exist`);\n            return;\n          }\n          this.logger.warn(`Aborting session join request for user ${userId} and session ${sessionId}`);\n          existing[1].abort();\n        } catch (error) {\n          this.logger.error('Unable to process session abort join request');\n          this.logger.errorStack(error);\n        }\n        break;\n      case SESSION_JOIN_REQUEST:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Session join request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Session join request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const existing = this.sessionJoinRequestMap.get(requestHash);\n          if (Array.isArray(existing)) {\n            this.logger.warn(`Session join request for user ${userId} and session ${sessionId} already exists`);\n            await existing[0];\n            return;\n          }\n          const sessionJoinHandler = this.sessionJoinHandlerMap.get(sessionId);\n          if (typeof sessionJoinHandler !== 'function') {\n            this.logger.error(`Handler for session ${sessionId} does not exist`);\n            return;\n          }\n          const abortController = new AbortController();\n          abortController.signal.addEventListener('abort', () => {\n            this.sessionJoinRequestMap.delete(requestHash);\n          });\n          const promise = (async () => {\n            let response = [false, 500, 'Error in sesssion join handler'];\n            try {\n              response = await sessionJoinHandler({ userId, sessionId, abortSignal: abortController.signal });\n            } catch (error) {\n              this.logger.error(`Unable to respond to session join request for user ${userId} and session ${sessionId}, error in session join handler`);\n              this.logger.errorStack(error);\n            }\n            if (abortController.signal.aborted) {\n              this.logger.warn(`Session join request for user ${userId} and session ${sessionId} was aborted`);\n              return;\n            }\n            try {\n              await this.publish(SESSION_JOIN_RESPONSE, {\n                userId,\n                sessionId,\n                success: response[0],\n                code: response[1],\n                text: response[2],\n              }, { CustomError: SessionJoinResponseError });\n            } catch (error) {\n              this.logger.error(`Unable to send session join response for user ${userId} and session ${sessionId}`);\n              this.logger.errorStack(error);\n            }\n            this.sessionJoinRequestMap.delete(requestHash);\n          })();\n          this.sessionJoinRequestMap.set(requestHash, [promise, abortController]);\n          await promise;\n        } catch (error) {\n          this.logger.error('Unable to process session join request');\n          this.logger.errorStack(error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown message type ${type}`);\n    }\n  }\n\n  async getConnectedPeer(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer !== 'undefined' && peer.connected) {\n      return peer;\n    }\n    return new Promise((resolve, reject) => {\n      let _peer; // eslint-disable-line no-underscore-dangle\n      const cleanup = () => {\n        this.removeListener('sessionClientLeave', handleSessionClientLeave);\n        this.removeListener('connect', handleConnect);\n        this.removeListener('peer', handlePeer);\n        if (typeof _peer !== 'undefined') {\n          _peer.removeListener('close', handlePeerClose);\n          _peer.removeListener('error', handlePeerError);\n        }\n      };\n      const handlePeerClose = () => {\n        cleanup();\n        reject(new Error(`Peer ${clientId} closed before connection was established`));\n      };\n      const handlePeerError = (error:Error) => {\n        cleanup();\n        reject(error);\n      };\n      const handlePeer = ({ clientId: newClientId, peer: _p }) => {\n        if (newClientId !== clientId) {\n          return;\n        }\n        _peer = _p;\n        _p.addListener('close', handlePeerClose);\n        _p.addListener('error', handlePeerError);\n      };\n      const handleConnect = ({ clientId: newClientId, peer: _p }) => {\n        if (newClientId !== clientId) {\n          return;\n        }\n        cleanup();\n        resolve(_p);\n      };\n      const handleSessionClientLeave = (oldClientId:number) => {\n        if (clientId !== oldClientId) {\n          return;\n        }\n        cleanup();\n        reject(new Error(`Client ${clientId} left before connection was established`));\n      };\n      this.addListener('sessionClientLeave', handleSessionClientLeave);\n      this.addListener('connect', handleConnect);\n      this.addListener('peer', handlePeer);\n    });\n  }\n\n  declineInviteToSession(data: Object) {\n    return this.publish(DECLINE_INVITE_TO_SESSION, data, { CustomError: DeclineInviteToSessionError });\n  }\n\n  reset() {\n    this.handleBraidSet(this.name, []);\n    clearTimeout(this.leaveSessionAfterLastClientTimeout);\n  }\n\n  async close() {\n    this.logger.info('Closing');\n    this.active = false;\n\n    this.reset();\n\n    for (const [clientId, timeout] of this.peerDisconnectTimeoutMap) {\n      clearTimeout(timeout);\n      this.addToQueue(clientId, () => this.disconnectFromPeer(clientId));\n    }\n    this.peerDisconnectTimeoutMap.clear();\n\n    this.emit('close');\n\n    try {\n      await this.onIdle();\n    } catch (error) {\n      this.logger.error('Error in queue during close');\n      this.logger.errorStack(error);\n    }\n\n    this.removeListener('socketJoin', this.handleSocketJoin);\n    this.removeListener('socketLeave', this.handleSocketLeave);\n    this.removeListener('sessionClientJoin', this.handleSessionClientJoin);\n    this.removeListener('sessionClientLeave', this.handleSessionClientLeave);\n    this.removeListener('session', this.handleSession);\n\n    this.braidClient.data.removeListener('set', this.handleBraidSet);\n    this.braidClient.removeListener('close', this.handleBraidClose);\n    this.braidClient.removeListener('closeRequested', this.handleBraidCloseRequested);\n    this.braidClient.removeListener('reconnect', this.handleBraidReconnect);\n    this.braidClient.stopPublishing(this.publishName);\n    this.braidClient.removeServerEventListener(this.name);\n    this.braidClient.unsubscribe(this.name);\n  }\n}\n\nconst publish = (braidClient:BraidClient, abortSignal: AbortSignal, roomId:string, type:string, value:Object, options?: { timeoutDuration?: number, CustomError?: Class<RequestError> } = {}) => {\n  const name = `signal/${roomId}`;\n  const publishName = `signal/${roomId}/${Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(36)}`;\n  const timeoutDuration = typeof options.timeoutDuration === 'number' ? options.timeoutDuration : 5000;\n  const CustomError = typeof options.CustomError === 'function' ? options.CustomError : RequestError;\n  const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n  return new Promise((resolve, reject) => {\n    const cleanup = () => {\n      clearTimeout(timeout);\n      abortSignal.removeEventListener('abort', handleAbort);\n      braidClient.removeServerEventListener(name);\n      braidClient.stopPublishing(publishName);\n    };\n    const handleAbort = () => {\n      cleanup();\n      reject(new AbortError(`Publish request aborted before ${type} request completed`));\n    };\n    const timeout = setTimeout(() => {\n      cleanup();\n      reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n    }, timeoutDuration);\n    const handleMessage = (message:{ requestId?: number, type:string, value:Object }) => {\n      if (typeof message !== 'object') {\n        return;\n      }\n      const { requestId: responseId, type: responseType, value: responseValue } = message;\n      if (responseType !== RESPONSE) {\n        return;\n      }\n      if (responseId !== requestId) {\n        return;\n      }\n      const { success, code, text } = responseValue;\n      cleanup();\n      if (success) {\n        resolve({ code, text });\n        return;\n      }\n      reject(new CustomError(text, code));\n    };\n    abortSignal.addEventListener('abort', handleAbort);\n    Promise.all([\n      braidClient.startPublishing(publishName),\n      braidClient.addServerEventListener(name, handleMessage),\n    ]).then(() => {\n      braidClient.publish(publishName, { requestId, type, value });\n    }).catch((error) => {\n      cleanup();\n      reject(error);\n    });\n  });\n};\n\nBond.declineInviteToSession = (braidClient: BraidClient, abortSignal:AbortSignal, data: { roomId: string }) => {\n  const { roomId } = data;\n  return publish(braidClient, abortSignal, roomId, DECLINE_INVITE_TO_SESSION, data, { CustomError: DeclineInviteToSessionError });\n};\n\nBond.getLocalRoomId = async (braidClient: BraidClient, _roomId:string | false, userId:string, abortSignal: AbortSignal, options?: Options = {}) => {\n  const bond = new Bond(braidClient, AUTOMATIC_DISCOVERY_ROOM_ID, userId, Object.assign({}, options, { localConnectionsOnly: true }));\n  let roomId = _roomId; // eslint-disable-line no-undef\n  const localKey = bond.clientId.toString(36);\n  const logger = options.logger || braidClient.logger;\n  const negotiatedRoomId = await new Promise((resolve, reject) => {\n    const handleSession = () => {\n      bond.data.set(localKey, roomId);\n    };\n    const handleConnect = ({ clientId, socketHash }:Socket) => {\n      const socket = bond.socketMap.get(socketHash);\n      if (typeof socket === 'undefined') {\n        return;\n      }\n      const { sessionId } = socket;\n      if (typeof sessionId !== 'string') {\n        return;\n      }\n      if (clientId > bond.clientId) {\n        bond.joinSession(sessionId).catch((error) => {\n          logger.error('Unable to join session during automatic linking');\n          logger.errorStack(error);\n        });\n      }\n    };\n    const handleSessionJoin = ({ clientId, sessionId }:Socket) => {\n      if (typeof sessionId === 'string' && bond.sessionId === sessionId) {\n        return;\n      }\n      if (!bond.peerMap.has(clientId)) {\n        return;\n      }\n      if (typeof sessionId !== 'string') {\n        return;\n      }\n      if (clientId > bond.clientId) {\n        bond.joinSession(sessionId).catch((error) => {\n          logger.error('Unable to join session during automatic linking');\n          logger.errorStack(error);\n        });\n      }\n    };\n    const handleSet = (key:string, remoteRoomId:string | false) => {\n      if (key === localKey) {\n        return;\n      }\n      const clientId = parseInt(key, 36);\n      if (!bond.peerMap.has(clientId)) {\n        return;\n      }\n      if (roomId === false && remoteRoomId === false && clientId < bond.clientId) {\n        roomId = globalThis.crypto.randomUUID(); // eslint-disable-line no-undef\n        bond.data.set(localKey, roomId);\n        return;\n      } else if (typeof roomId === 'string' && typeof remoteRoomId === 'string' && roomId !== remoteRoomId && clientId > bond.clientId) {\n        roomId = remoteRoomId;\n        bond.data.set(localKey, remoteRoomId);\n      } else if (roomId === false && typeof remoteRoomId === 'string') {\n        roomId = remoteRoomId;\n        bond.data.set(localKey, remoteRoomId);\n      } else if (typeof roomId !== 'string' || roomId !== remoteRoomId) {\n        return;\n      }\n      abortSignal.removeEventListener('abort', handleAbort);\n      bond.removeListener('close', handleClose);\n      bond.removeListener('connect', handleConnect);\n      bond.removeListener('sessionJoin', handleSessionJoin);\n      bond.removeListener('session', handleSession);\n      bond.data.removeListener('set', handleSet);\n      resolve(roomId);\n    };\n    const handleClose = () => {\n      abortSignal.removeEventListener('abort', handleAbort);\n      bond.removeListener('close', handleClose);\n      bond.removeListener('connect', handleConnect);\n      bond.removeListener('sessionJoin', handleSessionJoin);\n      bond.removeListener('session', handleSession);\n      bond.data.removeListener('set', handleSet);\n      reject(new ClientClosedError('Client closed before local room ID was discovered'));\n    };\n    const handleAbort = async () => {\n      abortSignal.removeEventListener('abort', handleAbort);\n      bond.removeListener('close', handleClose);\n      bond.removeListener('connect', handleConnect);\n      bond.removeListener('sessionJoin', handleSessionJoin);\n      bond.removeListener('session', handleSession);\n      bond.data.removeListener('set', handleSet);\n      try {\n        const queue = bond.queueMap.get(SESSION_QUEUE);\n        if (typeof queue !== 'undefined') {\n          await queue.onIdle();\n        }\n        await bond.close();\n      } catch (error) {\n        logger.error('Unable to close before throwing abort error');\n        logger.errorStack(error);\n      }\n      reject(new AbortError('Local room ID discovery aborted'));\n    };\n    abortSignal.addEventListener('abort', handleAbort);\n    bond.data.addListener('set', handleSet);\n    bond.addListener('close', handleClose);\n    bond.addListener('connect', handleConnect);\n    bond.addListener('sessionJoin', handleSessionJoin);\n    bond.addListener('session', handleSession);\n    bond.startSession(globalThis.crypto.randomUUID()); // eslint-disable-line no-undef\n  });\n  await bond.close();\n  return negotiatedRoomId;\n};\n\n"],"file":"index.js"}