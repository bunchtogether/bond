{"version":3,"sources":["../../src/index.js"],"names":["EventEmitter","ObservedRemoveMap","SimplePeer","PQueue","pack","unpack","SIGNAL","START_SESSION","LEAVE_SESSION","JOIN_SESSION","INVITE_TO_SESSION","DECLINE_INVITE_TO_SESSION","SESSION_QUEUE","ABORT_SESSION_JOIN_REQUEST","SESSION_JOIN_REQUEST","SESSION_JOIN_RESPONSE","RESPONSE","AbortError","RequestError","StartSessionError","RequestTimeoutError","JoinSessionError","LeaveSessionError","SignalError","SessionJoinResponseError","ClientClosedError","InviteToSessionError","InvitationDeclinedError","InvitedUserLeftError","InvitationTimeoutError","DeclineInviteToSessionError","Ping","Pong","ObservedRemoveDump","getSocketMap","values","Map","map","x","socketHash","socketId","serverId","userId","clientId","sessionId","getSessionId","getPeerIds","Set","getSessionMap","socketMap","socket","sessionClientMap","get","set","Bond","constructor","braidClient","roomId","options","active","Math","floor","random","Number","MAX_SAFE_INTEGER","name","publishName","toString","logger","peerOptions","userIds","peerMap","peerReconnectMap","queueMap","sessionMap","inviteDeclineHandlerMap","requestCallbackMap","signalQueueMap","peerDisconnectTimeoutMap","sessionJoinHandlerMap","sessionJoinRequestMap","data","bufferPublishing","sessionClientOffsetMap","addListener","handleSessionClientJoin","bind","_ready","init","ready","joinSession","socketData","has","info","clearTimeout","delete","addToQueue","connectToPeer","setTimeout","disconnectFromPeer","sessionClientIds","size","leaveSessionAfterLastClientTimeout","leaveSession","error","errorStack","timelineValue","clear","handleBraidSet","key","oldSessionId","newSessionId","oldSocketMap","newSocketMap","oldUserIds","newUserIds","oldSessionMap","newSessionMap","oldLocalSessionSocketMap","newLocalSessionSocketMap","emit","peerUserId","oldSessionSocketMap","newSessionSocketMap","handleBraidClose","reset","handleBraidCloseRequested","close","handleBraidReconnect","isReconnecting","startedSessionId","joinedSessionId","handleInitialized","startSession","catch","removeListener","handleClose","handleError","clientIds","keys","promise","Promise","resolve","reject","handleValue","Error","value","all","subscribe","addServerEventListener","handleMessage","startPublishing","queueId","func","queue","add","newQueue","concurrency","on","publish","type","timeoutDuration","CustomError","requestId","timeout","handleResponse","success","code","text","isConnectedToClient","peer","connected","reconnectCount","reconnectDelay","round","handleSocketLeave","oldSocketHash","existingPeer","Object","assign","initiator","addPeerListeners","cleanup","handleSignal","handleStream","handlePeerError","handlePeerClose","handlePeerReconnect","stream","getTracks","forEach","track","stop","dispatchEvent","Event","warn","handleConnect","signalQueue","Array","isArray","length","shift","signal","addStream","getConnectedPeer","removeStream","destroy","onIdle","queueMicrotask","cleanupSession","didStartSession","inviteToSession","sessionJoinHandler","hasSessionId","globalThis","crypto","randomUUID","automaticSessionJoinHandler","handleSessionJoin","handleLeave","handleSession","isOnlySocketForUserId","handleDecline","didJoinSession","message","JSON","stringify","callback","push","destroyed","destroying","requestHash","inviteDeclineHandler","existing","abort","abortController","AbortController","addEventListener","response","abortSignal","aborted","_peer","handleSessionClientLeave","handlePeer","newClientId","_p","oldClientId","interval","offset","handlePeerData","handleDataPublish","clearInterval","sendToPeer","unpacked","send","packed","timestamp","Date","now","wallclock","performance","process","removeEventListener","handleAbort","setInterval","dump","declineInviteToSession","finally","stopPublishing","removeServerEventListener","unsubscribe","responseId","responseType","responseValue","then"],"mappings":";;AAEA,OAAOA,YAAP,MAAyB,QAAzB;AACA,OAAOC,iBAAP,MAA8B,0BAA9B;AAEA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,MAAP,MAAmB,SAAnB;AACA,SACEC,IADF,EAEEC,MAFF,QAGO,UAHP;AAIA,SACEC,MADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,YAJF,EAKEC,iBALF,EAMEC,yBANF,EAOEC,aAPF,EAQEC,0BARF,EASEC,oBATF,EAUEC,qBAVF,EAWEC,QAXF,QAYO,aAZP;AAaA,SACEC,UADF,EAEEC,YAFF,EAGEC,iBAHF,EAIEC,mBAJF,EAKEC,gBALF,EAMEC,iBANF,EAOEC,WAPF,EAQEC,wBARF,EASEC,iBATF,EAUEC,oBAVF,EAWEC,uBAXF,EAYEC,oBAZF,EAaEC,sBAbF,EAcEC,2BAdF,QAeO,UAfP;AAgBA,SACEC,IADF,EAEEC,IAFF,EAGEC,kBAHF,QAIO,eAJP;;AAwBA,MAAMC,YAAY,GAAIC,MAAD,IAAmD;AACtE,MAAI,OAAOA,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAO,IAAIC,GAAJ,EAAP;AACD;;AACD,SAAO,IAAIA,GAAJ,CAAQD,MAAM,CAACE,GAAP,CAAYC,CAAD,IAAO;AAC/B,UAAMC,UAAU,GAAI,GAAED,CAAC,CAAC,CAAD,CAAI,IAAGA,CAAC,CAAC,CAAD,CAAI,EAAnC;AACA,WAAO,CAACC,UAAD,EAAa;AAAEA,MAAAA,UAAF;AAAcC,MAAAA,QAAQ,EAAEF,CAAC,CAAC,CAAD,CAAzB;AAA8BG,MAAAA,QAAQ,EAAEH,CAAC,CAAC,CAAD,CAAzC;AAA8CI,MAAAA,MAAM,EAAEJ,CAAC,CAAC,CAAD,CAAvD;AAA4DK,MAAAA,QAAQ,EAAEL,CAAC,CAAC,CAAD,CAAvE;AAA4EM,MAAAA,SAAS,EAAEN,CAAC,CAAC,CAAD;AAAxF,KAAb,CAAP;AACD,GAHc,CAAR,CAAP;AAID,CARD;;AAUA,MAAMO,YAAY,GAAG,CAACV,MAAD,EAA4BQ,QAA5B,KAAiE;AACpF,MAAI,OAAOR,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAO,KAAP;AACD;;AACD,OAAK,MAAMG,CAAX,IAAgBH,MAAhB,EAAwB;AACtB,QAAIG,CAAC,CAAC,CAAD,CAAD,KAASK,QAAb,EAAuB;AACrB,aAAOL,CAAC,CAAC,CAAD,CAAD,IAAQ,KAAf;AACD;AACF;;AACD,SAAO,KAAP;AACD,CAVD;;AAYA,MAAMQ,UAAU,GAAIX,MAAD,IAA2C;AAC5D,MAAI,OAAOA,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAO,IAAIY,GAAJ,EAAP;AACD;;AACD,SAAO,IAAIA,GAAJ,CAAQZ,MAAM,CAACE,GAAP,CAAYC,CAAD,IAAOA,CAAC,CAAC,CAAD,CAAnB,CAAR,CAAP;AACD,CALD;;AAOA,MAAMU,aAAa,GAAIC,SAAD,IAA4E;AAChG,QAAMZ,GAAG,GAAG,IAAID,GAAJ,EAAZ;;AACA,OAAK,MAAMc,MAAX,IAAqBD,SAAS,CAACd,MAAV,EAArB,EAAyC;AACvC,UAAM;AAAEQ,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA0BM,MAAhC;AACA,UAAMC,gBAAgB,GAAGd,GAAG,CAACe,GAAJ,CAAQR,SAAR,CAAzB;;AACA,QAAI,OAAOO,gBAAP,KAA4B,WAAhC,EAA6C;AAC3Cd,MAAAA,GAAG,CAACgB,GAAJ,CAAQT,SAAR,EAAmB,IAAIR,GAAJ,CAAQ,CAAC,CAACO,QAAD,EAAWO,MAAX,CAAD,CAAR,CAAnB;AACD,KAFD,MAEO;AACLC,MAAAA,gBAAgB,CAACE,GAAjB,CAAqBV,QAArB,EAA+BO,MAA/B;AACD;AACF;;AACD,SAAOb,GAAP;AACD,CAZD;;AAcA,OAAO,MAAMiB,IAAN,SAAmBtD,YAAnB,CAAgC;AAqCrCuD,EAAAA,WAAW,CAACC,WAAD,EAA2BC,MAA3B,EAA0Cf,MAA1C,EAAyDgB,OAAiB,GAAG,EAA7E,EAAiF;AAC1F;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKhB,QAAL,GAAgBiB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBC,MAAM,CAACC,gBAAlC,CAAhB;AACA,SAAKtB,MAAL,GAAcA,MAAd;AACA,SAAKe,MAAL,GAAcA,MAAd;AACA,SAAKb,SAAL,GAAiB,KAAjB;AACA,UAAMqB,IAAI,GAAI,UAAS,KAAKR,MAAO,EAAnC;AACA,SAAKQ,IAAL,GAAYA,IAAZ;AACA,SAAKC,WAAL,GAAoB,UAAS,KAAKT,MAAO,IAAG,KAAKd,QAAL,CAAcwB,QAAd,CAAuB,EAAvB,CAA2B,EAAvE;AACA,SAAKX,WAAL,GAAmBA,WAAnB;AACA,SAAKY,MAAL,GAAcV,OAAO,CAACU,MAAR,IAAkBZ,WAAW,CAACY,MAA5C;AACA,SAAKC,WAAL,GAAmBX,OAAO,CAACW,WAA3B;AACA,SAAKpB,SAAL,GAAiB,IAAIb,GAAJ,EAAjB;AACA,SAAKkC,OAAL,GAAe,IAAIvB,GAAJ,EAAf;AACA,SAAKwB,OAAL,GAAe,IAAInC,GAAJ,EAAf;AACA,SAAKoC,gBAAL,GAAwB,IAAIpC,GAAJ,EAAxB;AACA,SAAKqC,QAAL,GAAgB,IAAIrC,GAAJ,EAAhB;AACA,SAAKsC,UAAL,GAAkB,IAAItC,GAAJ,EAAlB;AACA,SAAKuC,uBAAL,GAA+B,IAAIvC,GAAJ,EAA/B;AACA,SAAKwC,kBAAL,GAA0B,IAAIxC,GAAJ,EAA1B;AACA,SAAKyC,cAAL,GAAsB,IAAIzC,GAAJ,EAAtB;AACA,SAAK0C,wBAAL,GAAgC,IAAI1C,GAAJ,EAAhC;AACA,SAAK2C,qBAAL,GAA6B,IAAI3C,GAAJ,EAA7B;AACA,SAAK4C,qBAAL,GAA6B,IAAI5C,GAAJ,EAA7B;AACA,SAAK6C,IAAL,GAAY,IAAIhF,iBAAJ,CAAsB,EAAtB,EAA0B;AAAEiF,MAAAA,gBAAgB,EAAE;AAApB,KAA1B,CAAZ;AACA,SAAKC,sBAAL,GAA8B,IAAI/C,GAAJ,EAA9B;AACA,SAAKgD,WAAL,CAAiB,mBAAjB,EAAsC,KAAKC,uBAAL,CAA6BC,IAA7B,CAAkC,IAAlC,CAAtC;AACA,SAAKC,MAAL,GAAc,KAAKC,IAAL,EAAd,CA5B0F,CA4B/D;;AAC3B,QAAI,OAAO9B,OAAO,CAACd,SAAf,KAA6B,QAAjC,EAA2C;AACzC,WAAK6C,KAAL,GAAa,KAAKC,WAAL,CAAiBhC,OAAO,CAACd,SAAzB,CAAb;AACD,KAFD,MAEO;AACL,WAAK6C,KAAL,GAAa,KAAKF,MAAlB,CADK,CACqB;AAC3B;;AACD,SAAKH,WAAL,CAAiB,YAAjB,EAAgCO,UAAD,IAAuB;AACpD,YAAM;AAAEhD,QAAAA;AAAF,UAAegD,UAArB;;AACA,UAAIhD,QAAQ,KAAK,KAAKA,QAAtB,EAAgC;AAC9B;AACD;;AACD,UAAI,KAAKmC,wBAAL,CAA8Bc,GAA9B,CAAkCjD,QAAlC,CAAJ,EAAiD;AAC/C,aAAKyB,MAAL,CAAYyB,IAAZ,CAAkB,mBAAkBlD,QAAS,uCAA7C;AACAmD,QAAAA,YAAY,CAAC,KAAKhB,wBAAL,CAA8B1B,GAA9B,CAAkCT,QAAlC,CAAD,CAAZ;AACA,aAAKmC,wBAAL,CAA8BiB,MAA9B,CAAqCpD,QAArC;AACD;;AACD,WAAKqD,UAAL,CAAgBrD,QAAhB,EAA0B,MAAM,KAAKsD,aAAL,CAAmBN,UAAnB,CAAhC;AACD,KAXD;AAYA,SAAKP,WAAL,CAAiB,aAAjB,EAAiCO,UAAD,IAAuB;AACrD,YAAM;AAAEhD,QAAAA;AAAF,UAAegD,UAArB;;AACA,UAAIhD,QAAQ,KAAK,KAAKA,QAAtB,EAAgC;AAC9B;AACD;;AACDmD,MAAAA,YAAY,CAAC,KAAKhB,wBAAL,CAA8B1B,GAA9B,CAAkCT,QAAlC,CAAD,CAAZ;;AACA,UAAI,KAAKgB,MAAT,EAAiB;AACf,aAAKmB,wBAAL,CAA8BzB,GAA9B,CAAkCV,QAAlC,EAA4CuD,UAAU,CAAC,MAAM;AAC3D,eAAKpB,wBAAL,CAA8BiB,MAA9B,CAAqCpD,QAArC;AACA,eAAKqD,UAAL,CAAgBrD,QAAhB,EAA0B,MAAM,KAAKwD,kBAAL,CAAwBR,UAAxB,CAAhC;AACD,SAHqD,EAGnD,KAHmD,CAAtD;AAID,OALD,MAKO;AACL,aAAKK,UAAL,CAAgBrD,QAAhB,EAA0B,MAAM,KAAKwD,kBAAL,CAAwBR,UAAxB,CAAhC;AACD;AACF,KAdD;AAeA,SAAKP,WAAL,CAAiB,mBAAjB,EAAsC,MAAM;AAC1C,YAAMgB,gBAAgB,GAAG,KAAKA,gBAA9B;;AACA,UAAIA,gBAAgB,CAACC,IAAjB,GAAwB,CAA5B,EAA+B;AAC7B;AACD;;AACDP,MAAAA,YAAY,CAAC,KAAKQ,kCAAN,CAAZ;AACD,KAND;AAOA,SAAKlB,WAAL,CAAiB,oBAAjB,EAAuC,YAAY;AACjD,YAAMgB,gBAAgB,GAAG,KAAKA,gBAA9B;;AACA,UAAIA,gBAAgB,CAACC,IAAjB,GAAwB,CAA5B,EAA+B;AAC7B;AACD;;AACD,WAAKC,kCAAL,GAA0CJ,UAAU,CAAC,YAAY;AAC/D,YAAI;AACF,gBAAM,KAAKK,YAAL,EAAN;AACD,SAFD,CAEE,OAAOC,KAAP,EAAc;AACd,eAAKpC,MAAL,CAAYoC,KAAZ,CAAkB,gEAAlB;AACA,eAAKpC,MAAL,CAAYqC,UAAZ,CAAuBD,KAAvB;AACD;AACF,OAPmD,EAOjD,IAPiD,CAApD;AAQD,KAbD;AAeA,SAAKpB,WAAL,CAAiB,SAAjB,EAA4B,YAAY;AACtC,YAAMsB,aAAa,GAAG,KAAKzB,IAAL,CAAU7B,GAAV,CAAc,KAAKT,QAAnB,CAAtB;AACA,WAAKsC,IAAL,CAAU0B,KAAV;AACA,WAAKxB,sBAAL,CAA4BwB,KAA5B;;AACA,UAAI,OAAOD,aAAP,KAAyB,WAA7B,EAA0C;AACxC,aAAKzB,IAAL,CAAU5B,GAAV,CAAc,KAAKV,QAAnB;AACD;AACF,KAPD;;AASA,SAAKiE,cAAL,GAAsB,CAACC,GAAD,EAAa1E,MAAb,KAA0C;AAC9D,UAAI0E,GAAG,KAAK5C,IAAZ,EAAkB;AAChB;AACD;;AACD,WAAKN,MAAL,GAAc,IAAd;AACA,YAAMmD,YAAY,GAAG,KAAKlE,SAA1B;AACA,YAAMmE,YAAY,GAAGlE,YAAY,CAACV,MAAD,EAAS,KAAKQ,QAAd,CAAjC;AACA,YAAMqE,YAAY,GAAG,KAAK/D,SAA1B;AACA,YAAMgE,YAAY,GAAG/E,YAAY,CAACC,MAAD,CAAjC;AACA,YAAM+E,UAAU,GAAG,KAAK5C,OAAxB;AACA,YAAM6C,UAAU,GAAGrE,UAAU,CAACX,MAAD,CAA7B;AACA,YAAMiF,aAAa,GAAG,KAAK1C,UAA3B;AACA,YAAM2C,aAAa,GAAGrE,aAAa,CAACiE,YAAD,CAAnC;AACA,YAAMK,wBAAwB,GAAG,OAAOR,YAAP,KAAwB,QAAxB,GAAmCM,aAAa,CAAChE,GAAd,CAAkB0D,YAAlB,KAAmC,IAAI1E,GAAJ,EAAtE,GAAkF,IAAIA,GAAJ,EAAnH;AACA,YAAMmF,wBAAwB,GAAG,OAAOR,YAAP,KAAwB,QAAxB,GAAmCM,aAAa,CAACjE,GAAd,CAAkB2D,YAAlB,KAAmC,IAAI3E,GAAJ,EAAtE,GAAkF,IAAIA,GAAJ,EAAnH;AACA,WAAKQ,SAAL,GAAiBmE,YAAjB;AACA,WAAKzC,OAAL,GAAe6C,UAAf;AACA,WAAKlE,SAAL,GAAiBgE,YAAjB;AACA,WAAKvC,UAAL,GAAkB2C,aAAlB;;AACA,UAAIN,YAAY,KAAKD,YAArB,EAAmC;AACjC,aAAKU,IAAL,CAAU,SAAV,EAAqBT,YAArB;AACD;;AACD,WAAK,MAAM,CAACxE,UAAD,EAAaoD,UAAb,CAAX,IAAuCqB,YAAvC,EAAqD;AACnD,YAAI,CAACC,YAAY,CAACrB,GAAb,CAAiBrD,UAAjB,CAAL,EAAmC;AACjC,eAAKiF,IAAL,CAAU,aAAV,EAAyB7B,UAAzB;AACD;AACF;;AACD,WAAK,MAAM,CAACpD,UAAD,EAAaoD,UAAb,CAAX,IAAuCsB,YAAvC,EAAqD;AACnD,YAAI,CAACD,YAAY,CAACpB,GAAb,CAAiBrD,UAAjB,CAAL,EAAmC;AACjC,eAAKiF,IAAL,CAAU,YAAV,EAAwB7B,UAAxB;AACD;AACF;;AACD,WAAK,MAAM8B,UAAX,IAAyBP,UAAzB,EAAqC;AACnC,YAAI,CAACC,UAAU,CAACvB,GAAX,CAAe6B,UAAf,CAAL,EAAiC;AAC/B,eAAKD,IAAL,CAAU,OAAV,EAAmBC,UAAnB;AACD;AACF;;AACD,WAAK,MAAMA,UAAX,IAAyBN,UAAzB,EAAqC;AACnC,YAAI,CAACD,UAAU,CAACtB,GAAX,CAAe6B,UAAf,CAAL,EAAiC;AAC/B,eAAKD,IAAL,CAAU,MAAV,EAAkBC,UAAlB;AACD;AACF;;AACD,WAAK,MAAM,CAAC9E,QAAD,EAAWgD,UAAX,CAAX,IAAqC2B,wBAArC,EAA+D;AAC7D,YAAI3E,QAAQ,KAAK,KAAKA,QAAtB,EAAgC;AAC9B;AACD;;AACD,YAAI,CAAC4E,wBAAwB,CAAC3B,GAAzB,CAA6BjD,QAA7B,CAAL,EAA6C;AAC3C,eAAK6E,IAAL,CAAU,oBAAV,EAAgC7E,QAAhC,EAA0CgD,UAA1C;AACD;AACF;;AACD,WAAK,MAAM,CAAChD,QAAD,EAAWgD,UAAX,CAAX,IAAqC4B,wBAArC,EAA+D;AAC7D,YAAI5E,QAAQ,KAAK,KAAKA,QAAtB,EAAgC;AAC9B;AACD;;AACD,YAAI,CAAC2E,wBAAwB,CAAC1B,GAAzB,CAA6BjD,QAA7B,CAAL,EAA6C;AAC3C,eAAK6E,IAAL,CAAU,mBAAV,EAA+B7E,QAA/B,EAAyCgD,UAAzC;AACD;AACF;;AACD,WAAK,MAAM,CAAC/C,SAAD,EAAY8E,mBAAZ,CAAX,IAA+CN,aAA/C,EAA8D;AAC5D,cAAMO,mBAAmB,GAAGN,aAAa,CAACjE,GAAd,CAAkBR,SAAlB,CAA5B;;AACA,YAAI,OAAO+E,mBAAP,KAA+B,WAAnC,EAAgD;AAC9C,eAAK,MAAMhC,UAAX,IAAyB+B,mBAAmB,CAACvF,MAApB,EAAzB,EAAuD;AACrD,iBAAKqF,IAAL,CAAU,cAAV,EAA0B7B,UAA1B;AACD;AACF,SAJD,MAIO;AACL,eAAK,MAAM,CAACpD,UAAD,EAAaoD,UAAb,CAAX,IAAuC+B,mBAAvC,EAA4D;AAC1D,gBAAI,CAACC,mBAAmB,CAAC/B,GAApB,CAAwBrD,UAAxB,CAAL,EAA0C;AACxC,mBAAKiF,IAAL,CAAU,cAAV,EAA0B7B,UAA1B;AACD;AACF;AACF;AACF;;AACD,WAAK,MAAM,CAAC/C,SAAD,EAAY+E,mBAAZ,CAAX,IAA+CN,aAA/C,EAA8D;AAC5D,cAAMK,mBAAmB,GAAGN,aAAa,CAAChE,GAAd,CAAkBR,SAAlB,CAA5B;;AACA,YAAI,OAAO8E,mBAAP,KAA+B,WAAnC,EAAgD;AAC9C,eAAK,MAAM/B,UAAX,IAAyBgC,mBAAmB,CAACxF,MAApB,EAAzB,EAAuD;AACrD,iBAAKqF,IAAL,CAAU,aAAV,EAAyB7B,UAAzB;AACD;AACF,SAJD,MAIO;AACL,eAAK,MAAM,CAACpD,UAAD,EAAaoD,UAAb,CAAX,IAAuCgC,mBAAvC,EAA4D;AAC1D,gBAAI,CAACD,mBAAmB,CAAC9B,GAApB,CAAwBrD,UAAxB,CAAL,EAA0C;AACxC,mBAAKiF,IAAL,CAAU,aAAV,EAAyB7B,UAAzB;AACD;AACF;AACF;AACF;AACF,KAtFD;;AAuFA,SAAKiC,gBAAL,GAAwB,MAAM;AAC5B,WAAKC,KAAL;AACD,KAFD;;AAGA,SAAKC,yBAAL,GAAiC,MAAM;AACrC,WAAKC,KAAL;AACD,KAFD;;AAGA,SAAKC,oBAAL,GAA6BC,cAAD,IAA6B;AACvD,UAAI,CAACA,cAAL,EAAqB;AACnB;AACD;;AACD,YAAMC,gBAAgB,GAAG,KAAKA,gBAA9B;AACA,YAAMC,eAAe,GAAG,KAAKA,eAA7B;;AACA,YAAMC,iBAAiB,GAAG,MAAM;AAC9B,YAAI,OAAOF,gBAAP,KAA4B,QAAhC,EAA0C;AACxC,eAAK9D,MAAL,CAAYyB,IAAZ,CAAkB,sBAAqBqC,gBAAiB,EAAxD;AACA,eAAKG,YAAL,CAAkBH,gBAAlB,EAAoCI,KAApC,CAA2C9B,KAAD,IAAW;AACnD,iBAAKpC,MAAL,CAAYoC,KAAZ,CAAmB,6BAA4B0B,gBAAiB,kBAAhE;AACA,iBAAK9D,MAAL,CAAYqC,UAAZ,CAAuBD,KAAvB;AACD,WAHD;AAID;;AACD,YAAI,OAAO2B,eAAP,KAA2B,QAA/B,EAAyC;AACvC,eAAK/D,MAAL,CAAYyB,IAAZ,CAAkB,qBAAoBsC,eAAgB,EAAtD;AACA,eAAKzC,WAAL,CAAiByC,eAAjB,EAAkCG,KAAlC,CAAyC9B,KAAD,IAAW;AACjD,iBAAKpC,MAAL,CAAYoC,KAAZ,CAAmB,4BAA2B2B,eAAgB,kBAA9D;AACA,iBAAK/D,MAAL,CAAYqC,UAAZ,CAAuBD,KAAvB;AACD,WAHD;AAID;;AACD,aAAKhD,WAAL,CAAiB+E,cAAjB,CAAgC,aAAhC,EAA+CH,iBAA/C;AACA,aAAK5E,WAAL,CAAiB+E,cAAjB,CAAgC,OAAhC,EAAyCC,WAAzC;AACA,aAAKhF,WAAL,CAAiB+E,cAAjB,CAAgC,OAAhC,EAAyCE,WAAzC;AACD,OAlBD;;AAmBA,YAAMD,WAAW,GAAG,MAAM;AACxB,aAAKhF,WAAL,CAAiB+E,cAAjB,CAAgC,aAAhC,EAA+CH,iBAA/C;AACA,aAAK5E,WAAL,CAAiB+E,cAAjB,CAAgC,OAAhC,EAAyCC,WAAzC;AACA,aAAKhF,WAAL,CAAiB+E,cAAjB,CAAgC,OAAhC,EAAyCE,WAAzC;AACD,OAJD;;AAKA,YAAMA,WAAW,GAAIjC,KAAD,IAAiB;AACnC,YAAI,OAAO0B,gBAAP,KAA4B,QAAhC,EAA0C;AACxC,eAAK9D,MAAL,CAAYoC,KAAZ,CAAmB,6BAA4B0B,gBAAiB,kBAAhE;AACA,eAAK9D,MAAL,CAAYqC,UAAZ,CAAuBD,KAAvB;AACD;;AACD,aAAKhD,WAAL,CAAiB+E,cAAjB,CAAgC,aAAhC,EAA+CH,iBAA/C;AACA,aAAK5E,WAAL,CAAiB+E,cAAjB,CAAgC,OAAhC,EAAyCC,WAAzC;AACA,aAAKhF,WAAL,CAAiB+E,cAAjB,CAAgC,OAAhC,EAAyCE,WAAzC;AACD,OARD;;AASA,WAAKjF,WAAL,CAAiB4B,WAAjB,CAA6B,aAA7B,EAA4CgD,iBAA5C;AACA,WAAK5E,WAAL,CAAiB4B,WAAjB,CAA6B,OAA7B,EAAsCoD,WAAtC;AACA,WAAKhF,WAAL,CAAiB4B,WAAjB,CAA6B,OAA7B,EAAsCqD,WAAtC;AACD,KA1CD;;AA2CA,SAAKjF,WAAL,CAAiByB,IAAjB,CAAsBG,WAAtB,CAAkC,KAAlC,EAAyC,KAAKwB,cAA9C;AACA,SAAKpD,WAAL,CAAiB4B,WAAjB,CAA6B,OAA7B,EAAsC,KAAKwC,gBAA3C;AACA,SAAKpE,WAAL,CAAiB4B,WAAjB,CAA6B,gBAA7B,EAA+C,KAAK0C,yBAApD;AACA,SAAKtE,WAAL,CAAiB4B,WAAjB,CAA6B,WAA7B,EAA0C,KAAK4C,oBAA/C;AACD;;AAEmB,MAAhB5B,gBAAgB,GAAe;AACjC,UAAMxD,SAAS,GAAG,KAAKA,SAAvB;;AACA,QAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjC,aAAO,IAAIG,GAAJ,EAAP;AACD;;AACD,UAAMI,gBAAgB,GAAG,KAAKuB,UAAL,CAAgBtB,GAAhB,CAAoBR,SAApB,CAAzB;;AACA,QAAI,OAAOO,gBAAP,KAA4B,WAAhC,EAA6C;AAC3C,aAAO,IAAIJ,GAAJ,EAAP;AACD;;AACD,UAAM2F,SAAS,GAAG,IAAI3F,GAAJ,CAAQI,gBAAgB,CAACwF,IAAjB,EAAR,CAAlB;AACAD,IAAAA,SAAS,CAAC3C,MAAV,CAAiB,KAAKpD,QAAtB;AACA,WAAO+F,SAAP;AACD;;AAES,QAAJlD,IAAI,GAAG;AACX,UAAMoD,OAAO,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/C,YAAMP,WAAW,GAAG,MAAM;AACxB,aAAKD,cAAL,CAAoB,OAApB,EAA6BC,WAA7B;AACA,aAAKhF,WAAL,CAAiByB,IAAjB,CAAsBsD,cAAtB,CAAqC,KAArC,EAA4CS,WAA5C;AACA,aAAKxF,WAAL,CAAiB+E,cAAjB,CAAgC,OAAhC,EAAyCE,WAAzC;AACAM,QAAAA,MAAM,CAAC,IAAIE,KAAJ,CAAU,wCAAV,CAAD,CAAN;AACD,OALD;;AAMA,YAAMD,WAAW,GAAG,CAACnC,GAAD,EAAaqC,KAAb,KAA2B;AAC7C,YAAIrC,GAAG,KAAK,KAAK5C,IAAjB,EAAuB;AACrB;AACD;;AACD,YAAI,OAAOiF,KAAP,KAAiB,WAArB,EAAkC;AAChC;AACD;;AACD,aAAKX,cAAL,CAAoB,OAApB,EAA6BC,WAA7B;AACA,aAAKhF,WAAL,CAAiByB,IAAjB,CAAsBsD,cAAtB,CAAqC,KAArC,EAA4CS,WAA5C;AACA,aAAKxF,WAAL,CAAiB+E,cAAjB,CAAgC,OAAhC,EAAyCE,WAAzC;AACAK,QAAAA,OAAO;AACR,OAXD;;AAYA,YAAML,WAAW,GAAIjC,KAAD,IAAiB;AACnC,aAAK+B,cAAL,CAAoB,OAApB,EAA6BC,WAA7B;AACA,aAAKhF,WAAL,CAAiByB,IAAjB,CAAsBsD,cAAtB,CAAqC,KAArC,EAA4CS,WAA5C;AACA,aAAKxF,WAAL,CAAiB+E,cAAjB,CAAgC,OAAhC,EAAyCE,WAAzC;AACAM,QAAAA,MAAM,CAACvC,KAAD,CAAN;AACD,OALD;;AAMA,WAAKpB,WAAL,CAAiB,OAAjB,EAA0BoD,WAA1B;AACA,WAAKhF,WAAL,CAAiByB,IAAjB,CAAsBG,WAAtB,CAAkC,KAAlC,EAAyC4D,WAAzC;AACA,WAAKxF,WAAL,CAAiB4B,WAAjB,CAA6B,OAA7B,EAAsCqD,WAAtC;AACAO,MAAAA,WAAW,CAAC,KAAK/E,IAAN,EAAY,KAAKT,WAAL,CAAiByB,IAAjB,CAAsB7B,GAAtB,CAA0B,KAAKa,IAA/B,CAAZ,CAAX;AACD,KA7Be,CAAhB;;AA8BA,QAAI;AACF,YAAM4E,OAAO,CAACM,GAAR,CAAY,CAChB,KAAK3F,WAAL,CAAiB4F,SAAjB,CAA2B,KAAKnF,IAAhC,CADgB,EAEhB,KAAKT,WAAL,CAAiB6F,sBAAjB,CAAwC,KAAKpF,IAA7C,EAAmD,KAAKqF,aAAL,CAAmBhE,IAAnB,CAAwB,IAAxB,CAAnD,CAFgB,CAAZ,CAAN;;AAIA,UAAI,CAAC,KAAK3B,MAAV,EAAkB;AAChB;AACD;;AACD,YAAMiF,OAAN;;AACA,UAAI,CAAC,KAAKjF,MAAV,EAAkB;AAChB;AACD;;AACD,YAAM,KAAKH,WAAL,CAAiB+F,eAAjB,CAAiC,KAAKrF,WAAtC,CAAN;AACD,KAbD,CAaE,OAAOsC,KAAP,EAAc;AACd,WAAKhD,WAAL,CAAiBY,MAAjB,CAAwBoC,KAAxB,CAA+B,kBAAiB,KAAK/C,MAAO,EAA5D;AACA,YAAM+C,KAAN;AACD;AACF;;AAEDR,EAAAA,UAAU,CAACwD,OAAD,EAA0BC,IAA1B,EAAiD;AACzD,UAAMC,KAAK,GAAG,KAAKjF,QAAL,CAAcrB,GAAd,CAAkBoG,OAAlB,CAAd;;AACA,QAAI,OAAOE,KAAP,KAAiB,WAArB,EAAkC;AAChC,aAAOA,KAAK,CAACC,GAAN,CAAUF,IAAV,CAAP;AACD;;AACD,UAAMG,QAAQ,GAAG,IAAIzJ,MAAJ,CAAW;AAAE0J,MAAAA,WAAW,EAAE;AAAf,KAAX,CAAjB;AACA,UAAMjB,OAAO,GAAGgB,QAAQ,CAACD,GAAT,CAAaF,IAAb,CAAhB;AACA,SAAKhF,QAAL,CAAcpB,GAAd,CAAkBmG,OAAlB,EAA2BI,QAA3B;AACAA,IAAAA,QAAQ,CAACE,EAAT,CAAY,MAAZ,EAAoB,MAAM;AACxB,WAAKrF,QAAL,CAAcsB,MAAd,CAAqByD,OAArB;AACD,KAFD;AAGA,WAAOZ,OAAP;AACD;;AAEY,QAAPmB,OAAO,CAACC,IAAD,EAAcd,KAAd,EAA4BxF,OAAyE,GAAG,EAAxG,EAAkJ;AAC7J,UAAM,KAAK6B,MAAX,CAD6J,CAC1I;;AACnB,UAAM0E,eAAe,GAAG,OAAOvG,OAAO,CAACuG,eAAf,KAAmC,QAAnC,GAA8CvG,OAAO,CAACuG,eAAtD,GAAwE,IAAhG;AACA,UAAMC,WAAW,GAAG,OAAOxG,OAAO,CAACwG,WAAf,KAA+B,UAA/B,GAA4CxG,OAAO,CAACwG,WAApD,GAAkEhJ,YAAtF;AACA,UAAMiJ,SAAS,GAAGvG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBC,MAAM,CAACC,gBAAlC,CAAlB;AACA,WAAO,IAAI6E,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAMP,WAAW,GAAG,MAAM;AACxB,aAAK5D,kBAAL,CAAwBmB,MAAxB,CAA+BoE,SAA/B;AACArE,QAAAA,YAAY,CAACsE,OAAD,CAAZ;AACA,aAAK7B,cAAL,CAAoB,OAApB,EAA6BC,WAA7B;AACAO,QAAAA,MAAM,CAAC,IAAItH,iBAAJ,CAAuB,wBAAuBuI,IAAK,oBAAnD,CAAD,CAAN;AACD,OALD;;AAMA,YAAMI,OAAO,GAAGlE,UAAU,CAAC,MAAM;AAC/B,aAAKtB,kBAAL,CAAwBmB,MAAxB,CAA+BoE,SAA/B;AACA,aAAK5B,cAAL,CAAoB,OAApB,EAA6BC,WAA7B;AACAO,QAAAA,MAAM,CAAC,IAAI3H,mBAAJ,CAAyB,GAAE4I,IAAK,8BAA6BC,eAAgB,IAA7E,CAAD,CAAN;AACD,OAJyB,EAIvBA,eAJuB,CAA1B;;AAKA,YAAMI,cAAc,GAAG,CAACC,OAAD,EAAkBC,IAAlB,EAAgCC,IAAhC,KAAgD;AACrE,aAAK5F,kBAAL,CAAwBmB,MAAxB,CAA+BoE,SAA/B;AACArE,QAAAA,YAAY,CAACsE,OAAD,CAAZ;AACA,aAAK7B,cAAL,CAAoB,OAApB,EAA6BC,WAA7B;;AACA,YAAI8B,OAAJ,EAAa;AACXxB,UAAAA,OAAO,CAAC;AAAEyB,YAAAA,IAAF;AAAQC,YAAAA;AAAR,WAAD,CAAP;AACA;AACD;;AACDzB,QAAAA,MAAM,CAAC,IAAImB,WAAJ,CAAgBM,IAAhB,EAAsBD,IAAtB,CAAD,CAAN;AACD,OATD;;AAUA,WAAKnF,WAAL,CAAiB,OAAjB,EAA0BoD,WAA1B;AACA,WAAK5D,kBAAL,CAAwBvB,GAAxB,CAA4B8G,SAA5B,EAAuCE,cAAvC;AACA,WAAK7G,WAAL,CAAiBuG,OAAjB,CAAyB,KAAK7F,WAA9B,EAA2C;AAAEiG,QAAAA,SAAF;AAAaH,QAAAA,IAAb;AAAmBd,QAAAA;AAAnB,OAA3C;AACD,KAzBM,CAAP;AA0BD;;AAEDuB,EAAAA,mBAAmB,CAAC9H,QAAD,EAAkB;AACnC,UAAM+H,IAAI,GAAG,KAAKnG,OAAL,CAAanB,GAAb,CAAiBT,QAAjB,CAAb;;AACA,QAAI,OAAO+H,IAAP,KAAgB,WAApB,EAAiC;AAC/B,aAAO,KAAP;AACD;;AACD,WAAO,CAAC,CAACA,IAAI,CAACC,SAAd;AACD;;AAEkB,QAAb1E,aAAa,CAAC/C,MAAD,EAAgB;AACjC,UAAM;AAAER,MAAAA,MAAF;AAAUD,MAAAA,QAAV;AAAoBD,MAAAA,QAApB;AAA8BG,MAAAA,QAA9B;AAAwCJ,MAAAA;AAAxC,QAAuDW,MAA7D;AACA,UAAM0H,cAAc,GAAG,KAAKpG,gBAAL,CAAsBpB,GAAtB,CAA0BT,QAA1B,KAAuC,CAA9D;AACA,UAAMkI,cAAc,GAAGD,cAAc,GAAG,CAAjB,GAAqB,KAArB,GAA6B,QAAQA,cAAc,GAAGA,cAAzB,CAApD;;AACA,QAAIC,cAAc,GAAG,CAArB,EAAwB;AACtB,WAAKzG,MAAL,CAAYyB,IAAZ,CAAkB,uBAAsBjC,IAAI,CAACkH,KAAL,CAAWD,cAAc,GAAG,IAA5B,CAAkC,IAAGA,cAAc,KAAK,IAAnB,GAA0B,QAA1B,GAAqC,SAAU,eAAcD,cAAe,EAAzJ;AACA,YAAM,IAAI/B,OAAJ,CAAaC,OAAD,IAAa;AAC7B,cAAMsB,OAAO,GAAGlE,UAAU,CAAC,MAAM;AAC/B,eAAKqC,cAAL,CAAoB,OAApB,EAA6BC,WAA7B;AACA,eAAKD,cAAL,CAAoB,aAApB,EAAmCwC,iBAAnC;AACAjC,UAAAA,OAAO;AACR,SAJyB,EAIvB+B,cAJuB,CAA1B;;AAKA,cAAMrC,WAAW,GAAG,MAAM;AACxB1C,UAAAA,YAAY,CAACsE,OAAD,CAAZ;AACA,eAAK7B,cAAL,CAAoB,OAApB,EAA6BC,WAA7B;AACA,eAAKD,cAAL,CAAoB,aAApB,EAAmCwC,iBAAnC;AACAjC,UAAAA,OAAO;AACR,SALD;;AAMA,cAAMiC,iBAAiB,GAAG,CAAC;AAAExI,UAAAA,UAAU,EAAEyI;AAAd,SAAD,KAA0C;AAClE,cAAIzI,UAAU,KAAKyI,aAAnB,EAAkC;AAChC;AACD;;AACDlF,UAAAA,YAAY,CAACsE,OAAD,CAAZ;AACA,eAAK7B,cAAL,CAAoB,OAApB,EAA6BC,WAA7B;AACA,eAAKD,cAAL,CAAoB,aAApB,EAAmCwC,iBAAnC;AACAjC,UAAAA,OAAO;AACR,SARD;;AASA,aAAK1D,WAAL,CAAiB,OAAjB,EAA0BoD,WAA1B;AACA,aAAKpD,WAAL,CAAiB,aAAjB,EAAgC2F,iBAAhC;AACD,OAvBK,CAAN;;AAwBA,UAAI,CAAC,KAAK9H,SAAL,CAAe2C,GAAf,CAAmBrD,UAAnB,CAAL,EAAqC;AACnC;AACD;AACF;;AACD,UAAM0I,YAAY,GAAG,KAAK1G,OAAL,CAAanB,GAAb,CAAiBT,QAAjB,CAArB;AACA,UAAMe,OAAO,GAAGwH,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB;AAAEC,MAAAA,SAAS,EAAEzI,QAAQ,GAAG,KAAKA;AAA7B,KAAlB,EAA2D,KAAK0B,WAAhE,CAAhB;AACA,UAAMqG,IAAI,GAAGO,YAAY,IAAI,IAAI/K,UAAJ,CAAewD,OAAf,CAA7B;AACA,SAAKa,OAAL,CAAalB,GAAb,CAAiBV,QAAjB,EAA2B+H,IAA3B;AACA,SAAKlG,gBAAL,CAAsBnB,GAAtB,CAA0BV,QAA1B,EAAoCiI,cAAc,GAAG,CAArD;AACA,SAAKpD,IAAL,CAAU,MAAV,EAAkB;AAAE7E,MAAAA,QAAF;AAAY+H,MAAAA;AAAZ,KAAlB;;AACA,UAAMW,gBAAgB,GAAG,MAAM;AAC7B,WAAK7G,gBAAL,CAAsBnB,GAAtB,CAA0BV,QAA1B,EAAoC,CAApC;;AACA,YAAM2I,OAAO,GAAG,MAAM;AACpBZ,QAAAA,IAAI,CAACnC,cAAL,CAAoB,QAApB,EAA8BgD,YAA9B;AACAb,QAAAA,IAAI,CAACnC,cAAL,CAAoB,QAApB,EAA8BiD,YAA9B;AACAd,QAAAA,IAAI,CAACnC,cAAL,CAAoB,OAApB,EAA6BkD,eAA7B;AACAf,QAAAA,IAAI,CAACnC,cAAL,CAAoB,OAApB,EAA6BmD,eAA7B;AACAhB,QAAAA,IAAI,CAACnC,cAAL,CAAoB,eAApB,EAAqCoD,mBAArC;AACD,OAND;;AAOA,YAAMJ,YAAY,GAAG,MAAOtG,IAAP,IAAuB;AAC1C,YAAI;AACF,gBAAM,KAAK8E,OAAL,CAAazJ,MAAb,EAAqB;AAAEmC,YAAAA,QAAF;AAAYD,YAAAA,QAAZ;AAAsByC,YAAAA;AAAtB,WAArB,EAAmD;AAAEiF,YAAAA,WAAW,EAAE3I;AAAf,WAAnD,CAAN;AACD,SAFD,CAEE,OAAOiF,KAAP,EAAc;AACd,eAAKpC,MAAL,CAAYoC,KAAZ,CAAmB,yBAAwB9D,MAAO,WAAUC,QAAS,SAArE;AACA,eAAKyB,MAAL,CAAYqC,UAAZ,CAAuBD,KAAvB;AACD;AACF,OAPD;;AAQA,YAAMgF,YAAY,GAAII,MAAD,IAAwB;AAC3C,YAAI,CAAC,KAAKxF,gBAAL,CAAsBR,GAAtB,CAA0BjD,QAA1B,CAAL,EAA0C;AACxC,eAAKyB,MAAL,CAAYoC,KAAZ,CAAmB,uDAAsD9D,MAAO,WAAUC,QAAS,EAAnG;AACAiJ,UAAAA,MAAM,CAACC,SAAP,GAAmBC,OAAnB,CAA4BC,KAAD,IAAW;AACpCA,YAAAA,KAAK,CAACC,IAAN;AACAD,YAAAA,KAAK,CAACE,aAAN,CAAoB,IAAIC,KAAJ,CAAU,MAAV,CAApB;AACD,WAHD;AAIA;AACD;;AACD,aAAK1E,IAAL,CAAU,QAAV,EAAoB;AAAEoE,UAAAA,MAAF;AAAUlJ,UAAAA,MAAV;AAAkBD,UAAAA,QAAlB;AAA4BD,UAAAA,QAA5B;AAAsCG,UAAAA;AAAtC,SAApB;AACD,OAVD;;AAWA,YAAM+I,eAAe,GAAG,MAAM;AAC5B,aAAKtH,MAAL,CAAYyB,IAAZ,CAAkB,0BAAyBnD,MAAO,WAAUC,QAAS,EAArE;AACA2I,QAAAA,OAAO;AACP,aAAK9D,IAAL,CAAU,YAAV,EAAwB;AAAE9E,UAAAA,MAAF;AAAUD,UAAAA,QAAV;AAAoBD,UAAAA,QAApB;AAA8BG,UAAAA;AAA9B,SAAxB;;AACA,YAAI,KAAK4B,OAAL,CAAaqB,GAAb,CAAiBjD,QAAjB,CAAJ,EAAgC;AAC9B,eAAK4B,OAAL,CAAawB,MAAb,CAAoBpD,QAApB;AACA,eAAKsD,aAAL,CAAmB/C,MAAnB;AACA,eAAKkB,MAAL,CAAY+H,IAAZ,CAAkB,wBAAuBzJ,MAAO,WAAUC,QAAS,EAAnE;AACD;AACF,OATD;;AAUA,YAAM8I,eAAe,GAAIjF,KAAD,IAAiB;AACvC,aAAKpC,MAAL,CAAYoC,KAAZ,CAAmB,+BAA8B9D,MAAO,WAAUC,QAAS,EAA3E;AACA,aAAKyB,MAAL,CAAYqC,UAAZ,CAAuBD,KAAvB;AACA,aAAKgB,IAAL,CAAU,WAAV,EAAuB;AAAE9E,UAAAA,MAAF;AAAUD,UAAAA,QAAV;AAAoBD,UAAAA,QAApB;AAA8BG,UAAAA,QAA9B;AAAwC6D,UAAAA;AAAxC,SAAvB;AACD,OAJD;;AAKA,YAAMmF,mBAAmB,GAAG,MAAM;AAChC,aAAKvH,MAAL,CAAYyB,IAAZ,CAAkB,uBAAsBnD,MAAO,WAAUC,QAAS,EAAlE;AACA2I,QAAAA,OAAO;AACR,OAHD;;AAIAZ,MAAAA,IAAI,CAACtF,WAAL,CAAiB,QAAjB,EAA2BmG,YAA3B;AACAb,MAAAA,IAAI,CAACtF,WAAL,CAAiB,QAAjB,EAA2BoG,YAA3B;AACAd,MAAAA,IAAI,CAACtF,WAAL,CAAiB,OAAjB,EAA0BsG,eAA1B;AACAhB,MAAAA,IAAI,CAACtF,WAAL,CAAiB,OAAjB,EAA0BqG,eAA1B;AACAf,MAAAA,IAAI,CAACtF,WAAL,CAAiB,eAAjB,EAAkCuG,mBAAlC;AACD,KApDD;;AAqDA,QAAIjB,IAAI,CAACC,SAAT,EAAoB;AAClBD,MAAAA,IAAI,CAAClD,IAAL,CAAU,eAAV;AACA6D,MAAAA,gBAAgB;AAChB,WAAK7D,IAAL,CAAU,SAAV,EAAqB;AAAE9E,QAAAA,MAAF;AAAUC,QAAAA,QAAV;AAAoBF,QAAAA,QAApB;AAA8BD,QAAAA,QAA9B;AAAwCkI,QAAAA;AAAxC,OAArB;AACA;AACD;;AACD,UAAM,IAAI7B,OAAJ,CAAaC,OAAD,IAAa;AAC7B,YAAMwC,OAAO,GAAG,MAAM;AACpBxF,QAAAA,YAAY,CAACsE,OAAD,CAAZ;AACAM,QAAAA,IAAI,CAACnC,cAAL,CAAoB,OAApB,EAA6BkD,eAA7B;AACAf,QAAAA,IAAI,CAACnC,cAAL,CAAoB,OAApB,EAA6BmD,eAA7B;AACAhB,QAAAA,IAAI,CAACnC,cAAL,CAAoB,SAApB,EAA+B6D,aAA/B;AACA1B,QAAAA,IAAI,CAACnC,cAAL,CAAoB,QAApB,EAA8BgD,YAA9B;AACA,aAAKhD,cAAL,CAAoB,OAApB,EAA6BC,WAA7B;AACA,aAAKD,cAAL,CAAoB,aAApB,EAAmCwC,iBAAnC;AACD,OARD;;AASA,YAAMX,OAAO,GAAGlE,UAAU,CAAC,MAAM;AAC/BoF,QAAAA,OAAO;AACPxC,QAAAA,OAAO;AACR,OAHyB,EAGvB,IAHuB,CAA1B;;AAIA,YAAMsD,aAAa,GAAG,MAAM;AAC1Bd,QAAAA,OAAO;AACPD,QAAAA,gBAAgB;AAChB,aAAK7D,IAAL,CAAU,SAAV,EAAqB;AAAE9E,UAAAA,MAAF;AAAUC,UAAAA,QAAV;AAAoBF,UAAAA,QAApB;AAA8BD,UAAAA,QAA9B;AAAwCkI,UAAAA;AAAxC,SAArB;AACA5B,QAAAA,OAAO;AACR,OALD;;AAMA,YAAMyC,YAAY,GAAG,MAAOtG,IAAP,IAAuB;AAC1C,YAAI;AACF,gBAAM,KAAK8E,OAAL,CAAazJ,MAAb,EAAqB;AAAEmC,YAAAA,QAAF;AAAYD,YAAAA,QAAZ;AAAsByC,YAAAA;AAAtB,WAArB,EAAmD;AAAEiF,YAAAA,WAAW,EAAE3I;AAAf,WAAnD,CAAN;AACD,SAFD,CAEE,OAAOiF,KAAP,EAAc;AACd,eAAKpC,MAAL,CAAYoC,KAAZ,CAAmB,yBAAwB9D,MAAO,WAAUC,QAAS,SAArE;AACA,eAAKyB,MAAL,CAAYqC,UAAZ,CAAuBD,KAAvB;AACD;AACF,OAPD;;AAQA,YAAMgC,WAAW,GAAG,MAAM;AACxB8C,QAAAA,OAAO;AACPxC,QAAAA,OAAO;AACR,OAHD;;AAIA,YAAM4C,eAAe,GAAG,MAAM;AAC5B,aAAKtH,MAAL,CAAYyB,IAAZ,CAAkB,sBAAqBnD,MAAO,WAAUC,QAAS,SAAjE;AACA2I,QAAAA,OAAO;;AACP,YAAI,KAAK/G,OAAL,CAAaqB,GAAb,CAAiBjD,QAAjB,CAAJ,EAAgC;AAC9B,eAAK4B,OAAL,CAAawB,MAAb,CAAoBpD,QAApB;AACA,eAAKsD,aAAL,CAAmB/C,MAAnB;AACA,eAAKkB,MAAL,CAAY+H,IAAZ,CAAkB,wBAAuBzJ,MAAO,WAAUC,QAAS,EAAnE;AACD;;AACDmG,QAAAA,OAAO;AACR,OATD;;AAUA,YAAM2C,eAAe,GAAIjF,KAAD,IAAiB;AACvC8E,QAAAA,OAAO;AACP,aAAKlH,MAAL,CAAYoC,KAAZ,CAAmB,uBAAsB9D,MAAO,EAAhD;AACA,aAAK0B,MAAL,CAAYqC,UAAZ,CAAuBD,KAAvB;AACA,aAAKgB,IAAL,CAAU,WAAV,EAAuB;AAAE9E,UAAAA,MAAF;AAAUD,UAAAA,QAAV;AAAoBD,UAAAA,QAApB;AAA8BG,UAAAA,QAA9B;AAAwC6D,UAAAA;AAAxC,SAAvB;AACA,aAAKgB,IAAL,CAAU,OAAV,EAAmBhB,KAAnB;AACAsC,QAAAA,OAAO;AACR,OAPD;;AAQA,YAAMiC,iBAAiB,GAAG,CAAC;AAAExI,QAAAA,UAAU,EAAEyI;AAAd,OAAD,KAA0C;AAClE,YAAIzI,UAAU,KAAKyI,aAAnB,EAAkC;AAChC;AACD;;AACDM,QAAAA,OAAO;AACP,aAAKlH,MAAL,CAAY+H,IAAZ,CAAkB,6BAA4BzJ,MAAO,WAAUC,QAAS,iDAAxE;AACAmG,QAAAA,OAAO;AACR,OAPD;;AAQA4B,MAAAA,IAAI,CAACtF,WAAL,CAAiB,OAAjB,EAA0BqG,eAA1B;AACAf,MAAAA,IAAI,CAACtF,WAAL,CAAiB,OAAjB,EAA0BsG,eAA1B;AACAhB,MAAAA,IAAI,CAACtF,WAAL,CAAiB,SAAjB,EAA4BgH,aAA5B;AACA1B,MAAAA,IAAI,CAACtF,WAAL,CAAiB,QAAjB,EAA2BmG,YAA3B;AACA,WAAKnG,WAAL,CAAiB,OAAjB,EAA0BoD,WAA1B;AACA,WAAKpD,WAAL,CAAiB,aAAjB,EAAgC2F,iBAAhC;AACA,YAAMsB,WAAW,GAAG,KAAKxH,cAAL,CAAoBzB,GAApB,CAAwBT,QAAxB,CAApB;;AACA,UAAI2J,KAAK,CAACC,OAAN,CAAcF,WAAd,CAAJ,EAAgC;AAC9B,eAAOA,WAAW,CAACG,MAAZ,GAAqB,CAA5B,EAA+B;AAC7B,gBAAMvH,IAAI,GAAGoH,WAAW,CAACI,KAAZ,EAAb;AACA/B,UAAAA,IAAI,CAACgC,MAAL,CAAYzH,IAAZ;AACD;AACF;AACF,KAvEK,CAAN;AAwED;;AAEc,QAAT0H,SAAS,CAAChK,QAAD,EAAkBiJ,MAAlB,EAAsC;AACnD,UAAMlB,IAAI,GAAG,MAAM,KAAKkC,gBAAL,CAAsBjK,QAAtB,CAAnB;AACA+H,IAAAA,IAAI,CAACiC,SAAL,CAAef,MAAf;AACD;;AAEiB,QAAZiB,YAAY,CAAClK,QAAD,EAAkBiJ,MAAlB,EAAsC;AACtD,UAAMlB,IAAI,GAAG,MAAM,KAAKkC,gBAAL,CAAsBjK,QAAtB,CAAnB;AACA+H,IAAAA,IAAI,CAACmC,YAAL,CAAkBjB,MAAlB;AACD;;AAEuB,QAAlBzF,kBAAkB,CAAC;AAAExD,IAAAA;AAAF,GAAD,EAAsB;AAC5C,UAAM+H,IAAI,GAAG,KAAKnG,OAAL,CAAanB,GAAb,CAAiBT,QAAjB,CAAb;;AACA,QAAI,OAAO+H,IAAP,KAAgB,WAApB,EAAiC;AAC/B;AACD;;AACD,SAAKnG,OAAL,CAAawB,MAAb,CAAoBpD,QAApB;AACA+H,IAAAA,IAAI,CAACoC,OAAL;AACD;;AAEW,QAANC,MAAM,GAAG;AACb,WAAO,KAAKtI,QAAL,CAAc4B,IAAd,GAAqB,CAA5B,EAA+B;AAC7B,WAAK,MAAMqD,KAAX,IAAoB,KAAKjF,QAAL,CAActC,MAAd,EAApB,EAA4C;AAC1C,cAAMuH,KAAK,CAACqD,MAAN,EAAN;AACD,OAH4B,CAI7B;;;AACA,YAAM,IAAIlE,OAAJ,CAAaC,OAAD,IAAakE,cAAc,CAAClE,OAAD,CAAvC,CAAN;AACD;AACF;;AAEDmE,EAAAA,cAAc,GAAG;AACf,UAAM/E,gBAAgB,GAAG,KAAKA,gBAA9B;AACA,WAAO,KAAKA,gBAAZ;AACA,WAAO,KAAKC,eAAZ;;AACA,QAAI,OAAOD,gBAAP,KAA4B,QAAhC,EAA0C;AACxC,WAAKnD,qBAAL,CAA2BgB,MAA3B,CAAkCmC,gBAAlC;AACD;AACF;;AAEDgF,EAAAA,eAAe,GAAG;AAChB,QAAI,CAAC,KAAKtK,SAAV,EAAqB;AACnB,aAAO,KAAP;AACD;;AACD,WAAO,KAAKsF,gBAAL,KAA0B,KAAKtF,SAAtC;AACD;;AAEoB,QAAfuK,eAAe,CAACzK,MAAD,EAAgBgB,OAA4F,GAAG,EAA/G,EAAmH;AACtI,UAAM;AAAEuB,MAAAA,IAAF;AAAQgF,MAAAA,eAAe,GAAG,KAA1B;AAAiCmD,MAAAA;AAAjC,QAAwD1J,OAA9D;AACA,UAAMgG,KAAK,GAAG,KAAKjF,QAAL,CAAcrB,GAAd,CAAkBxC,aAAlB,CAAd;;AACA,QAAI,OAAO8I,KAAP,KAAiB,WAArB,EAAkC;AAChC,YAAMA,KAAK,CAACqD,MAAN,EAAN;AACD;;AACD,UAAMM,YAAY,GAAG,KAAKzK,SAAL,KAAmB,QAAxC,CANsI,CAOtI;;AACA,UAAMA,SAAS,GAAG,KAAKA,SAAL,IAAkB0K,UAAU,CAACC,MAAX,CAAkBC,UAAlB,EAApC,CARsI,CAQlE;;AACpE,QAAIH,YAAJ,EAAkB;AAChB,YAAM,KAAKtD,OAAL,CAAarJ,iBAAb,EAAgC;AAAEgC,QAAAA,MAAF;AAAUE,QAAAA,SAAV;AAAqBqC,QAAAA;AAArB,OAAhC,EAA6D;AAAEiF,QAAAA,WAAW,EAAExI;AAAf,OAA7D,CAAN;AACD,KAFD,MAEO;AACL,YAAM+L,2BAA2B,GAAG,MAAOtL,MAAP,IAAkB;AACpD,YAAIA,MAAM,CAACO,MAAP,KAAkBA,MAAtB,EAA8B;AAC5B,iBAAO,CAAC,IAAD,EAAO,GAAP,EAAY,YAAZ,CAAP;AACD;;AACD,YAAI,OAAO0K,kBAAP,KAA8B,UAAlC,EAA8C;AAC5C,iBAAOA,kBAAkB,CAACjL,MAAD,CAAzB;AACD;;AACD,eAAO,CAAC,IAAD,EAAO,GAAP,EAAY,YAAZ,CAAP;AACD,OARD;;AASA,YAAM,KAAKkG,YAAL,CAAkBzF,SAAlB,EAA6B6K,2BAA7B,CAAN;AACA,YAAM,KAAK1D,OAAL,CAAarJ,iBAAb,EAAgC;AAAEgC,QAAAA,MAAF;AAAUE,QAAAA,SAAV;AAAqBqC,QAAAA;AAArB,OAAhC,EAA6D;AAAEiF,QAAAA,WAAW,EAAExI;AAAf,OAA7D,CAAN;AACD;;AACD,UAAM,IAAImH,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACrC,YAAMuC,OAAO,GAAG,MAAM;AACpBxF,QAAAA,YAAY,CAACsE,OAAD,CAAZ;AACA,aAAK7B,cAAL,CAAoB,aAApB,EAAmCmF,iBAAnC;AACA,aAAKnF,cAAL,CAAoB,OAApB,EAA6BC,WAA7B;AACA,aAAKD,cAAL,CAAoB,OAApB,EAA6BoF,WAA7B;AACA,aAAKpF,cAAL,CAAoB,SAApB,EAA+BqF,aAA/B;AACA,aAAKrF,cAAL,CAAoB,aAApB,EAAmCwC,iBAAnC;AACA,aAAKpG,uBAAL,CAA6BoB,MAA7B,CAAqC,GAAErD,MAAO,IAAGE,SAAU,EAA3D;AACD,OARD;;AASA,YAAM2D,YAAY,GAAG,YAAY;AAC/B,YAAI8G,YAAJ,EAAkB;AAChB;AACD;;AACD,YAAI;AACF,gBAAM,KAAK9G,YAAL,EAAN;AACD,SAFD,CAEE,OAAOC,KAAP,EAAc;AACd,eAAKpC,MAAL,CAAYoC,KAAZ,CAAkB,8CAAlB;AACA,eAAKpC,MAAL,CAAYqC,UAAZ,CAAuBD,KAAvB;AACD;AACF,OAVD;;AAWA,YAAM4D,OAAO,GAAGlE,UAAU,CAAC,YAAY;AACrCoF,QAAAA,OAAO;AACP,cAAM/E,YAAY,EAAlB;AACAwC,QAAAA,MAAM,CAAC,IAAIlH,sBAAJ,CAA4B,8BAA6B+B,IAAI,CAACkH,KAAL,CAAWb,eAAe,GAAG,GAA7B,IAAoC,EAAG,UAAhG,CAAD,CAAN;AACD,OAJyB,EAIvBA,eAJuB,CAA1B;;AAKA,YAAMyD,iBAAiB,GAAIxK,MAAD,IAAoB;AAC5C,YAAIA,MAAM,CAACN,SAAP,KAAqBA,SAAzB,EAAoC;AAClC;AACD;;AACD,YAAIM,MAAM,CAACR,MAAP,KAAkBA,MAAtB,EAA8B;AAC5B;AACD;;AACD4I,QAAAA,OAAO;AACPxC,QAAAA,OAAO;AACR,OATD,CA1BqC,CAoCrC;;;AACA,YAAMiC,iBAAiB,GAAG,MAAO7H,MAAP,IAA0B;AAClD,YAAIA,MAAM,CAACR,MAAP,KAAkB,KAAKA,MAA3B,EAAmC;AACjC;AACD;;AACD,YAAImL,qBAAqB,GAAG,IAA5B;;AACA,aAAK,MAAMlI,UAAX,IAAyB,KAAK1C,SAAL,CAAed,MAAf,EAAzB,EAAkD;AAChD,cAAIwD,UAAU,CAACjD,MAAX,KAAsB,KAAKA,MAA/B,EAAuC;AACrC;AACD;;AACD,cAAIiD,UAAU,CAAChD,QAAX,KAAwB,KAAKA,QAAjC,EAA2C;AACzC;AACD;;AACDkL,UAAAA,qBAAqB,GAAG,KAAxB;AACD;;AACD,YAAIA,qBAAJ,EAA2B;AACzBvC,UAAAA,OAAO;AACP,gBAAM/E,YAAY,EAAlB;AACAwC,UAAAA,MAAM,CAAC,IAAInH,oBAAJ,CAA0B,QAAOc,MAAO,uCAAxC,CAAD,CAAN;AACD;AACF,OAnBD;;AAoBA,YAAMkL,aAAa,GAAI7G,YAAD,IAAiC;AACrD,YAAIA,YAAY,KAAKnE,SAArB,EAAgC;AAC9B;AACD;;AACD0I,QAAAA,OAAO;AACPxC,QAAAA,OAAO;AACR,OAND;;AAOA,YAAMN,WAAW,GAAG,MAAM;AACxB8C,QAAAA,OAAO;AACPvC,QAAAA,MAAM,CAAC,IAAItH,iBAAJ,CAAsB,sBAAtB,CAAD,CAAN;AACD,OAHD;;AAIA,YAAMqM,aAAa,GAAG,YAAY;AAChCxC,QAAAA,OAAO;AACP,cAAM/E,YAAY,EAAlB;AACAwC,QAAAA,MAAM,CAAC,IAAIpH,uBAAJ,CAA4B,qBAA5B,CAAD,CAAN;AACD,OAJD;;AAKA,YAAMgM,WAAW,GAAG,MAAOlG,UAAP,IAA6B;AAC/C,YAAI/E,MAAM,KAAK+E,UAAf,EAA2B;AACzB;AACD;;AACD6D,QAAAA,OAAO;AACP,cAAM/E,YAAY,EAAlB;AACAwC,QAAAA,MAAM,CAAC,IAAInH,oBAAJ,CAA0B,QAAOc,MAAO,uCAAxC,CAAD,CAAN;AACD,OAPD;;AAQA,WAAKiC,uBAAL,CAA6BtB,GAA7B,CAAkC,GAAEX,MAAO,IAAGE,SAAS,IAAI,EAAG,EAA9D,EAAiEkL,aAAjE;AACA,WAAK1I,WAAL,CAAiB,aAAjB,EAAgCsI,iBAAhC;AACA,WAAKtI,WAAL,CAAiB,OAAjB,EAA0BoD,WAA1B;AACA,WAAKpD,WAAL,CAAiB,OAAjB,EAA0BuI,WAA1B;AACA,WAAKvI,WAAL,CAAiB,SAAjB,EAA4BwI,aAA5B;;AACA,UAAI,KAAKlL,MAAL,KAAgBA,MAApB,EAA4B;AAC1B,aAAK0C,WAAL,CAAiB,aAAjB,EAAgC2F,iBAAhC;AACD;AACF,KAzFK,CAAN;AA0FD;;AAEiB,QAAZ1C,YAAY,CAACzF,SAAD,EAAmBwK,kBAAnB,EAA4D;AAC5E,UAAM,KAAKpH,UAAL,CAAgBpF,aAAhB,EAA+B,MAAM,KAAKmJ,OAAL,CAAaxJ,aAAb,EAA4B;AAAEqC,MAAAA;AAAF,KAA5B,EAA2C;AAAEsH,MAAAA,WAAW,EAAE/I;AAAf,KAA3C,CAArC,CAAN;AACA,SAAK8L,cAAL;AACA,SAAK/E,gBAAL,GAAwBtF,SAAxB;;AACA,QAAI,OAAOwK,kBAAP,KAA8B,UAAlC,EAA8C;AAC5C,WAAKrI,qBAAL,CAA2B1B,GAA3B,CAA+BT,SAA/B,EAA0CwK,kBAA1C;AACD,KAFD,MAEO;AACL,WAAKrI,qBAAL,CAA2B1B,GAA3B,CAA+BT,SAA/B,EAA0C,MAAM,CAAC,IAAD,EAAO,GAAP,EAAY,YAAZ,CAAhD;AACD;AACF;;AAEDmL,EAAAA,cAAc,GAAG;AACf,QAAI,CAAC,KAAKnL,SAAV,EAAqB;AACnB,aAAO,KAAP;AACD;;AACD,WAAO,KAAKuF,eAAL,KAAyB,KAAKvF,SAArC;AACD;;AAEgB,QAAX8C,WAAW,CAAC9C,SAAD,EAAmBqH,eAAwB,GAAG,KAA9C,EAAqD;AACpE,UAAM,KAAKjE,UAAL,CAAgBpF,aAAhB,EAA+B,MAAM,KAAKmJ,OAAL,CAAatJ,YAAb,EAA2B;AAAEmC,MAAAA,SAAF;AAAaqH,MAAAA;AAAb,KAA3B,EAA2D;AAAEC,MAAAA,WAAW,EAAE7I;AAAf,KAA3D,CAArC,CAAN;AACA,SAAK4L,cAAL;AACA,SAAK9E,eAAL,GAAuBvF,SAAvB;AACD;;AAEiB,QAAZ2D,YAAY,GAAG;AACnB,QAAI;AACF,YAAM,KAAKP,UAAL,CAAgBpF,aAAhB,EAA+B,MAAM,KAAKmJ,OAAL,CAAavJ,aAAb,EAA4B,EAA5B,EAAgC;AAAE0J,QAAAA,WAAW,EAAE5I;AAAf,OAAhC,CAArC,CAAN;AACA,WAAK2L,cAAL;AACD,KAHD,CAGE,OAAOzG,KAAP,EAAc;AACd,UAAIA,KAAK,YAAY/E,iBAArB,EAAwC;AACtC;AACD;;AACD,YAAM+E,KAAN;AACD;AACF;;AAEkB,QAAb8C,aAAa,CAAC0E,OAAD,EAA4D;AAC7E,QAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,WAAK5J,MAAL,CAAYoC,KAAZ,CAAkB,wBAAlB;AACA,WAAKpC,MAAL,CAAYoC,KAAZ,CAAkByH,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACA;AACD;;AACD,UAAM;AAAE7D,MAAAA,SAAF;AAAaH,MAAAA,IAAb;AAAmBd,MAAAA;AAAnB,QAA6B8E,OAAnC;;AACA,QAAI,OAAOhE,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAK5F,MAAL,CAAYoC,KAAZ,CAAkB,kEAAlB;AACA,WAAKpC,MAAL,CAAYoC,KAAZ,CAAkByH,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACA;AACD;;AACD,QAAI,OAAO9E,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAK9E,MAAL,CAAYoC,KAAZ,CAAkB,mEAAlB;AACA,WAAKpC,MAAL,CAAYoC,KAAZ,CAAkByH,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACA;AACD;;AACD,QAAIhE,IAAI,KAAKhJ,QAAT,IAAqB,OAAOmJ,SAAP,KAAqB,QAA9C,EAAwD;AACtD,YAAMgE,QAAQ,GAAG,KAAKvJ,kBAAL,CAAwBxB,GAAxB,CAA4B+G,SAA5B,CAAjB;;AACA,UAAI,OAAOgE,QAAP,KAAoB,UAAxB,EAAoC;AAClC,aAAK/J,MAAL,CAAYoC,KAAZ,CAAmB,wBAAuB2D,SAAU,iBAApD;AACA;AACD;;AACD,YAAM;AAAEG,QAAAA,OAAF;AAAWC,QAAAA,IAAX;AAAiBC,QAAAA;AAAjB,UAA0BtB,KAAhC;;AACA,UAAI,OAAOoB,OAAP,KAAmB,SAAvB,EAAkC;AAChC,aAAKlG,MAAL,CAAYoC,KAAZ,CAAkB,8DAAlB;AACA,aAAKpC,MAAL,CAAYoC,KAAZ,CAAkByH,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACAG,QAAAA,QAAQ,CAAC,KAAD,EAAQ,GAAR,EAAa,8DAAb,CAAR;AACA;AACD;;AACD,UAAI,OAAO5D,IAAP,KAAgB,QAApB,EAA8B;AAC5B,aAAKnG,MAAL,CAAYoC,KAAZ,CAAkB,2DAAlB;AACA,aAAKpC,MAAL,CAAYoC,KAAZ,CAAkByH,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACAG,QAAAA,QAAQ,CAAC,KAAD,EAAQ,GAAR,EAAa,2DAAb,CAAR;AACA;AACD;;AACD,UAAI,OAAO3D,IAAP,KAAgB,QAApB,EAA8B;AAC5B,aAAKpG,MAAL,CAAYoC,KAAZ,CAAkB,2DAAlB;AACA,aAAKpC,MAAL,CAAYoC,KAAZ,CAAkByH,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACAG,QAAAA,QAAQ,CAAC,KAAD,EAAQ,GAAR,EAAa,2DAAb,CAAR;AACA;AACD;;AACDA,MAAAA,QAAQ,CAAC7D,OAAD,EAAUC,IAAV,EAAgBC,IAAhB,CAAR;AACA;AACD;;AACD,YAAQR,IAAR;AACE,WAAK1J,MAAL;AACE,YAAI;AACF,gBAAM;AACJqC,YAAAA,QADI;AAEJF,YAAAA,QAFI;AAGJD,YAAAA,QAHI;AAIJyC,YAAAA;AAJI,cAKFiE,KALJ;;AAMA,cAAI,OAAOzG,QAAP,KAAoB,QAAxB,EAAkC;AAChC,iBAAK2B,MAAL,CAAYoC,KAAZ,CAAkB,+CAAlB;AACA,iBAAKpC,MAAL,CAAYoC,KAAZ,CAAkByH,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACA;AACD;;AACD,cAAI,OAAOxL,QAAP,KAAoB,QAAxB,EAAkC;AAChC,iBAAK4B,MAAL,CAAYoC,KAAZ,CAAkB,+CAAlB;AACA,iBAAKpC,MAAL,CAAYoC,KAAZ,CAAkByH,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACA;AACD;;AACD,cAAI,OAAO/I,IAAP,KAAgB,QAApB,EAA8B;AAC5B,iBAAKb,MAAL,CAAYoC,KAAZ,CAAkB,mDAAlB;AACA,iBAAKpC,MAAL,CAAYoC,KAAZ,CAAkByH,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACA;AACD;;AACD,gBAAMtD,IAAI,GAAG,KAAKnG,OAAL,CAAanB,GAAb,CAAiBT,QAAjB,CAAb;;AACA,cAAI,OAAO+H,IAAP,KAAgB,WAApB,EAAiC;AAC/B,kBAAM2B,WAAW,GAAG,KAAKxH,cAAL,CAAoBzB,GAApB,CAAwBT,QAAxB,CAApB;;AACA,gBAAI2J,KAAK,CAACC,OAAN,CAAcF,WAAd,CAAJ,EAAgC;AAC9BA,cAAAA,WAAW,CAAC+B,IAAZ,CAAiBnJ,IAAjB;AACA;AACD;;AACD,iBAAKJ,cAAL,CAAoBxB,GAApB,CAAwBV,QAAxB,EAAkC,CAACsC,IAAD,CAAlC;AACA;AACD;;AACD,cAAIyF,IAAI,CAAC2D,SAAL,IAAkB3D,IAAI,CAAC4D,UAA3B,EAAuC;AACrC;AACD;;AACD5D,UAAAA,IAAI,CAACgC,MAAL,CAAYzH,IAAZ;AACD,SApCD,CAoCE,OAAOuB,KAAP,EAAc;AACd,eAAKpC,MAAL,CAAYoC,KAAZ,CAAkB,kCAAlB;AACA,eAAKpC,MAAL,CAAYqC,UAAZ,CAAuBD,KAAvB;AACD;;AACD;;AACF,WAAK7F,yBAAL;AACE,YAAI;AACF,gBAAM;AACJ+B,YAAAA,MADI;AAEJE,YAAAA;AAFI,cAGFsG,KAHJ;;AAIA,cAAI,OAAOxG,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,iBAAK0B,MAAL,CAAYoC,KAAZ,CAAkB,qDAAlB;AACA,iBAAKpC,MAAL,CAAYoC,KAAZ,CAAkByH,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACA;AACD;;AACD,cAAI,OAAOpL,SAAP,KAAqB,QAAzB,EAAmC;AACjC,iBAAKwB,MAAL,CAAYoC,KAAZ,CAAkB,wDAAlB;AACA,iBAAKpC,MAAL,CAAYoC,KAAZ,CAAkByH,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACA;AACD;;AACD,gBAAMO,WAAW,GAAI,GAAE7L,MAAO,IAAGE,SAAU,EAA3C;AACA,gBAAM4L,oBAAoB,GAAG,KAAK7J,uBAAL,CAA6BvB,GAA7B,CAAiCmL,WAAjC,CAA7B;;AACA,cAAI,OAAOC,oBAAP,KAAgC,UAApC,EAAgD;AAC9CA,YAAAA,oBAAoB;AACrB;AACF,SApBD,CAoBE,OAAOhI,KAAP,EAAc;AACd,eAAKpC,MAAL,CAAYoC,KAAZ,CAAkB,0CAAlB;AACA,eAAKpC,MAAL,CAAYqC,UAAZ,CAAuBD,KAAvB;AACD;;AACD;;AACF,WAAK3F,0BAAL;AACE,YAAI;AACF,gBAAM;AACJ6B,YAAAA,MADI;AAEJE,YAAAA;AAFI,cAGFsG,KAHJ;;AAIA,cAAI,OAAOxG,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,iBAAK0B,MAAL,CAAYoC,KAAZ,CAAkB,yDAAlB;AACA,iBAAKpC,MAAL,CAAYoC,KAAZ,CAAkByH,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACA;AACD;;AACD,cAAI,OAAOpL,SAAP,KAAqB,QAAzB,EAAmC;AACjC,iBAAKwB,MAAL,CAAYoC,KAAZ,CAAkB,4DAAlB;AACA,iBAAKpC,MAAL,CAAYoC,KAAZ,CAAkByH,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACA;AACD;;AACD,gBAAMO,WAAW,GAAI,GAAE7L,MAAO,IAAGE,SAAU,EAA3C;AACA,gBAAM6L,QAAQ,GAAG,KAAKzJ,qBAAL,CAA2B5B,GAA3B,CAA+BmL,WAA/B,CAAjB;;AACA,cAAI,CAACjC,KAAK,CAACC,OAAN,CAAckC,QAAd,CAAL,EAA8B;AAC5B,iBAAKrK,MAAL,CAAY+H,IAAZ,CAAkB,iDAAgDzJ,MAAO,gBAAeE,SAAU,0BAAlG;AACA;AACD;;AACD,eAAKwB,MAAL,CAAY+H,IAAZ,CAAkB,0CAAyCzJ,MAAO,gBAAeE,SAAU,EAA3F;AACA6L,UAAAA,QAAQ,CAAC,CAAD,CAAR,CAAYC,KAAZ;AACD,SAvBD,CAuBE,OAAOlI,KAAP,EAAc;AACd,eAAKpC,MAAL,CAAYoC,KAAZ,CAAkB,8CAAlB;AACA,eAAKpC,MAAL,CAAYqC,UAAZ,CAAuBD,KAAvB;AACD;;AACD;;AACF,WAAK1F,oBAAL;AACE,YAAI;AACF,gBAAM;AACJ4B,YAAAA,MADI;AAEJE,YAAAA;AAFI,cAGFsG,KAHJ;;AAIA,cAAI,OAAOxG,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,iBAAK0B,MAAL,CAAYoC,KAAZ,CAAkB,mDAAlB;AACA,iBAAKpC,MAAL,CAAYoC,KAAZ,CAAkByH,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACA;AACD;;AACD,cAAI,OAAOpL,SAAP,KAAqB,QAAzB,EAAmC;AACjC,iBAAKwB,MAAL,CAAYoC,KAAZ,CAAkB,sDAAlB;AACA,iBAAKpC,MAAL,CAAYoC,KAAZ,CAAkByH,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACA;AACD;;AACD,gBAAMO,WAAW,GAAI,GAAE7L,MAAO,IAAGE,SAAU,EAA3C;AACA,gBAAM6L,QAAQ,GAAG,KAAKzJ,qBAAL,CAA2B5B,GAA3B,CAA+BmL,WAA/B,CAAjB;;AACA,cAAIjC,KAAK,CAACC,OAAN,CAAckC,QAAd,CAAJ,EAA6B;AAC3B,iBAAKrK,MAAL,CAAY+H,IAAZ,CAAkB,iCAAgCzJ,MAAO,gBAAeE,SAAU,iBAAlF;AACA,kBAAM6L,QAAQ,CAAC,CAAD,CAAd;AACA;AACD;;AACD,gBAAMrB,kBAAkB,GAAG,KAAKrI,qBAAL,CAA2B3B,GAA3B,CAA+BR,SAA/B,CAA3B;;AACA,cAAI,OAAOwK,kBAAP,KAA8B,UAAlC,EAA8C;AAC5C,iBAAKhJ,MAAL,CAAYoC,KAAZ,CAAmB,uBAAsB5D,SAAU,iBAAnD;AACA;AACD;;AACD,gBAAM+L,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACAD,UAAAA,eAAe,CAACjC,MAAhB,CAAuBmC,gBAAvB,CAAwC,OAAxC,EAAiD,MAAM;AACrD,iBAAK7J,qBAAL,CAA2Be,MAA3B,CAAkCwI,WAAlC;AACD,WAFD;;AAGA,gBAAM3F,OAAO,GAAG,CAAC,YAAY;AAC3B,gBAAIkG,QAAQ,GAAG,CAAC,KAAD,EAAQ,GAAR,EAAa,gCAAb,CAAf;;AACA,gBAAI;AACFA,cAAAA,QAAQ,GAAG,MAAM1B,kBAAkB,CAAC;AAAE1K,gBAAAA,MAAF;AAAUE,gBAAAA,SAAV;AAAqBmM,gBAAAA,WAAW,EAAEJ,eAAe,CAACjC;AAAlD,eAAD,CAAnC;AACD,aAFD,CAEE,OAAOlG,KAAP,EAAc;AACd,mBAAKpC,MAAL,CAAYoC,KAAZ,CAAmB,sDAAqD9D,MAAO,gBAAeE,SAAU,iCAAxG;AACA,mBAAKwB,MAAL,CAAYqC,UAAZ,CAAuBD,KAAvB;AACD;;AACD,gBAAImI,eAAe,CAACjC,MAAhB,CAAuBsC,OAA3B,EAAoC;AAClC,mBAAK5K,MAAL,CAAY+H,IAAZ,CAAkB,iCAAgCzJ,MAAO,gBAAeE,SAAU,cAAlF;AACA;AACD;;AACD,gBAAI;AACF,oBAAM,KAAKmH,OAAL,CAAahJ,qBAAb,EAAoC;AACxC2B,gBAAAA,MADwC;AAExCE,gBAAAA,SAFwC;AAGxC0H,gBAAAA,OAAO,EAAEwE,QAAQ,CAAC,CAAD,CAHuB;AAIxCvE,gBAAAA,IAAI,EAAEuE,QAAQ,CAAC,CAAD,CAJ0B;AAKxCtE,gBAAAA,IAAI,EAAEsE,QAAQ,CAAC,CAAD;AAL0B,eAApC,EAMH;AAAE5E,gBAAAA,WAAW,EAAE1I;AAAf,eANG,CAAN;AAOD,aARD,CAQE,OAAOgF,KAAP,EAAc;AACd,mBAAKpC,MAAL,CAAYoC,KAAZ,CAAmB,iDAAgD9D,MAAO,gBAAeE,SAAU,EAAnG;AACA,mBAAKwB,MAAL,CAAYqC,UAAZ,CAAuBD,KAAvB;AACD;;AACD,iBAAKxB,qBAAL,CAA2Be,MAA3B,CAAkCwI,WAAlC;AACD,WAzBe,GAAhB;;AA0BA,eAAKvJ,qBAAL,CAA2B3B,GAA3B,CAA+BkL,WAA/B,EAA4C,CAAC3F,OAAD,EAAU+F,eAAV,CAA5C;AACA,gBAAM/F,OAAN;AACD,SA3DD,CA2DE,OAAOpC,KAAP,EAAc;AACd,eAAKpC,MAAL,CAAYoC,KAAZ,CAAkB,wCAAlB;AACA,eAAKpC,MAAL,CAAYqC,UAAZ,CAAuBD,KAAvB;AACD;;AACD;;AACF;AACE,aAAKpC,MAAL,CAAY+H,IAAZ,CAAkB,wBAAuBnC,IAAK,EAA9C;AApKJ;AAsKD;;AAEqB,QAAhB4C,gBAAgB,CAACjK,QAAD,EAAkB;AACtC,UAAM+H,IAAI,GAAG,KAAKnG,OAAL,CAAanB,GAAb,CAAiBT,QAAjB,CAAb;;AACA,QAAI,OAAO+H,IAAP,KAAgB,WAAhB,IAA+BA,IAAI,CAACC,SAAxC,EAAmD;AACjD,aAAOD,IAAP;AACD;;AACD,WAAO,IAAI7B,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAIkG,KAAJ,CADsC,CAC3B;;;AACX,YAAM3D,OAAO,GAAG,MAAM;AACpB,aAAK/C,cAAL,CAAoB,oBAApB,EAA0C2G,wBAA1C;AACA,aAAK3G,cAAL,CAAoB,SAApB,EAA+B6D,aAA/B;AACA,aAAK7D,cAAL,CAAoB,MAApB,EAA4B4G,UAA5B;;AACA,YAAI,OAAOF,KAAP,KAAiB,WAArB,EAAkC;AAChCA,UAAAA,KAAK,CAAC1G,cAAN,CAAqB,OAArB,EAA8BmD,eAA9B;;AACAuD,UAAAA,KAAK,CAAC1G,cAAN,CAAqB,OAArB,EAA8BkD,eAA9B;AACD;AACF,OARD;;AASA,YAAMC,eAAe,GAAG,MAAM;AAC5BJ,QAAAA,OAAO;AACPvC,QAAAA,MAAM,CAAC,IAAIE,KAAJ,CAAW,QAAOtG,QAAS,2CAA3B,CAAD,CAAN;AACD,OAHD;;AAIA,YAAM8I,eAAe,GAAIjF,KAAD,IAAiB;AACvC8E,QAAAA,OAAO;AACPvC,QAAAA,MAAM,CAACvC,KAAD,CAAN;AACD,OAHD;;AAIA,YAAM2I,UAAU,GAAG,CAAC;AAAExM,QAAAA,QAAQ,EAAEyM,WAAZ;AAAyB1E,QAAAA,IAAI,EAAE2E;AAA/B,OAAD,KAAyC;AAC1D,YAAID,WAAW,KAAKzM,QAApB,EAA8B;AAC5B;AACD;;AACDsM,QAAAA,KAAK,GAAGI,EAAR;;AACAA,QAAAA,EAAE,CAACjK,WAAH,CAAe,OAAf,EAAwBsG,eAAxB;;AACA2D,QAAAA,EAAE,CAACjK,WAAH,CAAe,OAAf,EAAwBqG,eAAxB;AACD,OAPD;;AAQA,YAAMW,aAAa,GAAG,CAAC;AAAEzJ,QAAAA,QAAQ,EAAEyM,WAAZ;AAAyB1E,QAAAA,IAAI,EAAE2E;AAA/B,OAAD,KAAyC;AAC7D,YAAID,WAAW,KAAKzM,QAApB,EAA8B;AAC5B;AACD;;AACD2I,QAAAA,OAAO;AACPxC,QAAAA,OAAO,CAACuG,EAAD,CAAP;AACD,OAND;;AAOA,YAAMH,wBAAwB,GAAII,WAAD,IAAwB;AACvD,YAAI3M,QAAQ,KAAK2M,WAAjB,EAA8B;AAC5B;AACD;;AACDhE,QAAAA,OAAO;AACPvC,QAAAA,MAAM,CAAC,IAAIE,KAAJ,CAAW,UAAStG,QAAS,yCAA7B,CAAD,CAAN;AACD,OAND;;AAOA,WAAKyC,WAAL,CAAiB,oBAAjB,EAAuC8J,wBAAvC;AACA,WAAK9J,WAAL,CAAiB,SAAjB,EAA4BgH,aAA5B;AACA,WAAKhH,WAAL,CAAiB,MAAjB,EAAyB+J,UAAzB;AACD,KA5CM,CAAP;AA6CD;;AAE4B,QAAvB9J,uBAAuB,CAAC1C,QAAD,EAAkB;AAC7C,QAAI4M,QAAJ;;AACA,QAAIN,KAAJ,CAF6C,CAElC;;;AACX,QAAIO,MAAM,GAAG,CAAb;AACA,UAAMb,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACA,UAAMG,WAAW,GAAGJ,eAAe,CAACjC,MAApC;;AACA,UAAMpB,OAAO,GAAG,MAAM;AACpBqD,MAAAA,eAAe,CAACD,KAAhB;AACA,WAAKnG,cAAL,CAAoB,oBAApB,EAA0C2G,wBAA1C;;AACA,UAAI,OAAOD,KAAP,KAAiB,WAArB,EAAkC;AAChCA,QAAAA,KAAK,CAAC1G,cAAN,CAAqB,OAArB,EAA8BmD,eAA9B;;AACAuD,QAAAA,KAAK,CAAC1G,cAAN,CAAqB,MAArB,EAA6BkH,cAA7B;AACD;;AACD,WAAKxK,IAAL,CAAUsD,cAAV,CAAyB,SAAzB,EAAoCmH,iBAApC;AACAC,MAAAA,aAAa,CAACJ,QAAD,CAAb;AACD,KATD;;AAUA,UAAM7D,eAAe,GAAG,MAAM;AAC5BJ,MAAAA,OAAO;;AACP,UAAI,KAAKlF,gBAAL,CAAsBR,GAAtB,CAA0BjD,QAA1B,CAAJ,EAAyC;AACvC,aAAK0C,uBAAL,CAA6B1C,QAA7B;AACD;AACF,KALD;;AAMA,UAAMuM,wBAAwB,GAAII,WAAD,IAAwB;AACvD,UAAI3M,QAAQ,KAAK2M,WAAjB,EAA8B;AAC5B;AACD;;AACDhE,MAAAA,OAAO;AACR,KALD;;AAMA,UAAMoE,iBAAiB,GAAIhG,KAAD,IAAgC;AACxDkG,MAAAA,UAAU,CAAC,IAAI3N,kBAAJ,CAAuByH,KAAvB,CAAD,CAAV;AACD,KAFD;;AAGA,UAAMkG,UAAU,GAAIC,QAAD,IAAmB;AACpC,UAAI,OAAOnF,IAAP,KAAgB,WAApB,EAAiC;AAC/B,cAAM,IAAIzB,KAAJ,CAAU,qBAAV,CAAN;AACD;;AACDyB,MAAAA,IAAI,CAACoF,IAAL,CAAU1P,IAAI,CAACyP,QAAD,CAAd;AACD,KALD;;AAMA,UAAMJ,cAAc,GAAIM,MAAD,IAAmB;AACxC,YAAM/B,OAAO,GAAG3N,MAAM,CAAC0P,MAAD,CAAtB;;AACA,UAAI/B,OAAO,YAAYjM,IAAvB,EAA6B;AAC3B6N,QAAAA,UAAU,CAAC,IAAI5N,IAAJ,CAASgM,OAAO,CAACgC,SAAjB,EAA4BC,IAAI,CAACC,GAAL,EAA5B,CAAD,CAAV;AACD,OAFD,MAEO,IAAIlC,OAAO,YAAYhM,IAAvB,EAA6B;AAClCwN,QAAAA,MAAM,GAAIS,IAAI,CAACC,GAAL,KAAalC,OAAO,CAACmC,SAAtB,GAAmC,CAACC,WAAW,CAACF,GAAZ,KAAoBlC,OAAO,CAACgC,SAA7B,IAA0C,CAAtF;AACA,aAAK7K,sBAAL,CAA4B9B,GAA5B,CAAgCV,QAAhC,EAA0C6M,MAA1C;AACD,OAHM,MAGA,IAAIxB,OAAO,YAAY/L,kBAAvB,EAA2C;AAChD,aAAKgD,IAAL,CAAUoL,OAAV,CAAkBrC,OAAO,CAACtE,KAA1B;AACD;AACF,KAVD;;AAWA,SAAKtE,WAAL,CAAiB,oBAAjB,EAAuC8J,wBAAvC;;AACA,QAAI,CAAC,KAAKzE,mBAAL,CAAyB9H,QAAzB,CAAL,EAAyC;AACvC,YAAM,IAAIkG,OAAJ,CAAaC,OAAD,IAAa;AAC7B,cAAMsD,aAAa,GAAG,CAAC;AAAEzJ,UAAAA,QAAQ,EAAEyM;AAAZ,SAAD,KAA+B;AACnD,cAAIA,WAAW,KAAKzM,QAApB,EAA8B;AAC5B;AACD;;AACD,eAAK4F,cAAL,CAAoB,SAApB,EAA+B6D,aAA/B;AACA2C,UAAAA,WAAW,CAACuB,mBAAZ,CAAgC,OAAhC,EAAyCC,WAAzC;AACAzH,UAAAA,OAAO;AACR,SAPD;;AAQA,cAAMyH,WAAW,GAAG,MAAM;AACxB,eAAKhI,cAAL,CAAoB,SAApB,EAA+B6D,aAA/B;AACA2C,UAAAA,WAAW,CAACuB,mBAAZ,CAAgC,OAAhC,EAAyCC,WAAzC;AACAzH,UAAAA,OAAO;AACR,SAJD;;AAKA,aAAK1D,WAAL,CAAiB,SAAjB,EAA4BgH,aAA5B;AACA2C,QAAAA,WAAW,CAACF,gBAAZ,CAA6B,OAA7B,EAAsC0B,WAAtC;AACD,OAhBK,CAAN;;AAiBA,UAAIxB,WAAW,CAACC,OAAhB,EAAyB;AACvB;AACD;AACF;;AACD,UAAMtE,IAAI,GAAG,KAAKnG,OAAL,CAAanB,GAAb,CAAiBT,QAAjB,CAAb;AACAsM,IAAAA,KAAK,GAAGvE,IAAR;;AACA,QAAI,OAAOA,IAAP,KAAgB,WAApB,EAAiC;AAC/B,YAAM,IAAIzB,KAAJ,CAAU,qBAAV,CAAN;AACD;;AACDyB,IAAAA,IAAI,CAACtF,WAAL,CAAiB,OAAjB,EAA0BsG,eAA1B;AACAhB,IAAAA,IAAI,CAACtF,WAAL,CAAiB,MAAjB,EAAyBqK,cAAzB;AACAF,IAAAA,QAAQ,GAAGiB,WAAW,CAAC,MAAM;AAC3B9F,MAAAA,IAAI,CAACoF,IAAL,CAAU1P,IAAI,CAAC,IAAI2B,IAAJ,CAASqO,WAAW,CAACF,GAAZ,EAAT,CAAD,CAAd;AACD,KAFqB,EAEnB,IAFmB,CAAtB;AAGAxF,IAAAA,IAAI,CAACoF,IAAL,CAAU1P,IAAI,CAAC,IAAI2B,IAAJ,CAASqO,WAAW,CAACF,GAAZ,EAAT,CAAD,CAAd;AACA,SAAKjL,IAAL,CAAUG,WAAV,CAAsB,SAAtB,EAAiCsK,iBAAjC;AACAA,IAAAA,iBAAiB,CAAC,KAAKzK,IAAL,CAAUwL,IAAV,EAAD,CAAjB;AACD;;AAEDC,EAAAA,sBAAsB,CAACzL,IAAD,EAAe;AACnC,WAAO,KAAK8E,OAAL,CAAapJ,yBAAb,EAAwCsE,IAAxC,EAA8C;AAAEiF,MAAAA,WAAW,EAAEpI;AAAf,KAA9C,CAAP;AACD;;AAED+F,EAAAA,KAAK,GAAG;AACN/B,IAAAA,YAAY,CAAC,KAAKQ,kCAAN,CAAZ;AACA,SAAKM,cAAL,CAAoB,KAAK3C,IAAzB,EAA+B,EAA/B;AACD;;AAED8D,EAAAA,KAAK,GAAG;AACN,SAAKF,KAAL;AACA,SAAKlE,MAAL,GAAc,KAAd;AACA,SAAKoJ,MAAL,GAAczE,KAAd,CAAqB9B,KAAD,IAAW;AAC7B,WAAKpC,MAAL,CAAYoC,KAAZ,CAAkB,6BAAlB;AACA,WAAKpC,MAAL,CAAYqC,UAAZ,CAAuBD,KAAvB;AACD,KAHD,EAGGmK,OAHH,CAGW,MAAM;AACf,WAAKnN,WAAL,CAAiByB,IAAjB,CAAsBsD,cAAtB,CAAqC,KAArC,EAA4C,KAAK3B,cAAjD;AACA,WAAKpD,WAAL,CAAiB+E,cAAjB,CAAgC,OAAhC,EAAyC,KAAKX,gBAA9C;AACA,WAAKpE,WAAL,CAAiB+E,cAAjB,CAAgC,gBAAhC,EAAkD,KAAKT,yBAAvD;AACA,WAAKtE,WAAL,CAAiB+E,cAAjB,CAAgC,WAAhC,EAA6C,KAAKP,oBAAlD;AACA,WAAKxE,WAAL,CAAiBoN,cAAjB,CAAgC,KAAK1M,WAArC;AACA,WAAKV,WAAL,CAAiBqN,yBAAjB,CAA2C,KAAK5M,IAAhD;AACA,WAAKT,WAAL,CAAiBsN,WAAjB,CAA6B,KAAK7M,IAAlC;AACD,KAXD;AAYA,SAAKuD,IAAL,CAAU,OAAV;AACD;;AAhnCoC;;gBAA1BlE,I;;AAmnCb,MAAMyG,OAAO,GAAG,CAACvG,WAAD,EAA0BuL,WAA1B,EAAoDtL,MAApD,EAAmEuG,IAAnE,EAAgFd,KAAhF,EAA8FxF,OAAyE,GAAG,EAA1K,KAAiL;AAC/L,QAAMO,IAAI,GAAI,UAASR,MAAO,EAA9B;AACA,QAAMS,WAAW,GAAI,UAAST,MAAO,IAAGG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBC,MAAM,CAACC,gBAAlC,EAAoDG,QAApD,CAA6D,EAA7D,CAAiE,EAAzG;AACA,QAAM8F,eAAe,GAAG,OAAOvG,OAAO,CAACuG,eAAf,KAAmC,QAAnC,GAA8CvG,OAAO,CAACuG,eAAtD,GAAwE,IAAhG;AACA,QAAMC,WAAW,GAAG,OAAOxG,OAAO,CAACwG,WAAf,KAA+B,UAA/B,GAA4CxG,OAAO,CAACwG,WAApD,GAAkEhJ,YAAtF;AACA,QAAMiJ,SAAS,GAAGvG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBC,MAAM,CAACC,gBAAlC,CAAlB;AACA,SAAO,IAAI6E,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMuC,OAAO,GAAG,MAAM;AACpBxF,MAAAA,YAAY,CAACsE,OAAD,CAAZ;AACA2E,MAAAA,WAAW,CAACuB,mBAAZ,CAAgC,OAAhC,EAAyCC,WAAzC;AACA/M,MAAAA,WAAW,CAACqN,yBAAZ,CAAsC5M,IAAtC;AACAT,MAAAA,WAAW,CAACoN,cAAZ,CAA2B1M,WAA3B;AACD,KALD;;AAMA,UAAMqM,WAAW,GAAG,MAAM;AACxBjF,MAAAA,OAAO;AACPvC,MAAAA,MAAM,CAAC,IAAI9H,UAAJ,CAAgB,kCAAiC+I,IAAK,oBAAtD,CAAD,CAAN;AACD,KAHD;;AAIA,UAAMI,OAAO,GAAGlE,UAAU,CAAC,MAAM;AAC/BoF,MAAAA,OAAO;AACPvC,MAAAA,MAAM,CAAC,IAAI3H,mBAAJ,CAAyB,GAAE4I,IAAK,8BAA6BC,eAAgB,IAA7E,CAAD,CAAN;AACD,KAHyB,EAGvBA,eAHuB,CAA1B;;AAIA,UAAMX,aAAa,GAAI0E,OAAD,IAA+D;AACnF,UAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/B;AACD;;AACD,YAAM;AAAE7D,QAAAA,SAAS,EAAE4G,UAAb;AAAyB/G,QAAAA,IAAI,EAAEgH,YAA/B;AAA6C9H,QAAAA,KAAK,EAAE+H;AAApD,UAAsEjD,OAA5E;;AACA,UAAIgD,YAAY,KAAKhQ,QAArB,EAA+B;AAC7B;AACD;;AACD,UAAI+P,UAAU,KAAK5G,SAAnB,EAA8B;AAC5B;AACD;;AACD,YAAM;AAAEG,QAAAA,OAAF;AAAWC,QAAAA,IAAX;AAAiBC,QAAAA;AAAjB,UAA0ByG,aAAhC;AACA3F,MAAAA,OAAO;;AACP,UAAIhB,OAAJ,EAAa;AACXxB,QAAAA,OAAO,CAAC;AAAEyB,UAAAA,IAAF;AAAQC,UAAAA;AAAR,SAAD,CAAP;AACA;AACD;;AACDzB,MAAAA,MAAM,CAAC,IAAImB,WAAJ,CAAgBM,IAAhB,EAAsBD,IAAtB,CAAD,CAAN;AACD,KAlBD;;AAmBAwE,IAAAA,WAAW,CAACF,gBAAZ,CAA6B,OAA7B,EAAsC0B,WAAtC;AACA1H,IAAAA,OAAO,CAACM,GAAR,CAAY,CACV3F,WAAW,CAAC+F,eAAZ,CAA4BrF,WAA5B,CADU,EAEVV,WAAW,CAAC6F,sBAAZ,CAAmCpF,IAAnC,EAAyCqF,aAAzC,CAFU,CAAZ,EAGG4H,IAHH,CAGQ,MAAM;AACZ1N,MAAAA,WAAW,CAACuG,OAAZ,CAAoB7F,WAApB,EAAiC;AAAEiG,QAAAA,SAAF;AAAaH,QAAAA,IAAb;AAAmBd,QAAAA;AAAnB,OAAjC;AACD,KALD,EAKGZ,KALH,CAKU9B,KAAD,IAAW;AAClB8E,MAAAA,OAAO;AACPvC,MAAAA,MAAM,CAACvC,KAAD,CAAN;AACD,KARD;AASD,GA5CM,CAAP;AA6CD,CAnDD;;AAqDAlD,IAAI,CAACoN,sBAAL,GAA8B,CAAClN,WAAD,EAA2BuL,WAA3B,EAAoD9J,IAApD,KAAiF;AAC7G,QAAM;AAAExB,IAAAA;AAAF,MAAawB,IAAnB;AACA,SAAO8E,OAAO,CAACvG,WAAD,EAAcuL,WAAd,EAA2BtL,MAA3B,EAAmC9C,yBAAnC,EAA8DsE,IAA9D,EAAoE;AAAEiF,IAAAA,WAAW,EAAEpI;AAAf,GAApE,CAAd;AACD,CAHD","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport ObservedRemoveMap from 'observed-remove/dist/map';\nimport type BraidClient from '@bunchtogether/braid-client';\nimport SimplePeer from 'simple-peer';\nimport PQueue from 'p-queue';\nimport {\n  pack,\n  unpack,\n} from 'msgpackr';\nimport {\n  SIGNAL,\n  START_SESSION,\n  LEAVE_SESSION,\n  JOIN_SESSION,\n  INVITE_TO_SESSION,\n  DECLINE_INVITE_TO_SESSION,\n  SESSION_QUEUE,\n  ABORT_SESSION_JOIN_REQUEST,\n  SESSION_JOIN_REQUEST,\n  SESSION_JOIN_RESPONSE,\n  RESPONSE,\n} from './constants';\nimport {\n  AbortError,\n  RequestError,\n  StartSessionError,\n  RequestTimeoutError,\n  JoinSessionError,\n  LeaveSessionError,\n  SignalError,\n  SessionJoinResponseError,\n  ClientClosedError,\n  InviteToSessionError,\n  InvitationDeclinedError,\n  InvitedUserLeftError,\n  InvitationTimeoutError,\n  DeclineInviteToSessionError,\n} from './errors';\nimport {\n  Ping,\n  Pong,\n  ObservedRemoveDump,\n} from './messagepack';\n\ntype Logger = {\n  debug: (string | number, ...any) => void,\n  info: (string | number, ...any) => void,\n  warn: (string | number, ...any) => void,\n  error: (string | number, ...any) => void,\n  errorStack: (error:Error | MediaError) => void,\n};\n\ntype Options = {\n  peerOptions?: Object,\n  logger?: Logger,\n  sessionId?: string\n}\n\nexport type SessionJoinHandler = ({ sessionId: string, userId: string, abortSignal: AbortSignal }) => [boolean, number, string] | Promise<[boolean, number, string]>;\nexport type Connection = [number, number, string, number, string | false];\nexport type Socket = { socketHash: string, socketId: number, serverId: number, userId: string, clientId: number, sessionId: string | false };\n\nconst getSocketMap = (values?:Array<Connection>):Map<string, Socket> => {\n  if (typeof values === 'undefined') {\n    return new Map();\n  }\n  return new Map(values.map((x) => {\n    const socketHash = `${x[0]}:${x[1]}`;\n    return [socketHash, { socketHash, socketId: x[0], serverId: x[1], userId: x[2], clientId: x[3], sessionId: x[4] }];\n  }));\n};\n\nconst getSessionId = (values?:Array<Connection>, clientId:number):(string | false) => {\n  if (typeof values === 'undefined') {\n    return false;\n  }\n  for (const x of values) {\n    if (x[3] === clientId) {\n      return x[4] || false;\n    }\n  }\n  return false;\n};\n\nconst getPeerIds = (values?:Array<Connection>):Set<string> => {\n  if (typeof values === 'undefined') {\n    return new Set();\n  }\n  return new Set(values.map((x) => x[2]));\n};\n\nconst getSessionMap = (socketMap:Map<string, Socket>):Map<string | false, Map<number, Socket>> => {\n  const map = new Map();\n  for (const socket of socketMap.values()) {\n    const { clientId, sessionId } = socket;\n    const sessionClientMap = map.get(sessionId);\n    if (typeof sessionClientMap === 'undefined') {\n      map.set(sessionId, new Map([[clientId, socket]]));\n    } else {\n      sessionClientMap.set(clientId, socket);\n    }\n  }\n  return map;\n};\n\nexport class Bond extends EventEmitter {\n  static declineInviteToSession: (BraidClient, AbortSignal, { roomId: string, userId: string, clientId: number, sessionId: string, data: Object }) => Promise<{ code:number, text:string }>;\n\n  declare roomId: string;\n  declare clientId: number;\n  declare userId: string;\n  declare name: string;\n  declare publishName: string;\n  declare braidClient: BraidClient;\n  declare logger: Logger;\n  declare _ready: Promise<void>;\n  declare ready: Promise<void>;\n  declare socketMap: Map<string, Socket>;\n  declare sessionMap: Map<string | false, Map<number, Socket>>;\n  declare userIds: Set<string>;\n  declare peerOptions: void | Object;\n  declare peerMap: Map<number, SimplePeer>;\n  declare peerReconnectMap: Map<number, number>;\n  declare queueMap: Map<string | number, PQueue>;\n  declare handleBraidSet: (string, any) => void;\n  declare handleBraidClose: () => void;\n  declare handleBraidCloseRequested: () => void;\n  declare handleBraidReconnect: (boolean) => void;\n  declare signalQueueMap: Map<number, Array<[string, Object]>>;\n  declare requestCallbackMap: Map<number, (boolean, number, string) => void | Promise<void>>;\n  declare inviteDeclineHandlerMap: Map<string, () => Promise<void>>;\n  declare sessionId: false | string;\n  declare startedSessionId: void | string;\n  declare joinedSessionId: void | string;\n  declare active: boolean;\n  declare peerDisconnectTimeoutMap: Map<number, TimeoutID>;\n  declare sessionJoinHandlerMap: Map<string, SessionJoinHandler>;\n  declare sessionJoinRequestMap: Map<string, [Promise<void>, AbortController]>;\n  declare data: ObservedRemoveMap<string | number, any>;\n  declare sessionClientOffsetMap: Map<number, number>;\n  declare leaveSessionAfterLastClientTimeout: void | TimeoutID;\n\n  constructor(braidClient: BraidClient, roomId:string, userId:string, options?: Options = {}) {\n    super();\n    this.active = true;\n    this.clientId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    this.userId = userId;\n    this.roomId = roomId;\n    this.sessionId = false;\n    const name = `signal/${this.roomId}`;\n    this.name = name;\n    this.publishName = `signal/${this.roomId}/${this.clientId.toString(36)}`;\n    this.braidClient = braidClient;\n    this.logger = options.logger || braidClient.logger;\n    this.peerOptions = options.peerOptions;\n    this.socketMap = new Map();\n    this.userIds = new Set();\n    this.peerMap = new Map();\n    this.peerReconnectMap = new Map();\n    this.queueMap = new Map();\n    this.sessionMap = new Map();\n    this.inviteDeclineHandlerMap = new Map();\n    this.requestCallbackMap = new Map();\n    this.signalQueueMap = new Map();\n    this.peerDisconnectTimeoutMap = new Map();\n    this.sessionJoinHandlerMap = new Map();\n    this.sessionJoinRequestMap = new Map();\n    this.data = new ObservedRemoveMap([], { bufferPublishing: 0 });\n    this.sessionClientOffsetMap = new Map();\n    this.addListener('sessionClientJoin', this.handleSessionClientJoin.bind(this));\n    this._ready = this.init(); // eslint-disable-line no-underscore-dangle\n    if (typeof options.sessionId === 'string') {\n      this.ready = this.joinSession(options.sessionId);\n    } else {\n      this.ready = this._ready; // eslint-disable-line no-underscore-dangle\n    }\n    this.addListener('socketJoin', (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (clientId === this.clientId) {\n        return;\n      }\n      if (this.peerDisconnectTimeoutMap.has(clientId)) {\n        this.logger.info(`Clearing client ${clientId} disconnect timeout after socket join`);\n        clearTimeout(this.peerDisconnectTimeoutMap.get(clientId));\n        this.peerDisconnectTimeoutMap.delete(clientId);\n      }\n      this.addToQueue(clientId, () => this.connectToPeer(socketData));\n    });\n    this.addListener('socketLeave', (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (clientId === this.clientId) {\n        return;\n      }\n      clearTimeout(this.peerDisconnectTimeoutMap.get(clientId));\n      if (this.active) {\n        this.peerDisconnectTimeoutMap.set(clientId, setTimeout(() => {\n          this.peerDisconnectTimeoutMap.delete(clientId);\n          this.addToQueue(clientId, () => this.disconnectFromPeer(socketData));\n        }, 15000));\n      } else {\n        this.addToQueue(clientId, () => this.disconnectFromPeer(socketData));\n      }\n    });\n    this.addListener('sessionClientJoin', () => {\n      const sessionClientIds = this.sessionClientIds;\n      if (sessionClientIds.size > 1) {\n        return;\n      }\n      clearTimeout(this.leaveSessionAfterLastClientTimeout);\n    });\n    this.addListener('sessionClientLeave', async () => {\n      const sessionClientIds = this.sessionClientIds;\n      if (sessionClientIds.size > 1) {\n        return;\n      }\n      this.leaveSessionAfterLastClientTimeout = setTimeout(async () => {\n        try {\n          await this.leaveSession();\n        } catch (error) {\n          this.logger.error('Unable to leave session after timeout when last session closed');\n          this.logger.errorStack(error);\n        }\n      }, 5000);\n    });\n\n    this.addListener('session', async () => {\n      const timelineValue = this.data.get(this.clientId);\n      this.data.clear();\n      this.sessionClientOffsetMap.clear();\n      if (typeof timelineValue !== 'undefined') {\n        this.data.set(this.clientId);\n      }\n    });\n\n    this.handleBraidSet = (key:string, values:Array<Connection>) => {\n      if (key !== name) {\n        return;\n      }\n      this.active = true;\n      const oldSessionId = this.sessionId;\n      const newSessionId = getSessionId(values, this.clientId);\n      const oldSocketMap = this.socketMap;\n      const newSocketMap = getSocketMap(values);\n      const oldUserIds = this.userIds;\n      const newUserIds = getPeerIds(values);\n      const oldSessionMap = this.sessionMap;\n      const newSessionMap = getSessionMap(newSocketMap);\n      const oldLocalSessionSocketMap = typeof oldSessionId === 'string' ? oldSessionMap.get(oldSessionId) || new Map() : new Map();\n      const newLocalSessionSocketMap = typeof newSessionId === 'string' ? newSessionMap.get(newSessionId) || new Map() : new Map();\n      this.sessionId = newSessionId;\n      this.userIds = newUserIds;\n      this.socketMap = newSocketMap;\n      this.sessionMap = newSessionMap;\n      if (newSessionId !== oldSessionId) {\n        this.emit('session', newSessionId);\n      }\n      for (const [socketHash, socketData] of oldSocketMap) {\n        if (!newSocketMap.has(socketHash)) {\n          this.emit('socketLeave', socketData);\n        }\n      }\n      for (const [socketHash, socketData] of newSocketMap) {\n        if (!oldSocketMap.has(socketHash)) {\n          this.emit('socketJoin', socketData);\n        }\n      }\n      for (const peerUserId of oldUserIds) {\n        if (!newUserIds.has(peerUserId)) {\n          this.emit('leave', peerUserId);\n        }\n      }\n      for (const peerUserId of newUserIds) {\n        if (!oldUserIds.has(peerUserId)) {\n          this.emit('join', peerUserId);\n        }\n      }\n      for (const [clientId, socketData] of oldLocalSessionSocketMap) {\n        if (clientId === this.clientId) {\n          continue;\n        }\n        if (!newLocalSessionSocketMap.has(clientId)) {\n          this.emit('sessionClientLeave', clientId, socketData);\n        }\n      }\n      for (const [clientId, socketData] of newLocalSessionSocketMap) {\n        if (clientId === this.clientId) {\n          continue;\n        }\n        if (!oldLocalSessionSocketMap.has(clientId)) {\n          this.emit('sessionClientJoin', clientId, socketData);\n        }\n      }\n      for (const [sessionId, oldSessionSocketMap] of oldSessionMap) {\n        const newSessionSocketMap = newSessionMap.get(sessionId);\n        if (typeof newSessionSocketMap === 'undefined') {\n          for (const socketData of oldSessionSocketMap.values()) {\n            this.emit('sessionLeave', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of oldSessionSocketMap) {\n            if (!newSessionSocketMap.has(socketHash)) {\n              this.emit('sessionLeave', socketData);\n            }\n          }\n        }\n      }\n      for (const [sessionId, newSessionSocketMap] of newSessionMap) {\n        const oldSessionSocketMap = oldSessionMap.get(sessionId);\n        if (typeof oldSessionSocketMap === 'undefined') {\n          for (const socketData of newSessionSocketMap.values()) {\n            this.emit('sessionJoin', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of newSessionSocketMap) {\n            if (!oldSessionSocketMap.has(socketHash)) {\n              this.emit('sessionJoin', socketData);\n            }\n          }\n        }\n      }\n    };\n    this.handleBraidClose = () => {\n      this.reset();\n    };\n    this.handleBraidCloseRequested = () => {\n      this.close();\n    };\n    this.handleBraidReconnect = (isReconnecting: boolean) => {\n      if (!isReconnecting) {\n        return;\n      }\n      const startedSessionId = this.startedSessionId;\n      const joinedSessionId = this.joinedSessionId;\n      const handleInitialized = () => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.info(`Restarting session ${startedSessionId}`);\n          this.startSession(startedSessionId).catch((error) => {\n            this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        if (typeof joinedSessionId === 'string') {\n          this.logger.info(`Rejoining session ${joinedSessionId}`);\n          this.joinSession(joinedSessionId).catch((error) => {\n            this.logger.error(`Unable to rejoin session ${joinedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleClose = () => {\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleError = (error:Error) => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n          this.logger.errorStack(error);\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      this.braidClient.addListener('initialized', handleInitialized);\n      this.braidClient.addListener('close', handleClose);\n      this.braidClient.addListener('error', handleError);\n    };\n    this.braidClient.data.addListener('set', this.handleBraidSet);\n    this.braidClient.addListener('close', this.handleBraidClose);\n    this.braidClient.addListener('closeRequested', this.handleBraidCloseRequested);\n    this.braidClient.addListener('reconnect', this.handleBraidReconnect);\n  }\n\n  get sessionClientIds():Set<number> {\n    const sessionId = this.sessionId;\n    if (typeof sessionId !== 'string') {\n      return new Set();\n    }\n    const sessionClientMap = this.sessionMap.get(sessionId);\n    if (typeof sessionClientMap === 'undefined') {\n      return new Set();\n    }\n    const clientIds = new Set(sessionClientMap.keys());\n    clientIds.delete(this.clientId);\n    return clientIds;\n  }\n\n  async init() {\n    const promise = new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(new Error('Closed before initialization completed'));\n      };\n      const handleValue = (key:string, value:any) => {\n        if (key !== this.name) {\n          return;\n        }\n        if (typeof value === 'undefined') {\n          return;\n        }\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(error);\n      };\n      this.addListener('close', handleClose);\n      this.braidClient.data.addListener('set', handleValue);\n      this.braidClient.addListener('error', handleError);\n      handleValue(this.name, this.braidClient.data.get(this.name));\n    });\n    try {\n      await Promise.all([\n        this.braidClient.subscribe(this.name),\n        this.braidClient.addServerEventListener(this.name, this.handleMessage.bind(this)),\n      ]);\n      if (!this.active) {\n        return;\n      }\n      await promise;\n      if (!this.active) {\n        return;\n      }\n      await this.braidClient.startPublishing(this.publishName);\n    } catch (error) {\n      this.braidClient.logger.error(`Unable to join ${this.roomId}`);\n      throw error;\n    }\n  }\n\n  addToQueue(queueId:string | number, func:() => Promise<*>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      return queue.add(func);\n    }\n    const newQueue = new PQueue({ concurrency: 1 });\n    const promise = newQueue.add(func);\n    this.queueMap.set(queueId, newQueue);\n    newQueue.on('idle', () => {\n      this.queueMap.delete(queueId);\n    });\n    return promise;\n  }\n\n  async publish(type:string, value:Object, options?: { timeoutDuration?: number, CustomError?: Class<RequestError> } = {}):Promise<{ text:string, code:number }> {\n    await this._ready; // eslint-disable-line no-underscore-dangle\n    const timeoutDuration = typeof options.timeoutDuration === 'number' ? options.timeoutDuration : 5000;\n    const CustomError = typeof options.CustomError === 'function' ? options.CustomError : RequestError;\n    const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    return new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        reject(new ClientClosedError(`Client closed before ${type} request completed`));\n      };\n      const timeout = setTimeout(() => {\n        this.requestCallbackMap.delete(requestId);\n        this.removeListener('close', handleClose);\n        reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n      }, timeoutDuration);\n      const handleResponse = (success:boolean, code: number, text:string) => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        if (success) {\n          resolve({ code, text });\n          return;\n        }\n        reject(new CustomError(text, code));\n      };\n      this.addListener('close', handleClose);\n      this.requestCallbackMap.set(requestId, handleResponse);\n      this.braidClient.publish(this.publishName, { requestId, type, value });\n    });\n  }\n\n  isConnectedToClient(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return false;\n    }\n    return !!peer.connected;\n  }\n\n  async connectToPeer(socket:Socket) {\n    const { userId, serverId, socketId, clientId, socketHash } = socket;\n    const reconnectCount = this.peerReconnectMap.get(clientId) || 0;\n    const reconnectDelay = reconnectCount > 5 ? 30000 : 1000 * (reconnectCount * reconnectCount);\n    if (reconnectDelay > 0) {\n      this.logger.info(`Delaying connect by ${Math.round(reconnectDelay / 1000)} ${reconnectDelay === 1000 ? 'second' : 'seconds'} on attempt ${reconnectCount}`);\n      await new Promise((resolve) => {\n        const timeout = setTimeout(() => {\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        }, reconnectDelay);\n        const handleClose = () => {\n          clearTimeout(timeout);\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        };\n        const handleSocketLeave = ({ socketHash: oldSocketHash }:Socket) => {\n          if (socketHash !== oldSocketHash) {\n            return;\n          }\n          clearTimeout(timeout);\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        };\n        this.addListener('close', handleClose);\n        this.addListener('socketLeave', handleSocketLeave);\n      });\n      if (!this.socketMap.has(socketHash)) {\n        return;\n      }\n    }\n    const existingPeer = this.peerMap.get(clientId);\n    const options = Object.assign({}, { initiator: clientId > this.clientId }, this.peerOptions);\n    const peer = existingPeer || new SimplePeer(options);\n    this.peerMap.set(clientId, peer);\n    this.peerReconnectMap.set(clientId, reconnectCount + 1);\n    this.emit('peer', { clientId, peer });\n    const addPeerListeners = () => {\n      this.peerReconnectMap.set(clientId, 0);\n      const cleanup = () => {\n        peer.removeListener('signal', handleSignal);\n        peer.removeListener('stream', handleStream);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('peerReconnect', handlePeerReconnect);\n      };\n      const handleSignal = async (data:Object) => {\n        try {\n          await this.publish(SIGNAL, { serverId, socketId, data }, { CustomError: SignalError });\n        } catch (error) {\n          this.logger.error(`Unable to signal user ${userId} client ${clientId} closed`);\n          this.logger.errorStack(error);\n        }\n      };\n      const handleStream = (stream:MediaStream) => {\n        if (!this.sessionClientIds.has(clientId)) {\n          this.logger.error(`Received an unexpected stream from non-session user ${userId} client ${clientId}`);\n          stream.getTracks().forEach((track) => {\n            track.stop();\n            track.dispatchEvent(new Event('stop'));\n          });\n          return;\n        }\n        this.emit('stream', { stream, userId, serverId, socketId, clientId });\n      };\n      const handlePeerClose = () => {\n        this.logger.info(`Disconnected from user ${userId} client ${clientId}`);\n        cleanup();\n        this.emit('disconnect', { userId, serverId, socketId, clientId });\n        if (this.peerMap.has(clientId)) {\n          this.peerMap.delete(clientId);\n          this.connectToPeer(socket);\n          this.logger.warn(`Reconnecting to user ${userId} client ${clientId}`);\n        }\n      };\n      const handlePeerError = (error:Error) => {\n        this.logger.error(`Error in connection to user ${userId} client ${clientId}`);\n        this.logger.errorStack(error);\n        this.emit('peerError', { userId, serverId, socketId, clientId, error });\n      };\n      const handlePeerReconnect = () => {\n        this.logger.info(`Reconnected to user ${userId} client ${clientId}`);\n        cleanup();\n      };\n      peer.addListener('signal', handleSignal);\n      peer.addListener('stream', handleStream);\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('error', handlePeerError);\n      peer.addListener('peerReconnect', handlePeerReconnect);\n    };\n    if (peer.connected) {\n      peer.emit('peerReconnect');\n      addPeerListeners();\n      this.emit('connect', { userId, clientId, serverId, socketId, peer });\n      return;\n    }\n    await new Promise((resolve) => {\n      const cleanup = () => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n      };\n      const timeout = setTimeout(() => {\n        cleanup();\n        resolve();\n      }, 5000);\n      const handleConnect = () => {\n        cleanup();\n        addPeerListeners();\n        this.emit('connect', { userId, clientId, serverId, socketId, peer });\n        resolve();\n      };\n      const handleSignal = async (data:Object) => {\n        try {\n          await this.publish(SIGNAL, { serverId, socketId, data }, { CustomError: SignalError });\n        } catch (error) {\n          this.logger.error(`Unable to signal user ${userId} client ${clientId} closed`);\n          this.logger.errorStack(error);\n        }\n      };\n      const handleClose = () => {\n        cleanup();\n        resolve();\n      };\n      const handlePeerClose = () => {\n        this.logger.info(`Connection to user ${userId} client ${clientId} closed`);\n        cleanup();\n        if (this.peerMap.has(clientId)) {\n          this.peerMap.delete(clientId);\n          this.connectToPeer(socket);\n          this.logger.warn(`Reconnecting to user ${userId} client ${clientId}`);\n        }\n        resolve();\n      };\n      const handlePeerError = (error:Error) => {\n        cleanup();\n        this.logger.error(`Error connecting to ${userId}`);\n        this.logger.errorStack(error);\n        this.emit('peerError', { userId, serverId, socketId, clientId, error });\n        this.emit('error', error);\n        resolve();\n      };\n      const handleSocketLeave = ({ socketHash: oldSocketHash }:Socket) => {\n        if (socketHash !== oldSocketHash) {\n          return;\n        }\n        cleanup();\n        this.logger.warn(`Unable to connect to user ${userId} client ${clientId}, socket closed before connection was completed`);\n        resolve();\n      };\n      peer.addListener('error', handlePeerError);\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('connect', handleConnect);\n      peer.addListener('signal', handleSignal);\n      this.addListener('close', handleClose);\n      this.addListener('socketLeave', handleSocketLeave);\n      const signalQueue = this.signalQueueMap.get(clientId);\n      if (Array.isArray(signalQueue)) {\n        while (signalQueue.length > 0) {\n          const data = signalQueue.shift();\n          peer.signal(data);\n        }\n      }\n    });\n  }\n\n  async addStream(clientId:number, stream:MediaStream) {\n    const peer = await this.getConnectedPeer(clientId);\n    peer.addStream(stream);\n  }\n\n  async removeStream(clientId:number, stream:MediaStream) {\n    const peer = await this.getConnectedPeer(clientId);\n    peer.removeStream(stream);\n  }\n\n  async disconnectFromPeer({ clientId }:Socket) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return;\n    }\n    this.peerMap.delete(clientId);\n    peer.destroy();\n  }\n\n  async onIdle() {\n    while (this.queueMap.size > 0) {\n      for (const queue of this.queueMap.values()) {\n        await queue.onIdle();\n      }\n      // $FlowFixMe\n      await new Promise((resolve) => queueMicrotask(resolve));\n    }\n  }\n\n  cleanupSession() {\n    const startedSessionId = this.startedSessionId;\n    delete this.startedSessionId;\n    delete this.joinedSessionId;\n    if (typeof startedSessionId === 'string') {\n      this.sessionJoinHandlerMap.delete(startedSessionId);\n    }\n  }\n\n  didStartSession() {\n    if (!this.sessionId) {\n      return false;\n    }\n    return this.startedSessionId === this.sessionId;\n  }\n\n  async inviteToSession(userId:string, options?:{ data?:Object, timeoutDuration?: number, sessionJoinHandler?: SessionJoinHandler } = {}) {\n    const { data, timeoutDuration = 30000, sessionJoinHandler } = options;\n    const queue = this.queueMap.get(SESSION_QUEUE);\n    if (typeof queue !== 'undefined') {\n      await queue.onIdle();\n    }\n    const hasSessionId = this.sessionId === 'string';\n    // $FlowFixMe\n    const sessionId = this.sessionId || globalThis.crypto.randomUUID(); // eslint-disable-line no-undef\n    if (hasSessionId) {\n      await this.publish(INVITE_TO_SESSION, { userId, sessionId, data }, { CustomError: InviteToSessionError });\n    } else {\n      const automaticSessionJoinHandler = async (values) => {\n        if (values.userId === userId) {\n          return [true, 200, 'Authorized'];\n        }\n        if (typeof sessionJoinHandler === 'function') {\n          return sessionJoinHandler(values);\n        }\n        return [true, 200, 'Authorized'];\n      };\n      await this.startSession(sessionId, automaticSessionJoinHandler);\n      await this.publish(INVITE_TO_SESSION, { userId, sessionId, data }, { CustomError: InviteToSessionError });\n    }\n    await new Promise((resolve, reject) => {\n      const cleanup = () => {\n        clearTimeout(timeout);\n        this.removeListener('sessionJoin', handleSessionJoin);\n        this.removeListener('close', handleClose);\n        this.removeListener('leave', handleLeave);\n        this.removeListener('session', handleSession);\n        this.removeListener('socketLeave', handleSocketLeave);\n        this.inviteDeclineHandlerMap.delete(`${userId}:${sessionId}`);\n      };\n      const leaveSession = async () => {\n        if (hasSessionId) {\n          return;\n        }\n        try {\n          await this.leaveSession();\n        } catch (error) {\n          this.logger.error('Unable to leave session after invite timeout');\n          this.logger.errorStack(error);\n        }\n      };\n      const timeout = setTimeout(async () => {\n        cleanup();\n        await leaveSession();\n        reject(new InvitationTimeoutError(`Invitation timed out after ${Math.round(timeoutDuration / 100) / 10} seconds`));\n      }, timeoutDuration);\n      const handleSessionJoin = (socket: Socket) => {\n        if (socket.sessionId !== sessionId) {\n          return;\n        }\n        if (socket.userId !== userId) {\n          return;\n        }\n        cleanup();\n        resolve();\n      };\n      // Only listen for socket leave events if the user is inviting themselves\n      const handleSocketLeave = async (socket: Socket) => {\n        if (socket.userId !== this.userId) {\n          return;\n        }\n        let isOnlySocketForUserId = true;\n        for (const socketData of this.socketMap.values()) {\n          if (socketData.userId !== this.userId) {\n            continue;\n          }\n          if (socketData.clientId === this.clientId) {\n            continue;\n          }\n          isOnlySocketForUserId = false;\n        }\n        if (isOnlySocketForUserId) {\n          cleanup();\n          await leaveSession();\n          reject(new InvitedUserLeftError(`User ${userId} left before accepting the invitation`));\n        }\n      };\n      const handleSession = (newSessionId:string | false) => {\n        if (newSessionId === sessionId) {\n          return;\n        }\n        cleanup();\n        resolve();\n      };\n      const handleClose = () => {\n        cleanup();\n        reject(new ClientClosedError('Closed before invite'));\n      };\n      const handleDecline = async () => {\n        cleanup();\n        await leaveSession();\n        reject(new InvitationDeclinedError('Invitation declined'));\n      };\n      const handleLeave = async (peerUserId:string) => {\n        if (userId !== peerUserId) {\n          return;\n        }\n        cleanup();\n        await leaveSession();\n        reject(new InvitedUserLeftError(`User ${userId} left before accepting the invitation`));\n      };\n      this.inviteDeclineHandlerMap.set(`${userId}:${sessionId || ''}`, handleDecline);\n      this.addListener('sessionJoin', handleSessionJoin);\n      this.addListener('close', handleClose);\n      this.addListener('leave', handleLeave);\n      this.addListener('session', handleSession);\n      if (this.userId === userId) {\n        this.addListener('socketLeave', handleSocketLeave);\n      }\n    });\n  }\n\n  async startSession(sessionId:string, sessionJoinHandler?: SessionJoinHandler) {\n    await this.addToQueue(SESSION_QUEUE, () => this.publish(START_SESSION, { sessionId }, { CustomError: StartSessionError }));\n    this.cleanupSession();\n    this.startedSessionId = sessionId;\n    if (typeof sessionJoinHandler === 'function') {\n      this.sessionJoinHandlerMap.set(sessionId, sessionJoinHandler);\n    } else {\n      this.sessionJoinHandlerMap.set(sessionId, () => [true, 200, 'Authorized']);\n    }\n  }\n\n  didJoinSession() {\n    if (!this.sessionId) {\n      return false;\n    }\n    return this.joinedSessionId === this.sessionId;\n  }\n\n  async joinSession(sessionId:string, timeoutDuration?: number = 30000) {\n    await this.addToQueue(SESSION_QUEUE, () => this.publish(JOIN_SESSION, { sessionId, timeoutDuration }, { CustomError: JoinSessionError }));\n    this.cleanupSession();\n    this.joinedSessionId = sessionId;\n  }\n\n  async leaveSession() {\n    try {\n      await this.addToQueue(SESSION_QUEUE, () => this.publish(LEAVE_SESSION, {}, { CustomError: LeaveSessionError }));\n      this.cleanupSession();\n    } catch (error) {\n      if (error instanceof ClientClosedError) {\n        return;\n      }\n      throw error;\n    }\n  }\n\n  async handleMessage(message:{ requestId?: number, type:string, value:Object }) {\n    if (typeof message !== 'object') {\n      this.logger.error('Invalid message format');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    const { requestId, type, value } = message;\n    if (typeof type !== 'string') {\n      this.logger.error('Invalid message format, type property should be of type \"string\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (typeof value !== 'object') {\n      this.logger.error('Invalid message format, value property should be of type \"object\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (type === RESPONSE && typeof requestId === 'number') {\n      const callback = this.requestCallbackMap.get(requestId);\n      if (typeof callback !== 'function') {\n        this.logger.error(`Callback for request ${requestId} does not exist`);\n        return;\n      }\n      const { success, code, text } = value;\n      if (typeof success !== 'boolean') {\n        this.logger.error('Response message contained an invalid value success property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value success property');\n        return;\n      }\n      if (typeof code !== 'number') {\n        this.logger.error('Response message contained an invalid value code property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value code property');\n        return;\n      }\n      if (typeof text !== 'string') {\n        this.logger.error('Response message contained an invalid value text property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value text property');\n        return;\n      }\n      callback(success, code, text);\n      return;\n    }\n    switch (type) {\n      case SIGNAL:\n        try {\n          const {\n            clientId,\n            serverId,\n            socketId,\n            data,\n          } = value;\n          if (typeof serverId !== 'number') {\n            this.logger.error('Signal message contained an invalid server ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof socketId !== 'number') {\n            this.logger.error('Signal message contained an invalid socket ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof data !== 'object') {\n            this.logger.error('Signal message contained an invalid data property');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const peer = this.peerMap.get(clientId);\n          if (typeof peer === 'undefined') {\n            const signalQueue = this.signalQueueMap.get(clientId);\n            if (Array.isArray(signalQueue)) {\n              signalQueue.push(data);\n              return;\n            }\n            this.signalQueueMap.set(clientId, [data]);\n            return;\n          }\n          if (peer.destroyed || peer.destroying) {\n            return;\n          }\n          peer.signal(data);\n        } catch (error) {\n          this.logger.error('Unable to process signal message');\n          this.logger.errorStack(error);\n        }\n        break;\n      case DECLINE_INVITE_TO_SESSION:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Decline invite request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Decline invite request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const inviteDeclineHandler = this.inviteDeclineHandlerMap.get(requestHash);\n          if (typeof inviteDeclineHandler === 'function') {\n            inviteDeclineHandler();\n          }\n        } catch (error) {\n          this.logger.error('Unable to process decline invite request');\n          this.logger.errorStack(error);\n        }\n        break;\n      case ABORT_SESSION_JOIN_REQUEST:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Abort session join request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Abort session join request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const existing = this.sessionJoinRequestMap.get(requestHash);\n          if (!Array.isArray(existing)) {\n            this.logger.warn(`Unable to abort session join request for user ${userId} and session ${sessionId}, request does not exist`);\n            return;\n          }\n          this.logger.warn(`Aborting session join request for user ${userId} and session ${sessionId}`);\n          existing[1].abort();\n        } catch (error) {\n          this.logger.error('Unable to process session abort join request');\n          this.logger.errorStack(error);\n        }\n        break;\n      case SESSION_JOIN_REQUEST:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Session join request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Session join request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const existing = this.sessionJoinRequestMap.get(requestHash);\n          if (Array.isArray(existing)) {\n            this.logger.warn(`Session join request for user ${userId} and session ${sessionId} already exists`);\n            await existing[0];\n            return;\n          }\n          const sessionJoinHandler = this.sessionJoinHandlerMap.get(sessionId);\n          if (typeof sessionJoinHandler !== 'function') {\n            this.logger.error(`Handler for session ${sessionId} does not exist`);\n            return;\n          }\n          const abortController = new AbortController();\n          abortController.signal.addEventListener('abort', () => {\n            this.sessionJoinRequestMap.delete(requestHash);\n          });\n          const promise = (async () => {\n            let response = [false, 500, 'Error in sesssion join handler'];\n            try {\n              response = await sessionJoinHandler({ userId, sessionId, abortSignal: abortController.signal });\n            } catch (error) {\n              this.logger.error(`Unable to respond to session join request for user ${userId} and session ${sessionId}, error in session join handler`);\n              this.logger.errorStack(error);\n            }\n            if (abortController.signal.aborted) {\n              this.logger.warn(`Session join request for user ${userId} and session ${sessionId} was aborted`);\n              return;\n            }\n            try {\n              await this.publish(SESSION_JOIN_RESPONSE, {\n                userId,\n                sessionId,\n                success: response[0],\n                code: response[1],\n                text: response[2],\n              }, { CustomError: SessionJoinResponseError });\n            } catch (error) {\n              this.logger.error(`Unable to send session join response for user ${userId} and session ${sessionId}`);\n              this.logger.errorStack(error);\n            }\n            this.sessionJoinRequestMap.delete(requestHash);\n          })();\n          this.sessionJoinRequestMap.set(requestHash, [promise, abortController]);\n          await promise;\n        } catch (error) {\n          this.logger.error('Unable to process session join request');\n          this.logger.errorStack(error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown message type ${type}`);\n    }\n  }\n\n  async getConnectedPeer(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer !== 'undefined' && peer.connected) {\n      return peer;\n    }\n    return new Promise((resolve, reject) => {\n      let _peer; // eslint-disable-line no-underscore-dangle\n      const cleanup = () => {\n        this.removeListener('sessionClientLeave', handleSessionClientLeave);\n        this.removeListener('connect', handleConnect);\n        this.removeListener('peer', handlePeer);\n        if (typeof _peer !== 'undefined') {\n          _peer.removeListener('close', handlePeerClose);\n          _peer.removeListener('error', handlePeerError);\n        }\n      };\n      const handlePeerClose = () => {\n        cleanup();\n        reject(new Error(`Peer ${clientId} closed before connection was established`));\n      };\n      const handlePeerError = (error:Error) => {\n        cleanup();\n        reject(error);\n      };\n      const handlePeer = ({ clientId: newClientId, peer: _p }) => {\n        if (newClientId !== clientId) {\n          return;\n        }\n        _peer = _p;\n        _p.addListener('close', handlePeerClose);\n        _p.addListener('error', handlePeerError);\n      };\n      const handleConnect = ({ clientId: newClientId, peer: _p }) => {\n        if (newClientId !== clientId) {\n          return;\n        }\n        cleanup();\n        resolve(_p);\n      };\n      const handleSessionClientLeave = (oldClientId:number) => {\n        if (clientId !== oldClientId) {\n          return;\n        }\n        cleanup();\n        reject(new Error(`Client ${clientId} left before connection was established`));\n      };\n      this.addListener('sessionClientLeave', handleSessionClientLeave);\n      this.addListener('connect', handleConnect);\n      this.addListener('peer', handlePeer);\n    });\n  }\n\n  async handleSessionClientJoin(clientId:number) {\n    let interval;\n    let _peer; // eslint-disable-line no-underscore-dangle\n    let offset = 0;\n    const abortController = new AbortController();\n    const abortSignal = abortController.signal;\n    const cleanup = () => {\n      abortController.abort();\n      this.removeListener('sessionClientLeave', handleSessionClientLeave);\n      if (typeof _peer !== 'undefined') {\n        _peer.removeListener('close', handlePeerClose);\n        _peer.removeListener('data', handlePeerData);\n      }\n      this.data.removeListener('publish', handleDataPublish);\n      clearInterval(interval);\n    };\n    const handlePeerClose = () => {\n      cleanup();\n      if (this.sessionClientIds.has(clientId)) {\n        this.handleSessionClientJoin(clientId);\n      }\n    };\n    const handleSessionClientLeave = (oldClientId:number) => {\n      if (clientId !== oldClientId) {\n        return;\n      }\n      cleanup();\n    };\n    const handleDataPublish = (queue:[Array<*>, Array<*>]) => {\n      sendToPeer(new ObservedRemoveDump(queue));\n    };\n    const sendToPeer = (unpacked: any) => {\n      if (typeof peer === 'undefined') {\n        throw new Error('Peer does not exist');\n      }\n      peer.send(pack(unpacked));\n    };\n    const handlePeerData = (packed:Buffer) => {\n      const message = unpack(packed);\n      if (message instanceof Ping) {\n        sendToPeer(new Pong(message.timestamp, Date.now()));\n      } else if (message instanceof Pong) {\n        offset = (Date.now() - message.wallclock) - (performance.now() - message.timestamp) / 2;\n        this.sessionClientOffsetMap.set(clientId, offset);\n      } else if (message instanceof ObservedRemoveDump) {\n        this.data.process(message.queue);\n      }\n    };\n    this.addListener('sessionClientLeave', handleSessionClientLeave);\n    if (!this.isConnectedToClient(clientId)) {\n      await new Promise((resolve) => {\n        const handleConnect = ({ clientId: newClientId }) => {\n          if (newClientId !== clientId) {\n            return;\n          }\n          this.removeListener('connect', handleConnect);\n          abortSignal.removeEventListener('abort', handleAbort);\n          resolve();\n        };\n        const handleAbort = () => {\n          this.removeListener('connect', handleConnect);\n          abortSignal.removeEventListener('abort', handleAbort);\n          resolve();\n        };\n        this.addListener('connect', handleConnect);\n        abortSignal.addEventListener('abort', handleAbort);\n      });\n      if (abortSignal.aborted) {\n        return;\n      }\n    }\n    const peer = this.peerMap.get(clientId);\n    _peer = peer;\n    if (typeof peer === 'undefined') {\n      throw new Error('Peer does not exist');\n    }\n    peer.addListener('close', handlePeerClose);\n    peer.addListener('data', handlePeerData);\n    interval = setInterval(() => {\n      peer.send(pack(new Ping(performance.now())));\n    }, 1000);\n    peer.send(pack(new Ping(performance.now())));\n    this.data.addListener('publish', handleDataPublish);\n    handleDataPublish(this.data.dump());\n  }\n\n  declineInviteToSession(data: Object) {\n    return this.publish(DECLINE_INVITE_TO_SESSION, data, { CustomError: DeclineInviteToSessionError });\n  }\n\n  reset() {\n    clearTimeout(this.leaveSessionAfterLastClientTimeout);\n    this.handleBraidSet(this.name, []);\n  }\n\n  close() {\n    this.reset();\n    this.active = false;\n    this.onIdle().catch((error) => {\n      this.logger.error('Error in queue during close');\n      this.logger.errorStack(error);\n    }).finally(() => {\n      this.braidClient.data.removeListener('set', this.handleBraidSet);\n      this.braidClient.removeListener('close', this.handleBraidClose);\n      this.braidClient.removeListener('closeRequested', this.handleBraidCloseRequested);\n      this.braidClient.removeListener('reconnect', this.handleBraidReconnect);\n      this.braidClient.stopPublishing(this.publishName);\n      this.braidClient.removeServerEventListener(this.name);\n      this.braidClient.unsubscribe(this.name);\n    });\n    this.emit('close');\n  }\n}\n\nconst publish = (braidClient:BraidClient, abortSignal: AbortSignal, roomId:string, type:string, value:Object, options?: { timeoutDuration?: number, CustomError?: Class<RequestError> } = {}) => {\n  const name = `signal/${roomId}`;\n  const publishName = `signal/${roomId}/${Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(36)}`;\n  const timeoutDuration = typeof options.timeoutDuration === 'number' ? options.timeoutDuration : 5000;\n  const CustomError = typeof options.CustomError === 'function' ? options.CustomError : RequestError;\n  const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n  return new Promise((resolve, reject) => {\n    const cleanup = () => {\n      clearTimeout(timeout);\n      abortSignal.removeEventListener('abort', handleAbort);\n      braidClient.removeServerEventListener(name);\n      braidClient.stopPublishing(publishName);\n    };\n    const handleAbort = () => {\n      cleanup();\n      reject(new AbortError(`Publish request aborted before ${type} request completed`));\n    };\n    const timeout = setTimeout(() => {\n      cleanup();\n      reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n    }, timeoutDuration);\n    const handleMessage = (message:{ requestId?: number, type:string, value:Object }) => {\n      if (typeof message !== 'object') {\n        return;\n      }\n      const { requestId: responseId, type: responseType, value: responseValue } = message;\n      if (responseType !== RESPONSE) {\n        return;\n      }\n      if (responseId !== requestId) {\n        return;\n      }\n      const { success, code, text } = responseValue;\n      cleanup();\n      if (success) {\n        resolve({ code, text });\n        return;\n      }\n      reject(new CustomError(text, code));\n    };\n    abortSignal.addEventListener('abort', handleAbort);\n    Promise.all([\n      braidClient.startPublishing(publishName),\n      braidClient.addServerEventListener(name, handleMessage),\n    ]).then(() => {\n      braidClient.publish(publishName, { requestId, type, value });\n    }).catch((error) => {\n      cleanup();\n      reject(error);\n    });\n  });\n};\n\nBond.declineInviteToSession = (braidClient: BraidClient, abortSignal:AbortSignal, data: { roomId: string }) => {\n  const { roomId } = data;\n  return publish(braidClient, abortSignal, roomId, DECLINE_INVITE_TO_SESSION, data, { CustomError: DeclineInviteToSessionError });\n};\n\n"],"file":"index.js"}