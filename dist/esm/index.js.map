{"version":3,"sources":["../../src/index.js"],"names":["EventEmitter","SimplePeer","PQueue","SIGNAL","START_SESSION","LEAVE_SESSION","RESPONSE","RequestError","RequestTimeoutError","Bond","constructor","braidClient","roomId","userId","options","name","ready","init","logger","wrtc","socketHashSet","Set","userIds","peerMap","Map","queueMap","requestCallbackMap","signalQueueMap","handleSet","key","values","oldUserIds","newSocketHashes","oldSocketHashes","socketHash","includes","push","delete","peerId","split","add","has","emit","data","addListener","on","addToQueue","connectToPeer","disconnectFromPeer","promise","Promise","resolve","reject","handleClose","removeListener","handleValue","handleError","Error","value","error","get","all","subscribe","addServerEventListener","handleMessage","bind","startPublishing","queueId","func","queue","newQueue","concurrency","set","publish","type","timeoutDuration","requestId","Math","floor","random","Number","MAX_SAFE_INTEGER","timeout","setTimeout","handleResponse","success","code","text","clearTimeout","serverIdString","socketIdString","serverId","parseInt","socketId","peer","initiator","handleConnect","handleSignal","handlePeerClose","info","handlePeerError","errorStack","signalQueue","Array","isArray","length","shift","signal","destroy","onIdle","size","queueMicrotask","startSession","sessionId","password","leaveSession","message","JSON","stringify","callback","warn","close","stopPublishing","unsubscribe","removeServerEventListener","clear"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport type BraidClient from '@bunchtogether/braid-client';\nimport SimplePeer from 'simple-peer';\nimport PQueue from 'p-queue';\nimport {\n  SIGNAL,\n  START_SESSION,\n  LEAVE_SESSION,\n  RESPONSE,\n} from './constants';\nimport { RequestError, RequestTimeoutError } from './errors';\n\ntype Logger = {\n  debug: (string | number, ...any) => void,\n  info: (string | number, ...any) => void,\n  warn: (string | number, ...any) => void,\n  error: (string | number, ...any) => void,\n  errorStack: (error:Error | MediaError) => void,\n};\n\ntype Options = {\n  logger?: Logger,\n  wrtc?: Object\n}\n\nexport class Bond extends EventEmitter {\n  declare roomId: string;\n  declare userId: string;\n  declare name: string;\n  declare braidClient: BraidClient;\n  declare logger: Logger;\n  declare ready: Promise<void>;\n  declare socketHashSet: Set<string>;\n  declare userIds: Set<string>;\n  declare wrtc: void | Object;\n  declare peerMap: Map<string, SimplePeer>;\n  declare queueMap: Map<string, PQueue>;\n  declare handleSet: (string, any) => void;\n  declare signalQueueMap: Map<string, Array<[string, Object]>>;\n  declare requestCallbackMap: Map<number, (boolean, number, string) => void | Promise<void>>;\n\n  constructor(braidClient: BraidClient, roomId:string, userId:string, options?: Options = {}) {\n    super();\n    this.roomId = roomId;\n    this.userId = userId;\n    const name = `signal/${this.roomId}`;\n    this.name = name;\n    this.braidClient = braidClient;\n    this.ready = this.init();\n    this.logger = options.logger || braidClient.logger;\n    this.wrtc = options.wrtc;\n    this.socketHashSet = new Set();\n    this.userIds = new Set();\n    this.peerMap = new Map();\n    this.queueMap = new Map();\n    this.requestCallbackMap = new Map();\n    this.signalQueueMap = new Map();\n    this.handleSet = (key:string, values:Array<string>) => {\n      if (key !== name) {\n        return;\n      }\n      const oldUserIds = this.userIds;\n      this.userIds = new Set();\n      const newSocketHashes = [];\n      const oldSocketHashes = [];\n      for (const socketHash of this.socketHashSet) {\n        if (!values.includes(socketHash)) {\n          oldSocketHashes.push(socketHash);\n          this.socketHashSet.delete(socketHash);\n        }\n      }\n      for (const socketHash of values) {\n        const [peerId] = socketHash.split(':');\n        if (peerId === userId) {\n          continue;\n        }\n        this.userIds.add(peerId);\n        if (!this.socketHashSet.has(socketHash)) {\n          newSocketHashes.push(socketHash);\n          this.socketHashSet.add(socketHash);\n        }\n      }\n      for (const socketHash of oldSocketHashes) {\n        this.emit('socketLeave', socketHash);\n      }\n      for (const socketHash of newSocketHashes) {\n        this.emit('socketJoin', socketHash);\n      }\n      for (const peerId of oldUserIds) {\n        if (!this.userIds.has(peerId)) {\n          this.emit('leave', peerId);\n        }\n      }\n      for (const peerId of this.userIds) {\n        if (!oldUserIds.has(peerId)) {\n          this.emit('join', peerId);\n        }\n      }\n    };\n    this.braidClient.data.addListener('set', this.handleSet);\n    this.on('socketJoin', (socketHash:string) => {\n      this.addToQueue(socketHash, () => this.connectToPeer(socketHash));\n    });\n    this.on('socketLeave', (socketHash:string) => {\n      this.addToQueue(socketHash, () => this.disconnectFromPeer(socketHash));\n    });\n  }\n\n\n  async init() {\n    const promise = new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(new Error('Closed before initialization completed'));\n      };\n      const handleValue = (key:string, value:any) => {\n        if (key !== this.name) {\n          return;\n        }\n        if (typeof value === 'undefined') {\n          return;\n        }\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(error);\n      };\n      this.addListener('close', handleClose);\n      this.braidClient.data.addListener('set', handleValue);\n      this.braidClient.addListener('error', handleError);\n      handleValue(this.name, this.braidClient.data.get(this.name));\n    });\n    try {\n      await Promise.all([\n        this.braidClient.subscribe(this.name),\n        this.braidClient.addServerEventListener(this.name, this.handleMessage.bind(this)),\n      ]);\n      await this.braidClient.startPublishing(this.name);\n      await promise;\n    } catch (error) {\n      this.braidClient.logger.error(`Unable to join ${this.roomId}`);\n      throw error;\n    }\n  }\n\n  addToQueue(queueId:string, func:() => Promise<void>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      return queue.add(func);\n    }\n    const newQueue = new PQueue({ concurrency: 1 });\n    const promise = newQueue.add(func);\n    this.queueMap.set(queueId, newQueue);\n    newQueue.on('idle', () => {\n      this.queueMap.delete(queueId);\n    });\n    return promise;\n  }\n\n  async publish(type:string, value:Object, timeoutDuration?: number = 5000):Promise<{ text:string, code:number }> {\n    await this.ready;\n    const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        this.requestCallbackMap.delete(requestId);\n        reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n      }, timeoutDuration);\n      const handleResponse = (success:boolean, code: number, text:string) => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        if (success) {\n          resolve({ code, text });\n          return;\n        }\n        reject(new RequestError(text, code));\n      };\n      this.requestCallbackMap.set(requestId, handleResponse);\n      this.braidClient.publish(this.name, { requestId, type, value });\n    });\n  }\n\n  async connectToPeer(socketHash:string) {\n    const [peerId, serverIdString, socketIdString] = socketHash.split(':');\n    const serverId = parseInt(serverIdString, 10);\n    const socketId = parseInt(socketIdString, 10);\n    const peer = new SimplePeer({ initiator: peerId > this.userId, wrtc: this.wrtc });\n    this.peerMap.set(socketHash, peer);\n    await new Promise((resolve) => {\n      const timeout = setTimeout(() => {\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        resolve();\n      }, 5000);\n      const handleConnect = () => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        const handlePeerClose = () => {\n          this.logger.info(`Peer ${socketHash} disconnected`);\n          peer.removeListener('error', handlePeerError);\n          peer.removeListener('close', handlePeerClose);\n          this.emit('disconnect', { peerId, serverId, socketId, peer });\n        };\n        const handlePeerError = (error:Error) => {\n          this.logger.error(`Peer ${socketHash} error`);\n          this.logger.errorStack(error);\n          this.emit('peerError', { error, peerId, serverId, socketId, peer });\n        };\n        peer.addListener('close', handlePeerClose);\n        peer.addListener('error', handlePeerError);\n        this.emit('connect', { peerId, serverId, socketId, peer });\n        resolve();\n      };\n      const handleSignal = async (data:Object) => {\n        try {\n          await this.publish(SIGNAL, { peerId, serverId, socketId, data });\n        } catch (error) {\n          this.logger.error(`Unable to signal ${socketHash}`);\n          this.logger.errorStack(error);\n        }\n      };\n      const handleClose = () => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.logger.error(`Error connecting to ${peerId}`);\n        this.logger.errorStack(error);\n        this.emit('error', error);\n        resolve();\n      };\n      peer.addListener('error', handleError);\n      peer.addListener('connect', handleConnect);\n      peer.addListener('signal', handleSignal);\n      this.addListener('close', handleClose);\n      const signalQueue = this.signalQueueMap.get(socketHash);\n      if (Array.isArray(signalQueue)) {\n        while (signalQueue.length > 0) {\n          const data = signalQueue.shift();\n          peer.signal(data);\n        }\n      }\n    });\n  }\n\n  async disconnectFromPeer(socketHash:string) {\n    const peer = this.peerMap.get(socketHash);\n    if (typeof peer === 'undefined') {\n      return;\n    }\n    peer.destroy();\n    this.peerMap.delete(socketHash);\n  }\n\n  async onIdle() {\n    while (this.queueMap.size > 0) {\n      for (const queue of this.queueMap.values()) {\n        await queue.onIdle();\n      }\n      // $FlowFixMe\n      await new Promise((resolve) => queueMicrotask(resolve));\n    }\n  }\n\n  startSession(sessionId:string, password?:string) {\n    return this.publish(START_SESSION, { sessionId, password });\n  }\n\n  leaveSession() {\n    return this.publish(LEAVE_SESSION, {});\n  }\n\n  handleMessage(message:{ requestId?: number, type:string, value:Object }) {\n    if (typeof message !== 'object') {\n      this.logger.error('Invalid message format');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    const { requestId, type, value } = message;\n    if (typeof type !== 'string') {\n      this.logger.error('Invalid message format, type property should be of type \"string\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (typeof value !== 'object') {\n      this.logger.error('Invalid message format, value property should be of type \"object\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (type === RESPONSE && typeof requestId === 'number') {\n      const callback = this.requestCallbackMap.get(requestId);\n      if (typeof callback !== 'function') {\n        this.logger.error(`Callback for request ${requestId} does not exist`);\n        return;\n      }\n      const { success, code, text } = value;\n      if (typeof success !== 'boolean') {\n        this.logger.error('Response message contained an invalid value success property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value success property');\n        return;\n      }\n      if (typeof code !== 'number') {\n        this.logger.error('Response message contained an invalid value code property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value code property');\n        return;\n      }\n      if (typeof text !== 'string') {\n        this.logger.error('Response message contained an invalid value text property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value text property');\n        return;\n      }\n      callback(success, code, text);\n      return;\n    }\n    switch (type) {\n      case SIGNAL:\n        try {\n          const {\n            peerId,\n            serverId,\n            socketId,\n            data,\n          } = value;\n          if (typeof peerId !== 'string') {\n            this.logger.error('Signal message contained an invalid peer ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof serverId !== 'number') {\n            this.logger.error('Signal message contained an invalid server ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof socketId !== 'number') {\n            this.logger.error('Signal message contained an invalid socket ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof data !== 'object') {\n            this.logger.error('Signal message contained an invalid data property');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const socketHash = `${peerId}:${serverId}:${socketId}`;\n          const peer = this.peerMap.get(socketHash);\n          if (typeof peer === 'undefined') {\n            const signalQueue = this.signalQueueMap.get(socketHash);\n            if (Array.isArray(signalQueue)) {\n              signalQueue.push(data);\n              return;\n            }\n            this.signalQueueMap.set(socketHash, [data]);\n            return;\n          }\n          peer.signal(data);\n        } catch (error) {\n          this.logger.error('Unable to process signal message');\n          this.logger.errorStack(error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown message type ${type}`);\n    }\n  }\n\n  close() {\n    const oldSocketHashes = [...this.socketHashSet];\n    const oldUserIds = [...this.userIds];\n    this.braidClient.data.removeListener('set', this.handleSet);\n    this.braidClient.stopPublishing(this.name);\n    this.braidClient.unsubscribe(this.name);\n    this.braidClient.removeServerEventListener(this.name);\n    this.socketHashSet.clear();\n    this.userIds.clear();\n    for (const socketHash of oldSocketHashes) {\n      this.emit('socketLeave', socketHash);\n    }\n    for (const userId of oldUserIds) {\n      this.emit('leave', userId);\n    }\n    this.emit('close');\n  }\n}\n\n"],"file":"index.js"}