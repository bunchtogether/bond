{"version":3,"sources":["../../src/index.js"],"names":["EventEmitter","ObservedRemoveMap","SimplePeer","PQueue","pack","unpack","SIGNAL","START_SESSION","LEAVE_SESSION","JOIN_SESSION","INVITE_TO_SESSION","DECLINE_INVITE_TO_SESSION","SESSION_QUEUE","ABORT_SESSION_JOIN_REQUEST","SESSION_JOIN_REQUEST","SESSION_JOIN_RESPONSE","REMOVE_FROM_SESSION","CANCEL_INVITE_TO_SESSION","RESPONSE","AUTOMATIC_DISCOVERY_ROOM_ID","AbortError","RequestError","StartSessionError","RequestTimeoutError","JoinSessionError","LeaveSessionError","SignalError","SessionJoinResponseError","ClientClosedError","InviteToSessionError","InvitationDeclinedError","InvitedUserLeftError","InvitationTimeoutError","DeclineInviteToSessionError","RemoveFromSessionError","CancelInviteToSessionError","InvitationCancelledError","AbortSessionJoinError","Ping","Pong","ObservedRemoveDump","getSocketMap","values","Map","map","x","socketHash","socketId","serverId","userId","clientId","sessionId","getSessionId","getPeerIds","Set","getSessionMap","socketMap","socket","sessionClientMap","get","set","Bond","constructor","braidClient","roomId","options","active","Math","floor","random","Number","MAX_SAFE_INTEGER","localConnectionsOnly","name","publishName","toString","logger","peerOptions","userIds","peerMap","peerReconnectMap","queueMap","sessionMap","inviteDeclineHandlerMap","requestCallbackMap","signalQueueMap","peerDisconnectTimeoutMap","sessionJoinHandlerMap","sessionJoinRequestMap","data","bufferPublishing","sessionClientOffsetMap","preApprovedSessionUserIdSet","peerAddTrackHandlerMap","addListener","handleSessionClientJoin","bind","_ready","init","ready","joinSession","socketData","has","info","clearTimeout","delete","addToQueue","connectToPeer","setTimeout","disconnectFromPeer","sessionClientIds","size","leaveSessionAfterLastClientTimeout","leaveSession","error","errorStack","clear","handleBraidSet","key","oldSessionId","newSessionId","oldSocketMap","newSocketMap","oldUserIds","newUserIds","oldSessionMap","newSessionMap","oldLocalSessionSocketMap","newLocalSessionSocketMap","emit","peerUserId","oldSessionSocketMap","newSessionSocketMap","handleBraidClose","reset","handleBraidCloseRequested","close","handleBraidReconnect","isReconnecting","startedSessionId","joinedSessionId","handleInitialized","startSession","catch","removeListener","handleClose","handleError","keys","promise","Promise","resolve","reject","handleValue","Error","value","all","subscribe","addServerEventListener","handleMessage","startPublishing","queueId","func","queue","add","newQueue","concurrency","on","publish","type","timeoutDuration","CustomError","requestId","timeout","handleResponse","success","code","text","isConnectedToClient","peer","connected","reconnectCount","reconnectDelay","round","handleSocketLeave","oldSocketHash","existingPeer","Object","assign","initiator","config","iceServers","addPeerListeners","cleanup","handleSignal","handleStream","handlePeerError","handlePeerClose","handlePeerReconnect","stream","getTracks","forEach","track","stop","dispatchEvent","Event","warn","handleConnect","candidate","address","split","sdp","replace","signalQueue","Array","isArray","length","shift","signal","addStream","getConnectedPeer","addTrackHandler","event","MediaStreamTrackEvent","addTrack","addEventListener","removeStream","removeEventListener","destroy","onIdle","queueMicrotask","didStartSession","removeFromSession","cancelInviteToSession","inviteToSession","sessionJoinHandler","hasSessionId","globalThis","crypto","randomUUID","didCancel","handleCancelInviteBeforePublish","cancelledSessionId","cancelledUserId","handleSessionJoin","handleLeave","handleSession","handleCancelInvite","isOnlySocketForUserId","handleDecline","previousStartedSessionId","wrappedSessionJoinHandler","didJoinSession","previousJoinedSessionId","abortJoinSession","message","JSON","stringify","callback","push","destroyed","destroying","requestHash","inviteDeclineHandler","existing","abort","abortController","AbortController","response","abortSignal","aborted","_peer","handleSessionClientLeave","handlePeer","newClientId","_p","oldClientId","interval","offset","handlePeerData","handleDataPublish","clearInterval","sendToPeer","unpacked","send","packed","timestamp","Date","now","wallclock","performance","process","handleAbort","setInterval","dump","declineInviteToSession","stopPublishing","removeServerEventListener","unsubscribe","responseId","responseType","responseValue","then","getLocalRoomId","_roomId","bond","localKey","negotiatedRoomId","handleSet","remoteRoomId","parseInt"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport ObservedRemoveMap from 'observed-remove/dist/map';\nimport type BraidClient from '@bunchtogether/braid-client';\nimport SimplePeer from 'simple-peer';\nimport PQueue from 'p-queue';\nimport {\n  pack,\n  unpack,\n} from 'msgpackr';\nimport {\n  SIGNAL,\n  START_SESSION,\n  LEAVE_SESSION,\n  JOIN_SESSION,\n  INVITE_TO_SESSION,\n  DECLINE_INVITE_TO_SESSION,\n  SESSION_QUEUE,\n  ABORT_SESSION_JOIN_REQUEST,\n  SESSION_JOIN_REQUEST,\n  SESSION_JOIN_RESPONSE,\n  REMOVE_FROM_SESSION,\n  CANCEL_INVITE_TO_SESSION,\n  RESPONSE,\n  AUTOMATIC_DISCOVERY_ROOM_ID,\n} from './constants';\nimport {\n  AbortError,\n  RequestError,\n  StartSessionError,\n  RequestTimeoutError,\n  JoinSessionError,\n  LeaveSessionError,\n  SignalError,\n  SessionJoinResponseError,\n  ClientClosedError,\n  InviteToSessionError,\n  InvitationDeclinedError,\n  InvitedUserLeftError,\n  InvitationTimeoutError,\n  DeclineInviteToSessionError,\n  RemoveFromSessionError,\n  CancelInviteToSessionError,\n  InvitationCancelledError,\n  AbortSessionJoinError,\n} from './errors';\nimport {\n  Ping,\n  Pong,\n  ObservedRemoveDump,\n} from './messagepack';\n\ntype Logger = {\n  debug: (string | number, ...any) => void,\n  info: (string | number, ...any) => void,\n  warn: (string | number, ...any) => void,\n  error: (string | number, ...any) => void,\n  errorStack: (error:Error | MediaError) => void,\n};\n\ntype Options = {\n  peerOptions?: Object,\n  logger?: Logger,\n  sessionId?: string,\n  localConnectionsOnly?: boolean\n}\n\nexport type SessionJoinHandler = ({ sessionId: string, userId: string, abortSignal: AbortSignal }) => [boolean, number, string] | Promise<[boolean, number, string]>;\nexport type Connection = [number, number, string, number, string | false];\nexport type Socket = { socketHash: string, socketId: number, serverId: number, userId: string, clientId: number, sessionId: string | false };\n\nconst getSocketMap = (values?:Array<Connection>):Map<string, Socket> => {\n  if (typeof values === 'undefined') {\n    return new Map();\n  }\n  return new Map(values.map((x) => {\n    const socketHash = `${x[0]}:${x[1]}`;\n    return [socketHash, { socketHash, socketId: x[0], serverId: x[1], userId: x[2], clientId: x[3], sessionId: x[4] }];\n  }));\n};\n\nconst getSessionId = (values?:Array<Connection>, clientId:number):(string | false) => {\n  if (typeof values === 'undefined') {\n    return false;\n  }\n  for (const x of values) {\n    if (x[3] === clientId) {\n      return x[4] || false;\n    }\n  }\n  return false;\n};\n\nconst getPeerIds = (values?:Array<Connection>):Set<string> => {\n  if (typeof values === 'undefined') {\n    return new Set();\n  }\n  return new Set(values.map((x) => x[2]));\n};\n\nconst getSessionMap = (socketMap:Map<string, Socket>):Map<string | false, Map<number, Socket>> => {\n  const map = new Map();\n  for (const socket of socketMap.values()) {\n    const { clientId, sessionId } = socket;\n    const sessionClientMap = map.get(sessionId);\n    if (typeof sessionClientMap === 'undefined') {\n      map.set(sessionId, new Map([[clientId, socket]]));\n    } else {\n      sessionClientMap.set(clientId, socket);\n    }\n  }\n  return map;\n};\n\nexport class Bond extends EventEmitter {\n  static declineInviteToSession: (BraidClient, AbortSignal, { roomId: string, userId: string, clientId: number, sessionId: string, data: Object }) => Promise<{ code:number, text:string }>;\n  static getLocalRoomId: (BraidClient, string | false, string, AbortSignal, Options) => Promise<string>;\n\n  declare roomId: string;\n  declare clientId: number;\n  declare userId: string;\n  declare name: string;\n  declare publishName: string;\n  declare braidClient: BraidClient;\n  declare logger: Logger;\n  declare _ready: Promise<void>;\n  declare ready: Promise<void>;\n  declare socketMap: Map<string, Socket>;\n  declare sessionMap: Map<string | false, Map<number, Socket>>;\n  declare userIds: Set<string>;\n  declare peerOptions: void | Object;\n  declare peerMap: Map<number, SimplePeer>;\n  declare peerReconnectMap: Map<number, number>;\n  declare queueMap: Map<string | number, PQueue>;\n  declare handleBraidSet: (string, any) => void;\n  declare handleBraidClose: () => void;\n  declare handleBraidCloseRequested: () => void;\n  declare handleBraidReconnect: (boolean) => void;\n  declare signalQueueMap: Map<number, Array<[string, Object]>>;\n  declare requestCallbackMap: Map<number, (boolean, number, string) => void | Promise<void>>;\n  declare inviteDeclineHandlerMap: Map<string, () => Promise<void>>;\n  declare sessionId: false | string;\n  declare startedSessionId: void | string;\n  declare joinedSessionId: void | string;\n  declare active: boolean;\n  declare peerDisconnectTimeoutMap: Map<number, TimeoutID>;\n  declare sessionJoinHandlerMap: Map<string, SessionJoinHandler>;\n  declare sessionJoinRequestMap: Map<string, [Promise<void>, AbortController]>;\n  declare data: ObservedRemoveMap<string | number, any>;\n  declare sessionClientOffsetMap: Map<number, number>;\n  declare leaveSessionAfterLastClientTimeout: void | TimeoutID;\n  declare preApprovedSessionUserIdSet: Set<string>;\n  declare peerAddTrackHandlerMap: Map<Object, (Event) => void>;\n  declare localConnectionsOnly: boolean;\n\n  constructor(braidClient: BraidClient, roomId:string, userId:string, options?: Options = {}) {\n    super();\n    this.active = true;\n    this.clientId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    this.userId = userId;\n    this.roomId = roomId;\n    this.sessionId = false;\n    this.localConnectionsOnly = !!options.localConnectionsOnly;\n    const name = `signal/${this.roomId}`;\n    this.name = name;\n    this.publishName = `signal/${this.roomId}/${this.clientId.toString(36)}`;\n    this.braidClient = braidClient;\n    this.logger = options.logger || braidClient.logger;\n    this.peerOptions = options.peerOptions;\n    this.socketMap = new Map();\n    this.userIds = new Set();\n    this.peerMap = new Map();\n    this.peerReconnectMap = new Map();\n    this.queueMap = new Map();\n    this.sessionMap = new Map();\n    this.inviteDeclineHandlerMap = new Map();\n    this.requestCallbackMap = new Map();\n    this.signalQueueMap = new Map();\n    this.peerDisconnectTimeoutMap = new Map();\n    this.sessionJoinHandlerMap = new Map();\n    this.sessionJoinRequestMap = new Map();\n    this.data = new ObservedRemoveMap([], { bufferPublishing: 0 });\n    this.sessionClientOffsetMap = new Map();\n    this.preApprovedSessionUserIdSet = new Set();\n    this.peerAddTrackHandlerMap = new Map();\n    this.addListener('sessionClientJoin', this.handleSessionClientJoin.bind(this));\n    this._ready = this.init(); // eslint-disable-line no-underscore-dangle\n    if (typeof options.sessionId === 'string') {\n      this.ready = this.joinSession(options.sessionId);\n    } else {\n      this.ready = this._ready; // eslint-disable-line no-underscore-dangle\n    }\n    this.addListener('socketJoin', (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (clientId === this.clientId) {\n        return;\n      }\n      if (this.peerDisconnectTimeoutMap.has(clientId)) {\n        this.logger.info(`Clearing client ${clientId} disconnect timeout after socket join`);\n        clearTimeout(this.peerDisconnectTimeoutMap.get(clientId));\n        this.peerDisconnectTimeoutMap.delete(clientId);\n      }\n      this.addToQueue(clientId, () => this.connectToPeer(socketData));\n    });\n    this.addListener('socketLeave', (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (clientId === this.clientId) {\n        return;\n      }\n      clearTimeout(this.peerDisconnectTimeoutMap.get(clientId));\n      if (this.active) {\n        this.peerDisconnectTimeoutMap.set(clientId, setTimeout(() => {\n          this.peerDisconnectTimeoutMap.delete(clientId);\n          this.addToQueue(clientId, () => this.disconnectFromPeer(socketData));\n        }, 15000));\n      } else {\n        this.addToQueue(clientId, () => this.disconnectFromPeer(socketData));\n      }\n    });\n    this.addListener('sessionClientJoin', () => {\n      const sessionClientIds = this.sessionClientIds;\n      if (sessionClientIds.size > 1) {\n        return;\n      }\n      clearTimeout(this.leaveSessionAfterLastClientTimeout);\n    });\n    this.addListener('sessionClientLeave', async () => {\n      const sessionClientIds = this.sessionClientIds;\n      if (sessionClientIds.size > 1) {\n        return;\n      }\n      this.leaveSessionAfterLastClientTimeout = setTimeout(async () => {\n        try {\n          await this.leaveSession();\n        } catch (error) {\n          this.logger.error('Unable to leave session after timeout when last session closed');\n          this.logger.errorStack(error);\n        }\n      }, 5000);\n    });\n\n    this.addListener('session', () => {\n      this.data.clear();\n      this.sessionClientOffsetMap.clear();\n    });\n\n    this.handleBraidSet = (key:string, values:Array<Connection>) => {\n      if (key !== name) {\n        return;\n      }\n      this.active = true;\n      const oldSessionId = this.sessionId;\n      const newSessionId = getSessionId(values, this.clientId);\n      const oldSocketMap = this.socketMap;\n      const newSocketMap = getSocketMap(values);\n      const oldUserIds = this.userIds;\n      const newUserIds = getPeerIds(values);\n      const oldSessionMap = this.sessionMap;\n      const newSessionMap = getSessionMap(newSocketMap);\n      const oldLocalSessionSocketMap = typeof oldSessionId === 'string' ? oldSessionMap.get(oldSessionId) || new Map() : new Map();\n      const newLocalSessionSocketMap = typeof newSessionId === 'string' ? newSessionMap.get(newSessionId) || new Map() : new Map();\n      this.sessionId = newSessionId;\n      this.userIds = newUserIds;\n      this.socketMap = newSocketMap;\n      this.sessionMap = newSessionMap;\n      if (newSessionId !== oldSessionId) {\n        this.emit('session', newSessionId);\n      }\n      for (const [socketHash, socketData] of oldSocketMap) {\n        if (!newSocketMap.has(socketHash)) {\n          this.emit('socketLeave', socketData);\n        }\n      }\n      for (const [socketHash, socketData] of newSocketMap) {\n        if (!oldSocketMap.has(socketHash)) {\n          this.emit('socketJoin', socketData);\n        }\n      }\n      for (const peerUserId of oldUserIds) {\n        if (!newUserIds.has(peerUserId)) {\n          this.emit('leave', peerUserId);\n        }\n      }\n      for (const peerUserId of newUserIds) {\n        if (!oldUserIds.has(peerUserId)) {\n          this.emit('join', peerUserId);\n        }\n      }\n      for (const [clientId, socketData] of oldLocalSessionSocketMap) {\n        if (clientId === this.clientId) {\n          continue;\n        }\n        if (!newLocalSessionSocketMap.has(clientId)) {\n          this.emit('sessionClientLeave', clientId, socketData);\n        }\n      }\n      for (const [clientId, socketData] of newLocalSessionSocketMap) {\n        if (clientId === this.clientId) {\n          continue;\n        }\n        if (!oldLocalSessionSocketMap.has(clientId)) {\n          this.emit('sessionClientJoin', clientId, socketData);\n        }\n      }\n      for (const [sessionId, oldSessionSocketMap] of oldSessionMap) {\n        const newSessionSocketMap = newSessionMap.get(sessionId);\n        if (typeof newSessionSocketMap === 'undefined') {\n          for (const socketData of oldSessionSocketMap.values()) {\n            this.emit('sessionLeave', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of oldSessionSocketMap) {\n            if (!newSessionSocketMap.has(socketHash)) {\n              this.emit('sessionLeave', socketData);\n            }\n          }\n        }\n      }\n      for (const [sessionId, newSessionSocketMap] of newSessionMap) {\n        const oldSessionSocketMap = oldSessionMap.get(sessionId);\n        if (typeof oldSessionSocketMap === 'undefined') {\n          for (const socketData of newSessionSocketMap.values()) {\n            this.emit('sessionJoin', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of newSessionSocketMap) {\n            if (!oldSessionSocketMap.has(socketHash)) {\n              this.emit('sessionJoin', socketData);\n            }\n          }\n        }\n      }\n    };\n    this.handleBraidClose = () => {\n      this.reset();\n    };\n    this.handleBraidCloseRequested = () => {\n      this.close();\n    };\n    this.handleBraidReconnect = (isReconnecting: boolean) => {\n      if (!isReconnecting) {\n        return;\n      }\n      const startedSessionId = this.startedSessionId;\n      const joinedSessionId = this.joinedSessionId;\n      const handleInitialized = () => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.info(`Restarting session ${startedSessionId}`);\n          this.startSession(startedSessionId).catch((error) => {\n            this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        if (typeof joinedSessionId === 'string') {\n          this.logger.info(`Rejoining session ${joinedSessionId}`);\n          this.joinSession(joinedSessionId).catch((error) => {\n            this.logger.error(`Unable to rejoin session ${joinedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleClose = () => {\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleError = (error:Error) => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n          this.logger.errorStack(error);\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      this.braidClient.addListener('initialized', handleInitialized);\n      this.braidClient.addListener('close', handleClose);\n      this.braidClient.addListener('error', handleError);\n    };\n    this.braidClient.data.addListener('set', this.handleBraidSet);\n    this.braidClient.addListener('close', this.handleBraidClose);\n    this.braidClient.addListener('closeRequested', this.handleBraidCloseRequested);\n    this.braidClient.addListener('reconnect', this.handleBraidReconnect);\n  }\n\n  get sessionClientMap():Map<number, Socket> {\n    const sessionId = this.sessionId;\n    if (typeof sessionId !== 'string') {\n      return new Map();\n    }\n    const sessionClientMap = this.sessionMap.get(sessionId);\n    if (typeof sessionClientMap === 'undefined') {\n      return new Map();\n    }\n    return sessionClientMap;\n  }\n\n  get sessionClientIds():Set<number> {\n    return new Set(this.sessionClientMap.keys());\n  }\n\n  async init() {\n    const promise = new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(new Error('Closed before initialization completed'));\n      };\n      const handleValue = (key:string, value:any) => {\n        if (key !== this.name) {\n          return;\n        }\n        if (typeof value === 'undefined') {\n          return;\n        }\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(error);\n      };\n      this.addListener('close', handleClose);\n      this.braidClient.data.addListener('set', handleValue);\n      this.braidClient.addListener('error', handleError);\n      handleValue(this.name, this.braidClient.data.get(this.name));\n    });\n    try {\n      await Promise.all([\n        this.braidClient.subscribe(this.name),\n        this.braidClient.addServerEventListener(this.name, this.handleMessage.bind(this)),\n      ]);\n      if (!this.active) {\n        return;\n      }\n      await promise;\n      if (!this.active) {\n        return;\n      }\n      await this.braidClient.startPublishing(this.publishName);\n    } catch (error) {\n      this.braidClient.logger.error(`Unable to join ${this.roomId}`);\n      throw error;\n    }\n  }\n\n  addToQueue(queueId:string | number, func:() => Promise<*>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      return queue.add(func);\n    }\n    const newQueue = new PQueue({ concurrency: 1 });\n    const promise = newQueue.add(func);\n    this.queueMap.set(queueId, newQueue);\n    newQueue.on('idle', () => {\n      this.queueMap.delete(queueId);\n    });\n    return promise;\n  }\n\n  async publish(type:string, value:Object, options?: { timeoutDuration?: number, CustomError?: Class<RequestError> } = {}):Promise<{ text:string, code:number }> {\n    await this._ready; // eslint-disable-line no-underscore-dangle\n    const timeoutDuration = typeof options.timeoutDuration === 'number' ? options.timeoutDuration : 5000;\n    const CustomError = typeof options.CustomError === 'function' ? options.CustomError : RequestError;\n    const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    return new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        reject(new ClientClosedError(`Client closed before ${type} request completed`));\n      };\n      const timeout = setTimeout(() => {\n        this.requestCallbackMap.delete(requestId);\n        this.removeListener('close', handleClose);\n        reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n      }, timeoutDuration);\n      const handleResponse = (success:boolean, code: number, text:string) => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        if (success) {\n          resolve({ code, text });\n          return;\n        }\n        reject(new CustomError(text, code));\n      };\n      this.addListener('close', handleClose);\n      this.requestCallbackMap.set(requestId, handleResponse);\n      this.braidClient.publish(this.publishName, { requestId, type, value });\n    });\n  }\n\n  isConnectedToClient(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return false;\n    }\n    return !!peer.connected;\n  }\n\n  async connectToPeer(socket:Socket) {\n    const { userId, serverId, socketId, clientId, socketHash } = socket;\n    const reconnectCount = this.peerReconnectMap.get(clientId) || 0;\n    const reconnectDelay = reconnectCount > 5 ? 30000 : 1000 * (reconnectCount * reconnectCount);\n    if (reconnectDelay > 0) {\n      this.logger.info(`Delaying connect by ${Math.round(reconnectDelay / 1000)} ${reconnectDelay === 1000 ? 'second' : 'seconds'} on attempt ${reconnectCount}`);\n      await new Promise((resolve) => {\n        const timeout = setTimeout(() => {\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        }, reconnectDelay);\n        const handleClose = () => {\n          clearTimeout(timeout);\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        };\n        const handleSocketLeave = ({ socketHash: oldSocketHash }:Socket) => {\n          if (socketHash !== oldSocketHash) {\n            return;\n          }\n          clearTimeout(timeout);\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        };\n        this.addListener('close', handleClose);\n        this.addListener('socketLeave', handleSocketLeave);\n      });\n      if (!this.socketMap.has(socketHash)) {\n        return;\n      }\n    }\n    const existingPeer = this.peerMap.get(clientId);\n    const options = Object.assign({}, { initiator: clientId > this.clientId }, this.peerOptions);\n    if (this.localConnectionsOnly) {\n      options.config = {\n        iceServers: [],\n      };\n    }\n    const peer = existingPeer || new SimplePeer(options);\n    this.peerMap.set(clientId, peer);\n    this.peerReconnectMap.set(clientId, reconnectCount + 1);\n    this.emit('peer', { clientId, peer });\n    const addPeerListeners = () => {\n      this.peerReconnectMap.set(clientId, 0);\n      const cleanup = () => {\n        peer.removeListener('signal', handleSignal);\n        peer.removeListener('stream', handleStream);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('peerReconnect', handlePeerReconnect);\n      };\n      const handleSignal = async (data:Object) => {\n        try {\n          await this.publish(SIGNAL, { serverId, socketId, data }, { CustomError: SignalError });\n        } catch (error) {\n          this.logger.error(`Unable to signal user ${userId} client ${clientId} closed`);\n          this.logger.errorStack(error);\n        }\n      };\n      const handleStream = (stream:MediaStream) => {\n        if (!this.sessionClientIds.has(clientId)) {\n          this.logger.error(`Received an unexpected stream from non-session user ${userId} client ${clientId}`);\n          stream.getTracks().forEach((track) => {\n            track.stop();\n            track.dispatchEvent(new Event('stop'));\n          });\n          return;\n        }\n        this.emit('stream', { stream, userId, serverId, socketId, clientId });\n      };\n      const handlePeerClose = () => {\n        this.logger.info(`Disconnected from user ${userId} client ${clientId}`);\n        cleanup();\n        this.emit('disconnect', { userId, serverId, socketId, clientId });\n        if (this.peerMap.has(clientId)) {\n          this.peerMap.delete(clientId);\n          this.connectToPeer(socket);\n          this.logger.warn(`Reconnecting to user ${userId} client ${clientId}`);\n        }\n      };\n      const handlePeerError = (error:Error) => {\n        this.logger.error(`Error in connection to user ${userId} client ${clientId}`);\n        this.logger.errorStack(error);\n        this.emit('peerError', { userId, serverId, socketId, clientId, error });\n      };\n      const handlePeerReconnect = () => {\n        this.logger.info(`Reconnected to user ${userId} client ${clientId}`);\n        cleanup();\n      };\n      peer.addListener('signal', handleSignal);\n      peer.addListener('stream', handleStream);\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('error', handlePeerError);\n      peer.addListener('peerReconnect', handlePeerReconnect);\n    };\n    if (peer.connected) {\n      peer.emit('peerReconnect');\n      addPeerListeners();\n      this.emit('connect', { userId, clientId, serverId, socketId, socketHash, peer });\n      return;\n    }\n    await new Promise((resolve) => {\n      const cleanup = () => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n      };\n      const timeout = setTimeout(() => {\n        cleanup();\n        resolve();\n      }, 5000);\n      const handleConnect = () => {\n        cleanup();\n        addPeerListeners();\n        this.emit('connect', { userId, clientId, serverId, socketId, socketHash, peer });\n        resolve();\n      };\n      const handleSignal = async (data:Object) => {\n        if (this.localConnectionsOnly) {\n          if (data.type === 'candidate') {\n            const { candidate: { candidate } } = data;\n            const address = candidate.split(' ')[4];\n            if (address !== '127.0.0.1' && address !== '::1') {\n              return;\n            }\n          } else if (data.type === 'answer' || data.type === 'offer') {\n            data.sdp = data.sdp.replace(/a=candidate[^\\s]+?\\s[^\\s]+?\\s[^\\s]+?\\s[^\\s]+?\\s(?!(127\\.0\\.0\\.1|::1)).*?\\r\\n/g, ''); // eslint-disable-line no-param-reassign\n          }\n        }\n        try {\n          await this.publish(SIGNAL, { serverId, socketId, data }, { CustomError: SignalError });\n        } catch (error) {\n          if (error instanceof SignalError && error.code === 404) {\n            this.logger.error(`Unable to signal user ${userId}, client ${clientId}, client does not exist`);\n            cleanup();\n            resolve();\n          } else {\n            this.logger.error(`Unable to signal user ${userId}, client ${clientId}`);\n            this.logger.errorStack(error);\n          }\n        }\n      };\n      const handleClose = () => {\n        cleanup();\n        resolve();\n      };\n      const handlePeerClose = () => {\n        this.logger.info(`Connection to user ${userId} client ${clientId} closed`);\n        cleanup();\n        if (this.peerMap.has(clientId)) {\n          this.peerMap.delete(clientId);\n          this.connectToPeer(socket);\n          this.logger.warn(`Reconnecting to user ${userId} client ${clientId}`);\n        }\n        resolve();\n      };\n      const handlePeerError = (error:Error) => {\n        cleanup();\n        this.logger.error(`Error connecting to ${userId}`);\n        this.logger.errorStack(error);\n        this.emit('peerError', { userId, serverId, socketId, clientId, error });\n        this.emit('error', error);\n        resolve();\n      };\n      const handleSocketLeave = ({ socketHash: oldSocketHash }:Socket) => {\n        if (socketHash !== oldSocketHash) {\n          return;\n        }\n        cleanup();\n        this.logger.warn(`Unable to connect to user ${userId} client ${clientId}, socket closed before connection was completed`);\n        resolve();\n      };\n      peer.addListener('error', handlePeerError);\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('connect', handleConnect);\n      peer.addListener('signal', handleSignal);\n      this.addListener('close', handleClose);\n      this.addListener('socketLeave', handleSocketLeave);\n      const signalQueue = this.signalQueueMap.get(clientId);\n      if (Array.isArray(signalQueue)) {\n        while (signalQueue.length > 0) {\n          const data = signalQueue.shift();\n          peer.signal(data);\n        }\n      }\n    });\n  }\n\n  async addStream(clientId:number, stream:MediaStream) {\n    const peer = await this.getConnectedPeer(clientId);\n    const addTrackHandler = (event:Event) => {\n      if (event instanceof MediaStreamTrackEvent) {\n        peer.addTrack(event.track);\n      }\n    };\n    this.peerAddTrackHandlerMap.set(stream, addTrackHandler);\n    stream.addEventListener('addtrack', addTrackHandler);\n    peer.addStream(stream);\n  }\n\n  async removeStream(clientId:number, stream:MediaStream) {\n    const peer = await this.getConnectedPeer(clientId);\n    const addTrackHandler = this.peerAddTrackHandlerMap.get(stream);\n    if (typeof addTrackHandler === 'function') {\n      stream.removeEventListener('addtrack', addTrackHandler);\n    }\n    peer.removeStream(stream);\n  }\n\n  async disconnectFromPeer({ clientId }:Socket) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return;\n    }\n    this.peerMap.delete(clientId);\n    peer.destroy();\n  }\n\n  async onIdle() {\n    while (this.queueMap.size > 0) {\n      for (const queue of this.queueMap.values()) {\n        await queue.onIdle();\n      }\n      // $FlowFixMe\n      await new Promise((resolve) => queueMicrotask(resolve));\n    }\n  }\n\n  didStartSession() {\n    if (!this.sessionId) {\n      return false;\n    }\n    return this.startedSessionId === this.sessionId;\n  }\n\n  async removeFromSession(clientId:number) {\n    const sessionId = this.sessionId;\n    if (sessionId === false) {\n      this.logger.warn(`Unable to remove client ${clientId} from session, not in a session`);\n      return;\n    }\n    const sessionClientMap = this.sessionClientMap;\n    const socket = sessionClientMap.get(clientId);\n    if (typeof socket === 'undefined') {\n      this.logger.warn(`Unable to remove client ${clientId}, client not in session ${sessionId}`);\n      return;\n    }\n    const { userId, socketId, serverId } = socket;\n    if (this.userId !== userId) {\n      this.preApprovedSessionUserIdSet.delete(userId);\n    }\n    await this.publish(REMOVE_FROM_SESSION, { userId, socketId, serverId }, { CustomError: RemoveFromSessionError });\n  }\n\n  async cancelInviteToSession(userId:string) {\n    const queue = this.queueMap.get(SESSION_QUEUE);\n    if (typeof queue !== 'undefined') {\n      await queue.onIdle();\n    }\n    const sessionId = this.sessionId; // eslint-disable-line no-undef\n    if (typeof sessionId === 'string') {\n      this.preApprovedSessionUserIdSet.delete(userId);\n      this.emit('cancelInvite', { sessionId, userId });\n      await this.publish(CANCEL_INVITE_TO_SESSION, { sessionId, userId }, { CustomError: CancelInviteToSessionError });\n    } else {\n      this.logger.warn(`Unable to cancel invite to user ${userId}, not in session`);\n    }\n  }\n\n  async inviteToSession(userId:string, options?:{ data?:Object, timeoutDuration?: number, sessionJoinHandler?: SessionJoinHandler } = {}) {\n    const { data, timeoutDuration = 30000, sessionJoinHandler } = options;\n    const queue = this.queueMap.get(SESSION_QUEUE);\n    if (typeof queue !== 'undefined') {\n      await queue.onIdle();\n    }\n    const hasSessionId = this.sessionId === 'string';\n    // $FlowFixMe\n    const sessionId = this.sessionId || globalThis.crypto.randomUUID(); // eslint-disable-line no-undef\n    let didCancel = false;\n    const handleCancelInviteBeforePublish = ({ sessionId: cancelledSessionId, userId: cancelledUserId }:{ sessionId:string, userId:string }) => {\n      if (cancelledSessionId !== sessionId) {\n        return;\n      }\n      if (cancelledUserId !== userId) {\n        return;\n      }\n      didCancel = true;\n    };\n    const leaveSession = async () => {\n      if (hasSessionId) {\n        return;\n      }\n      try {\n        await this.leaveSession();\n      } catch (error) {\n        this.logger.error('Unable to leave session');\n        this.logger.errorStack(error);\n      }\n    };\n    this.addListener('cancelInvite', handleCancelInviteBeforePublish);\n    try {\n      if (hasSessionId) {\n        this.preApprovedSessionUserIdSet.add(userId);\n        await this.publish(INVITE_TO_SESSION, { userId, sessionId, data }, { CustomError: InviteToSessionError });\n      } else {\n        await this.startSession(sessionId, sessionJoinHandler);\n        this.preApprovedSessionUserIdSet.add(userId);\n        await this.publish(INVITE_TO_SESSION, { userId, sessionId, data }, { CustomError: InviteToSessionError });\n      }\n    } catch (error) {\n      throw error;\n    } finally {\n      this.removeListener('cancelInvite', handleCancelInviteBeforePublish);\n    }\n    if (didCancel) {\n      await leaveSession();\n      throw new InvitationCancelledError(`Invitation to user ${userId} was cancelled`);\n    }\n    await new Promise((resolve, reject) => {\n      const cleanup = () => {\n        clearTimeout(timeout);\n        this.removeListener('sessionJoin', handleSessionJoin);\n        this.removeListener('close', handleClose);\n        this.removeListener('leave', handleLeave);\n        this.removeListener('session', handleSession);\n        this.removeListener('socketLeave', handleSocketLeave);\n        this.removeListener('cancelInvite', handleCancelInvite);\n        this.inviteDeclineHandlerMap.delete(`${userId}:${sessionId}`);\n      };\n      const timeout = setTimeout(async () => {\n        cleanup();\n        await leaveSession();\n        reject(new InvitationTimeoutError(`Invitation timed out after ${Math.round(timeoutDuration / 100) / 10} seconds`));\n      }, timeoutDuration);\n      const handleCancelInvite = async ({ sessionId: cancelledSessionId, userId: cancelledUserId }:{ sessionId:string, userId:string }) => {\n        if (cancelledSessionId !== sessionId) {\n          return;\n        }\n        if (cancelledUserId !== userId) {\n          return;\n        }\n        cleanup();\n        await leaveSession();\n        reject(new InvitationCancelledError(`Invitation to user ${userId} was cancelled`));\n      };\n      const handleSessionJoin = (socket: Socket) => {\n        if (socket.sessionId !== sessionId) {\n          return;\n        }\n        if (socket.userId !== userId) {\n          return;\n        }\n        cleanup();\n        resolve();\n      };\n      // Only listen for socket leave events if the user is inviting themselves\n      const handleSocketLeave = async (socket: Socket) => {\n        if (socket.userId !== this.userId) {\n          return;\n        }\n        let isOnlySocketForUserId = true;\n        for (const socketData of this.socketMap.values()) {\n          if (socketData.userId !== this.userId) {\n            continue;\n          }\n          if (socketData.clientId === this.clientId) {\n            continue;\n          }\n          isOnlySocketForUserId = false;\n        }\n        if (isOnlySocketForUserId) {\n          cleanup();\n          await leaveSession();\n          reject(new InvitedUserLeftError(`User ${userId} left before accepting the invitation`));\n        }\n      };\n      const handleSession = (newSessionId:string | false) => {\n        if (newSessionId === sessionId) {\n          return;\n        }\n        cleanup();\n        resolve();\n      };\n      const handleClose = () => {\n        cleanup();\n        reject(new ClientClosedError('Closed before invite'));\n      };\n      const handleDecline = async () => {\n        cleanup();\n        await leaveSession();\n        reject(new InvitationDeclinedError('Invitation declined'));\n      };\n      const handleLeave = async (peerUserId:string) => {\n        if (userId !== peerUserId) {\n          return;\n        }\n        cleanup();\n        await leaveSession();\n        reject(new InvitedUserLeftError(`User ${userId} left before accepting the invitation`));\n      };\n      this.inviteDeclineHandlerMap.set(`${userId}:${sessionId || ''}`, handleDecline);\n      this.addListener('sessionJoin', handleSessionJoin);\n      this.addListener('close', handleClose);\n      this.addListener('leave', handleLeave);\n      this.addListener('session', handleSession);\n      if (this.userId === userId) {\n        this.addListener('socketLeave', handleSocketLeave);\n      }\n      this.addListener('cancelInvite', handleCancelInvite);\n    });\n  }\n\n  async startSession(sessionId:string, sessionJoinHandler?: SessionJoinHandler) {\n    this.preApprovedSessionUserIdSet.clear();\n    const previousStartedSessionId = this.startedSessionId;\n    this.startedSessionId = sessionId;\n    try {\n      await this.addToQueue(SESSION_QUEUE, () => this.publish(START_SESSION, { sessionId }, { CustomError: StartSessionError }));\n    } catch (error) {\n      this.startedSessionId = previousStartedSessionId;\n      throw error;\n    }\n    delete this.joinedSessionId;\n    if (typeof sessionJoinHandler === 'function') {\n      const wrappedSessionJoinHandler = async (values) => {\n        if (this.preApprovedSessionUserIdSet.has(values.userId)) {\n          return [true, 200, 'Authorized'];\n        }\n        if (this.userId === values.userId) {\n          return [true, 200, 'Authorized'];\n        }\n        if (typeof sessionJoinHandler === 'function') {\n          return sessionJoinHandler(values);\n        }\n        return [true, 200, 'Authorized'];\n      };\n      this.sessionJoinHandlerMap.set(sessionId, wrappedSessionJoinHandler);\n    } else {\n      this.sessionJoinHandlerMap.set(sessionId, () => [true, 200, 'Authorized']);\n    }\n  }\n\n  didJoinSession() {\n    if (!this.sessionId) {\n      return false;\n    }\n    return this.joinedSessionId === this.sessionId;\n  }\n\n  async joinSession(sessionId:string, timeoutDuration?: number = 30000) {\n    const previousJoinedSessionId = this.joinedSessionId;\n    this.joinedSessionId = sessionId;\n    try {\n      await this.addToQueue(SESSION_QUEUE, () => this.publish(JOIN_SESSION, { sessionId, timeoutDuration }, { CustomError: JoinSessionError, timeoutDuration: timeoutDuration + 5000 }));\n    } catch (error) {\n      this.joinedSessionId = previousJoinedSessionId;\n      throw error;\n    }\n    const startedSessionId = this.startedSessionId;\n    delete this.startedSessionId;\n    if (typeof startedSessionId === 'string') {\n      this.sessionJoinHandlerMap.delete(startedSessionId);\n    }\n  }\n\n  async abortJoinSession() {\n    await this.publish(ABORT_SESSION_JOIN_REQUEST, { }, { CustomError: AbortSessionJoinError });\n  }\n\n  async leaveSession() {\n    try {\n      await this.addToQueue(SESSION_QUEUE, () => this.publish(LEAVE_SESSION, {}, { CustomError: LeaveSessionError }));\n      const startedSessionId = this.startedSessionId;\n      delete this.startedSessionId;\n      delete this.joinedSessionId;\n      if (typeof startedSessionId === 'string') {\n        this.sessionJoinHandlerMap.delete(startedSessionId);\n      }\n    } catch (error) {\n      if (error instanceof ClientClosedError) {\n        return;\n      }\n      throw error;\n    }\n  }\n\n  async handleMessage(message:{ requestId?: number, type:string, value:Object }) {\n    if (typeof message !== 'object') {\n      this.logger.error('Invalid message format');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    const { requestId, type, value } = message;\n    if (typeof type !== 'string') {\n      this.logger.error('Invalid message format, type property should be of type \"string\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (typeof value !== 'object') {\n      this.logger.error('Invalid message format, value property should be of type \"object\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (type === RESPONSE && typeof requestId === 'number') {\n      const callback = this.requestCallbackMap.get(requestId);\n      if (typeof callback !== 'function') {\n        this.logger.error(`Callback for request ${requestId} does not exist`);\n        return;\n      }\n      const { success, code, text } = value;\n      if (typeof success !== 'boolean') {\n        this.logger.error('Response message contained an invalid value success property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value success property');\n        return;\n      }\n      if (typeof code !== 'number') {\n        this.logger.error('Response message contained an invalid value code property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value code property');\n        return;\n      }\n      if (typeof text !== 'string') {\n        this.logger.error('Response message contained an invalid value text property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value text property');\n        return;\n      }\n      callback(success, code, text);\n      return;\n    }\n    switch (type) {\n      case SIGNAL:\n        try {\n          const {\n            clientId,\n            serverId,\n            socketId,\n            data,\n          } = value;\n          if (typeof serverId !== 'number') {\n            this.logger.error('Signal message contained an invalid server ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof socketId !== 'number') {\n            this.logger.error('Signal message contained an invalid socket ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof data !== 'object') {\n            this.logger.error('Signal message contained an invalid data property');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const peer = this.peerMap.get(clientId);\n          if (typeof peer === 'undefined') {\n            const signalQueue = this.signalQueueMap.get(clientId);\n            if (Array.isArray(signalQueue)) {\n              signalQueue.push(data);\n              return;\n            }\n            this.signalQueueMap.set(clientId, [data]);\n            return;\n          }\n          if (peer.destroyed || peer.destroying) {\n            return;\n          }\n          peer.signal(data);\n        } catch (error) {\n          this.logger.error('Unable to process signal message');\n          this.logger.errorStack(error);\n        }\n        break;\n      case DECLINE_INVITE_TO_SESSION:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Decline invite request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Decline invite request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const inviteDeclineHandler = this.inviteDeclineHandlerMap.get(requestHash);\n          if (typeof inviteDeclineHandler === 'function') {\n            inviteDeclineHandler();\n          }\n        } catch (error) {\n          this.logger.error('Unable to process decline invite request');\n          this.logger.errorStack(error);\n        }\n        break;\n      case ABORT_SESSION_JOIN_REQUEST:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Abort session join request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Abort session join request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const existing = this.sessionJoinRequestMap.get(requestHash);\n          if (!Array.isArray(existing)) {\n            this.logger.warn(`Unable to abort session join request for user ${userId} and session ${sessionId}, request does not exist`);\n            return;\n          }\n          this.logger.warn(`Aborting session join request for user ${userId} and session ${sessionId}`);\n          existing[1].abort();\n        } catch (error) {\n          this.logger.error('Unable to process session abort join request');\n          this.logger.errorStack(error);\n        }\n        break;\n      case SESSION_JOIN_REQUEST:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Session join request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Session join request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const existing = this.sessionJoinRequestMap.get(requestHash);\n          if (Array.isArray(existing)) {\n            this.logger.warn(`Session join request for user ${userId} and session ${sessionId} already exists`);\n            await existing[0];\n            return;\n          }\n          const sessionJoinHandler = this.sessionJoinHandlerMap.get(sessionId);\n          if (typeof sessionJoinHandler !== 'function') {\n            this.logger.error(`Handler for session ${sessionId} does not exist`);\n            return;\n          }\n          const abortController = new AbortController();\n          abortController.signal.addEventListener('abort', () => {\n            this.sessionJoinRequestMap.delete(requestHash);\n          });\n          const promise = (async () => {\n            let response = [false, 500, 'Error in sesssion join handler'];\n            try {\n              response = await sessionJoinHandler({ userId, sessionId, abortSignal: abortController.signal });\n            } catch (error) {\n              this.logger.error(`Unable to respond to session join request for user ${userId} and session ${sessionId}, error in session join handler`);\n              this.logger.errorStack(error);\n            }\n            if (abortController.signal.aborted) {\n              this.logger.warn(`Session join request for user ${userId} and session ${sessionId} was aborted`);\n              return;\n            }\n            try {\n              await this.publish(SESSION_JOIN_RESPONSE, {\n                userId,\n                sessionId,\n                success: response[0],\n                code: response[1],\n                text: response[2],\n              }, { CustomError: SessionJoinResponseError });\n            } catch (error) {\n              this.logger.error(`Unable to send session join response for user ${userId} and session ${sessionId}`);\n              this.logger.errorStack(error);\n            }\n            this.sessionJoinRequestMap.delete(requestHash);\n          })();\n          this.sessionJoinRequestMap.set(requestHash, [promise, abortController]);\n          await promise;\n        } catch (error) {\n          this.logger.error('Unable to process session join request');\n          this.logger.errorStack(error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown message type ${type}`);\n    }\n  }\n\n  async getConnectedPeer(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer !== 'undefined' && peer.connected) {\n      return peer;\n    }\n    return new Promise((resolve, reject) => {\n      let _peer; // eslint-disable-line no-underscore-dangle\n      const cleanup = () => {\n        this.removeListener('sessionClientLeave', handleSessionClientLeave);\n        this.removeListener('connect', handleConnect);\n        this.removeListener('peer', handlePeer);\n        if (typeof _peer !== 'undefined') {\n          _peer.removeListener('close', handlePeerClose);\n          _peer.removeListener('error', handlePeerError);\n        }\n      };\n      const handlePeerClose = () => {\n        cleanup();\n        reject(new Error(`Peer ${clientId} closed before connection was established`));\n      };\n      const handlePeerError = (error:Error) => {\n        cleanup();\n        reject(error);\n      };\n      const handlePeer = ({ clientId: newClientId, peer: _p }) => {\n        if (newClientId !== clientId) {\n          return;\n        }\n        _peer = _p;\n        _p.addListener('close', handlePeerClose);\n        _p.addListener('error', handlePeerError);\n      };\n      const handleConnect = ({ clientId: newClientId, peer: _p }) => {\n        if (newClientId !== clientId) {\n          return;\n        }\n        cleanup();\n        resolve(_p);\n      };\n      const handleSessionClientLeave = (oldClientId:number) => {\n        if (clientId !== oldClientId) {\n          return;\n        }\n        cleanup();\n        reject(new Error(`Client ${clientId} left before connection was established`));\n      };\n      this.addListener('sessionClientLeave', handleSessionClientLeave);\n      this.addListener('connect', handleConnect);\n      this.addListener('peer', handlePeer);\n    });\n  }\n\n  async handleSessionClientJoin(clientId:number) {\n    let interval;\n    let _peer; // eslint-disable-line no-underscore-dangle\n    let offset = 0;\n    const abortController = new AbortController();\n    const abortSignal = abortController.signal;\n    const cleanup = () => {\n      abortController.abort();\n      this.removeListener('sessionClientLeave', handleSessionClientLeave);\n      if (typeof _peer !== 'undefined') {\n        _peer.removeListener('close', handlePeerClose);\n        _peer.removeListener('data', handlePeerData);\n      }\n      this.data.removeListener('publish', handleDataPublish);\n      clearInterval(interval);\n    };\n    const handlePeerClose = () => {\n      cleanup();\n      if (this.sessionClientIds.has(clientId)) {\n        this.handleSessionClientJoin(clientId);\n      }\n    };\n    const handleSessionClientLeave = (oldClientId:number) => {\n      if (clientId !== oldClientId) {\n        return;\n      }\n      cleanup();\n    };\n    const handleDataPublish = (queue:[Array<*>, Array<*>]) => {\n      sendToPeer(new ObservedRemoveDump(queue));\n    };\n    const sendToPeer = (unpacked: any) => {\n      if (typeof peer === 'undefined') {\n        throw new Error('Peer does not exist');\n      }\n      peer.send(pack(unpacked));\n    };\n    const handlePeerData = (packed:Buffer) => {\n      const message = unpack(packed);\n      if (message instanceof Ping) {\n        sendToPeer(new Pong(message.timestamp, Date.now()));\n      } else if (message instanceof Pong) {\n        offset = (Date.now() - message.wallclock) - (performance.now() - message.timestamp) / 2;\n        this.sessionClientOffsetMap.set(clientId, offset);\n      } else if (message instanceof ObservedRemoveDump) {\n        this.data.process(message.queue);\n      }\n    };\n    this.addListener('sessionClientLeave', handleSessionClientLeave);\n    if (!this.isConnectedToClient(clientId)) {\n      await new Promise((resolve) => {\n        const handleConnect = ({ clientId: newClientId }) => {\n          if (newClientId !== clientId) {\n            return;\n          }\n          this.removeListener('connect', handleConnect);\n          abortSignal.removeEventListener('abort', handleAbort);\n          resolve();\n        };\n        const handleAbort = () => {\n          this.removeListener('connect', handleConnect);\n          abortSignal.removeEventListener('abort', handleAbort);\n          resolve();\n        };\n        this.addListener('connect', handleConnect);\n        abortSignal.addEventListener('abort', handleAbort);\n      });\n      if (abortSignal.aborted) {\n        return;\n      }\n    }\n    const peer = this.peerMap.get(clientId);\n    _peer = peer;\n    if (typeof peer === 'undefined') {\n      throw new Error('Peer does not exist');\n    }\n    peer.addListener('close', handlePeerClose);\n    peer.addListener('data', handlePeerData);\n    interval = setInterval(() => {\n      peer.send(pack(new Ping(performance.now())));\n    }, 1000);\n    peer.send(pack(new Ping(performance.now())));\n    this.data.addListener('publish', handleDataPublish);\n    handleDataPublish(this.data.dump());\n  }\n\n  declineInviteToSession(data: Object) {\n    return this.publish(DECLINE_INVITE_TO_SESSION, data, { CustomError: DeclineInviteToSessionError });\n  }\n\n  reset() {\n    clearTimeout(this.leaveSessionAfterLastClientTimeout);\n    this.handleBraidSet(this.name, []);\n  }\n\n  async close() {\n    this.reset();\n    this.active = false;\n    this.emit('close');\n    try {\n      await this.onIdle();\n    } catch (error) {\n      this.logger.error('Error in queue during close');\n      this.logger.errorStack(error);\n    }\n    this.braidClient.data.removeListener('set', this.handleBraidSet);\n    this.braidClient.removeListener('close', this.handleBraidClose);\n    this.braidClient.removeListener('closeRequested', this.handleBraidCloseRequested);\n    this.braidClient.removeListener('reconnect', this.handleBraidReconnect);\n    this.braidClient.stopPublishing(this.publishName);\n    this.braidClient.removeServerEventListener(this.name);\n    this.braidClient.unsubscribe(this.name);\n  }\n}\n\nconst publish = (braidClient:BraidClient, abortSignal: AbortSignal, roomId:string, type:string, value:Object, options?: { timeoutDuration?: number, CustomError?: Class<RequestError> } = {}) => {\n  const name = `signal/${roomId}`;\n  const publishName = `signal/${roomId}/${Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(36)}`;\n  const timeoutDuration = typeof options.timeoutDuration === 'number' ? options.timeoutDuration : 5000;\n  const CustomError = typeof options.CustomError === 'function' ? options.CustomError : RequestError;\n  const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n  return new Promise((resolve, reject) => {\n    const cleanup = () => {\n      clearTimeout(timeout);\n      abortSignal.removeEventListener('abort', handleAbort);\n      braidClient.removeServerEventListener(name);\n      braidClient.stopPublishing(publishName);\n    };\n    const handleAbort = () => {\n      cleanup();\n      reject(new AbortError(`Publish request aborted before ${type} request completed`));\n    };\n    const timeout = setTimeout(() => {\n      cleanup();\n      reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n    }, timeoutDuration);\n    const handleMessage = (message:{ requestId?: number, type:string, value:Object }) => {\n      if (typeof message !== 'object') {\n        return;\n      }\n      const { requestId: responseId, type: responseType, value: responseValue } = message;\n      if (responseType !== RESPONSE) {\n        return;\n      }\n      if (responseId !== requestId) {\n        return;\n      }\n      const { success, code, text } = responseValue;\n      cleanup();\n      if (success) {\n        resolve({ code, text });\n        return;\n      }\n      reject(new CustomError(text, code));\n    };\n    abortSignal.addEventListener('abort', handleAbort);\n    Promise.all([\n      braidClient.startPublishing(publishName),\n      braidClient.addServerEventListener(name, handleMessage),\n    ]).then(() => {\n      braidClient.publish(publishName, { requestId, type, value });\n    }).catch((error) => {\n      cleanup();\n      reject(error);\n    });\n  });\n};\n\nBond.declineInviteToSession = (braidClient: BraidClient, abortSignal:AbortSignal, data: { roomId: string }) => {\n  const { roomId } = data;\n  return publish(braidClient, abortSignal, roomId, DECLINE_INVITE_TO_SESSION, data, { CustomError: DeclineInviteToSessionError });\n};\n\nBond.getLocalRoomId = async (braidClient: BraidClient, _roomId:string | false, userId:string, abortSignal: AbortSignal, options?: Options = {}) => {\n  const bond = new Bond(braidClient, AUTOMATIC_DISCOVERY_ROOM_ID, userId, Object.assign({}, options, { localConnectionsOnly: true }));\n  let roomId = _roomId; // eslint-disable-line no-undef\n  const localKey = bond.clientId.toString(36);\n  const logger = options.logger || braidClient.logger;\n  const negotiatedRoomId = await new Promise((resolve, reject) => {\n    const handleSession = () => {\n      bond.data.set(localKey, roomId);\n    };\n    const handleConnect = ({ clientId, socketHash }:Socket) => {\n      const socket = bond.socketMap.get(socketHash);\n      if (typeof socket === 'undefined') {\n        return;\n      }\n      const { sessionId } = socket;\n      if (typeof sessionId !== 'string') {\n        return;\n      }\n      if (clientId > bond.clientId) {\n        bond.joinSession(sessionId).catch((error) => {\n          logger.error('Unable to join session during automatic linking');\n          logger.errorStack(error);\n        });\n      }\n    };\n    const handleSessionJoin = ({ clientId, sessionId }:Socket) => {\n      if (bond.sessionId === sessionId) {\n        return;\n      }\n      if (!bond.isConnectedToClient(clientId)) {\n        return;\n      }\n      if (typeof sessionId !== 'string') {\n        return;\n      }\n      if (clientId > bond.clientId) {\n        bond.joinSession(sessionId).catch((error) => {\n          logger.error('Unable to join session during automatic linking');\n          logger.errorStack(error);\n        });\n      }\n    };\n    const handleSet = (key:string, remoteRoomId:string | false) => {\n      if (key === localKey) {\n        return;\n      }\n      const clientId = parseInt(key, 36);\n      if (!bond.isConnectedToClient(clientId) && clientId !== bond.clientId) {\n        return;\n      }\n      if (roomId === false && remoteRoomId === false && clientId < bond.clientId) {\n        roomId = globalThis.crypto.randomUUID(); // eslint-disable-line no-undef\n        bond.data.set(localKey, roomId);\n        return;\n      } else if (typeof roomId === 'string' && typeof remoteRoomId === 'string' && clientId > bond.clientId) {\n        roomId = remoteRoomId;\n        bond.data.set(localKey, remoteRoomId);\n      } else if (roomId === false && typeof remoteRoomId === 'string') {\n        roomId = remoteRoomId;\n        bond.data.set(localKey, remoteRoomId);\n      } else if (typeof roomId !== 'string' || roomId !== remoteRoomId) {\n        return;\n      }\n      abortSignal.removeEventListener('abort', handleAbort);\n      bond.removeListener('close', handleClose);\n      bond.removeListener('connect', handleConnect);\n      bond.removeListener('sessionJoin', handleSessionJoin);\n      bond.removeListener('session', handleSession);\n      bond.data.removeListener('set', handleSet);\n      resolve(roomId);\n    };\n    const handleClose = () => {\n      abortSignal.removeEventListener('abort', handleAbort);\n      bond.removeListener('close', handleClose);\n      bond.removeListener('connect', handleConnect);\n      bond.removeListener('sessionJoin', handleSessionJoin);\n      bond.removeListener('session', handleSession);\n      bond.data.removeListener('set', handleSet);\n      reject(new ClientClosedError('Client closed before local room ID was discovered'));\n    };\n    const handleAbort = async () => {\n      abortSignal.removeEventListener('abort', handleAbort);\n      bond.removeListener('close', handleClose);\n      bond.removeListener('connect', handleConnect);\n      bond.removeListener('sessionJoin', handleSessionJoin);\n      bond.removeListener('session', handleSession);\n      bond.data.removeListener('set', handleSet);\n      try {\n        const queue = bond.queueMap.get(SESSION_QUEUE);\n        if (typeof queue !== 'undefined') {\n          await queue.onIdle();\n        }\n        await bond.close();\n      } catch (error) {\n        logger.error('Unable to close before throwing abort error');\n        logger.errorStack(error);\n      }\n      reject(new AbortError('Local room ID discovery aborted'));\n    };\n    abortSignal.addEventListener('abort', handleAbort);\n    bond.data.addListener('set', handleSet);\n    bond.addListener('close', handleClose);\n    bond.addListener('connect', handleConnect);\n    bond.addListener('sessionJoin', handleSessionJoin);\n    bond.addListener('session', handleSession);\n    bond.startSession(globalThis.crypto.randomUUID()); // eslint-disable-line no-undef\n  });\n  await bond.close();\n  return negotiatedRoomId;\n};\n\n"],"file":"index.js"}