{"version":3,"sources":["../../src/index.js"],"names":["EventEmitter","ObservedRemoveMap","SimplePeer","PQueue","pack","unpack","SIGNAL","START_SESSION","LEAVE_SESSION","JOIN_SESSION","SESSION_QUEUE","ABORT_SESSION_JOIN_REQUEST","SESSION_JOIN_REQUEST","SESSION_JOIN_RESPONSE","RESPONSE","RequestError","StartSessionError","RequestTimeoutError","JoinSessionError","LeaveSessionError","SignalError","SessionJoinResponseError","ClientClosedError","Ping","Pong","ObservedRemoveDump","getSocketMap","values","Map","map","x","socketHash","socketId","serverId","userId","clientId","sessionId","getPeerIds","Set","getSessionMap","socketMap","socket","sessionClientMap","get","set","CustomObservedRemoveMap","dequeue","publishTimeout","queueMicrotask","publish","Bond","constructor","braidClient","roomId","options","active","Math","floor","random","Number","MAX_SAFE_INTEGER","name","publishName","toString","ready","init","logger","peerOptions","userIds","peerMap","queueMap","sessionMap","requestCallbackMap","signalQueueMap","peerDisconnectTimeoutMap","sessionJoinHandlerMap","sessionJoinRequestMap","data","bufferPublishing","sessionClientOffsetMap","addListener","handleSessionClientJoin","bind","handleSet","key","oldSocketMap","newSocketMap","oldUserIds","newUserIds","oldSessionMap","newSessionMap","oldSessionClientIds","sessionClientIds","newSessionClientIds","socketData","has","emit","peerUserId","oldSessionSocketMap","newSessionSocketMap","info","clearTimeout","delete","addToQueue","connectToPeer","setTimeout","disconnectFromPeer","oldSocketData","clear","oldUserId","isReconnecting","startedSessionId","joinedSessionId","handleInitialized","startSession","catch","error","errorStack","joinSession","removeListener","handleClose","handleError","clientIds","keys","promise","Promise","resolve","reject","handleValue","Error","value","all","subscribe","addServerEventListener","handleMessage","startPublishing","queueId","func","queue","add","newQueue","concurrency","on","type","timeoutDuration","CustomError","requestId","timeout","handleResponse","success","code","text","isConnectedToClient","peer","connected","existingPeer","Object","assign","initiator","handlePeerClose","handlePeerError","handlePeerReconnect","handleConnect","handleSignal","handleSocketLeave","oldSocketHash","warn","signalQueue","Array","isArray","length","shift","signal","destroy","onIdle","size","cleanupSession","newSessionId","oldSessionId","timelineValue","didStartSession","sessionJoinHandler","didJoinSession","leaveSession","message","JSON","stringify","callback","push","destroyed","destroying","requestHash","existing","abort","abortController","AbortController","addEventListener","response","abortSignal","aborted","interval","_peer","offset","cleanup","handleSessionClientLeave","handlePeerData","handleDataPublish","clearInterval","oldClientId","sendToPeer","unpacked","send","packed","timestamp","Date","now","wallclock","performance","process","newClientId","removeEventListener","handleAbort","setInterval","dump","close","stopPublishing","unsubscribe","removeServerEventListener"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport ObservedRemoveMap from 'observed-remove/dist/map';\nimport type BraidClient from '@bunchtogether/braid-client';\nimport SimplePeer from 'simple-peer';\nimport PQueue from 'p-queue';\nimport {\n  pack,\n  unpack,\n} from 'msgpackr';\nimport {\n  SIGNAL,\n  START_SESSION,\n  LEAVE_SESSION,\n  JOIN_SESSION,\n  SESSION_QUEUE,\n  ABORT_SESSION_JOIN_REQUEST,\n  SESSION_JOIN_REQUEST,\n  SESSION_JOIN_RESPONSE,\n  RESPONSE,\n} from './constants';\nimport {\n  RequestError,\n  StartSessionError,\n  RequestTimeoutError,\n  JoinSessionError,\n  LeaveSessionError,\n  SignalError,\n  SessionJoinResponseError,\n  ClientClosedError,\n} from './errors';\nimport {\n  Ping,\n  Pong,\n  ObservedRemoveDump,\n} from './messagepack';\n\ntype Logger = {\n  debug: (string | number, ...any) => void,\n  info: (string | number, ...any) => void,\n  warn: (string | number, ...any) => void,\n  error: (string | number, ...any) => void,\n  errorStack: (error:Error | MediaError) => void,\n};\n\ntype Options = {\n  peerOptions?: Object,\n  logger?: Logger\n}\n\ntype SessionJoinHandler = ({ sessionId: string, userId: string, abortSignal: AbortSignal }) => [boolean, number, string] | Promise<[boolean, number, string]>;\ntype Connection = [number, number, string, number, string | false];\ntype Socket = { socketHash: string, socketId: number, serverId: number, userId: string, clientId: number, sessionId: string | false };\n\nconst getSocketMap = (values?:Array<Connection>):Map<string, Socket> => {\n  if (typeof values === 'undefined') {\n    return new Map();\n  }\n  return new Map(values.map((x) => {\n    const socketHash = `${x[0]}:${x[1]}`;\n    return [socketHash, { socketHash, socketId: x[0], serverId: x[1], userId: x[2], clientId: x[3], sessionId: x[4] }];\n  }));\n};\n\nconst getPeerIds = (values?:Array<Connection>):Set<string> => {\n  if (typeof values === 'undefined') {\n    return new Set();\n  }\n  return new Set(values.map((x) => x[2]));\n};\n\nconst getSessionMap = (socketMap:Map<string, Socket>):Map<string, Map<number, Socket>> => {\n  const map = new Map();\n  for (const socket of socketMap.values()) {\n    const { clientId, sessionId } = socket;\n    if (sessionId === false) {\n      continue;\n    }\n    const sessionClientMap = map.get(sessionId);\n    if (typeof sessionClientMap === 'undefined') {\n      map.set(sessionId, new Map([[clientId, socket]]));\n    } else {\n      sessionClientMap.set(clientId, socket);\n    }\n  }\n  return map;\n};\n\n// $FlowFixMe\nclass CustomObservedRemoveMap<K, V> extends ObservedRemoveMap<K, V> {\n  // $FlowFixMe\n  declare publishTimeout: null | true;\n\n  dequeue() {\n    if (this.publishTimeout) {\n      return;\n    }\n    this.publishTimeout = true;\n    // $FlowFixMe\n    queueMicrotask(() => this.publish());\n  }\n}\n\nexport class Bond extends EventEmitter {\n  declare roomId: string;\n  declare clientId: number;\n  declare name: string;\n  declare publishName: string;\n  declare braidClient: BraidClient;\n  declare logger: Logger;\n  declare ready: Promise<void>;\n  declare socketMap: Map<string, Socket>;\n  declare sessionMap: Map<string, Map<number, Socket>>;\n  declare userIds: Set<string>;\n  declare peerOptions: void | Object;\n  declare peerMap: Map<number, SimplePeer>;\n  declare queueMap: Map<string | number, PQueue>;\n  declare handleSet: (string, any) => void;\n  declare signalQueueMap: Map<number, Array<[string, Object]>>;\n  declare requestCallbackMap: Map<number, (boolean, number, string) => void | Promise<void>>;\n  declare sessionId: void | string;\n  declare startedSessionId: void | string;\n  declare joinedSessionId: void | string;\n  declare active: boolean;\n  declare peerDisconnectTimeoutMap: Map<number, TimeoutID>;\n  declare sessionJoinHandlerMap: Map<string, SessionJoinHandler>;\n  declare sessionJoinRequestMap: Map<string, [Promise<void>, AbortController]>;\n  declare data: CustomObservedRemoveMap<string | number, any>;\n  declare sessionClientOffsetMap: Map<number, number>;\n\n  constructor(braidClient: BraidClient, roomId:string, userId:string, options?: Options = {}) {\n    super();\n    this.active = true;\n    this.clientId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    this.roomId = roomId;\n    const name = `signal/${this.roomId}`;\n    this.name = name;\n    this.publishName = `signal/${this.roomId}/${this.clientId.toString(36)}`;\n    this.braidClient = braidClient;\n    this.ready = this.init();\n    this.logger = options.logger || braidClient.logger;\n    this.peerOptions = options.peerOptions;\n    this.socketMap = new Map();\n    this.userIds = new Set();\n    this.peerMap = new Map();\n    this.queueMap = new Map();\n    this.sessionMap = new Map();\n    this.requestCallbackMap = new Map();\n    this.signalQueueMap = new Map();\n    this.peerDisconnectTimeoutMap = new Map();\n    this.sessionJoinHandlerMap = new Map();\n    this.sessionJoinRequestMap = new Map();\n    this.data = new CustomObservedRemoveMap([], { bufferPublishing: 0 });\n    this.sessionClientOffsetMap = new Map();\n    this.addListener('sessionClientJoin', this.handleSessionClientJoin.bind(this));\n    this.handleSet = (key:string, values:Array<Connection>) => {\n      if (key !== name) {\n        return;\n      }\n      this.active = true;\n      const oldSocketMap = this.socketMap;\n      const newSocketMap = getSocketMap(values);\n      const oldUserIds = this.userIds;\n      const newUserIds = getPeerIds(values);\n      const oldSessionMap = this.sessionMap;\n      const newSessionMap = getSessionMap(newSocketMap);\n      const oldSessionClientIds = this.sessionClientIds;\n      this.userIds = newUserIds;\n      this.socketMap = newSocketMap;\n      this.sessionMap = newSessionMap;\n      const newSessionClientIds = this.sessionClientIds;\n      for (const [socketHash, socketData] of oldSocketMap) {\n        if (!newSocketMap.has(socketHash)) {\n          this.emit('socketLeave', socketData);\n        }\n      }\n      for (const [socketHash, socketData] of newSocketMap) {\n        if (!oldSocketMap.has(socketHash)) {\n          this.emit('socketJoin', socketData);\n        }\n      }\n      for (const peerUserId of oldUserIds) {\n        if (!newUserIds.has(peerUserId)) {\n          this.emit('leave', peerUserId);\n        }\n      }\n      for (const peerUserId of newUserIds) {\n        if (!oldUserIds.has(peerUserId)) {\n          this.emit('join', peerUserId);\n        }\n      }\n      for (const clientId of oldSessionClientIds) {\n        if (clientId === this.clientId) {\n          continue;\n        }\n        if (!newSessionClientIds.has(clientId)) {\n          this.emit('sessionClientLeave', clientId);\n        }\n      }\n      for (const clientId of newSessionClientIds) {\n        if (clientId === this.clientId) {\n          continue;\n        }\n        if (!oldSessionClientIds.has(clientId)) {\n          this.emit('sessionClientJoin', clientId);\n        }\n      }\n      for (const [sessionId, oldSessionSocketMap] of oldSessionMap) {\n        const newSessionSocketMap = newSessionMap.get(sessionId);\n        if (typeof newSessionSocketMap === 'undefined') {\n          for (const socketData of oldSessionSocketMap.values()) {\n            this.emit('sessionLeave', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of oldSessionSocketMap) {\n            if (!newSessionSocketMap.has(socketHash)) {\n              this.emit('sessionLeave', socketData);\n            }\n          }\n        }\n      }\n      for (const [sessionId, newSessionSocketMap] of newSessionMap) {\n        const oldSessionSocketMap = oldSessionMap.get(sessionId);\n        if (typeof oldSessionSocketMap === 'undefined') {\n          for (const socketData of newSessionSocketMap.values()) {\n            this.emit('sessionJoin', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of newSessionSocketMap) {\n            if (!oldSessionSocketMap.has(socketHash)) {\n              this.emit('sessionJoin', socketData);\n            }\n          }\n        }\n      }\n    };\n    this.braidClient.data.addListener('set', this.handleSet);\n    this.addListener('socketJoin', (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (clientId === this.clientId) {\n        return;\n      }\n      if (this.peerDisconnectTimeoutMap.has(clientId)) {\n        this.logger.info(`Clearing client ${clientId} disconnect timeout after socket join`);\n        clearTimeout(this.peerDisconnectTimeoutMap.get(clientId));\n        this.peerDisconnectTimeoutMap.delete(clientId);\n      }\n      this.addToQueue(clientId, () => this.connectToPeer(socketData));\n    });\n    this.addListener('socketLeave', (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (clientId === this.clientId) {\n        return;\n      }\n      clearTimeout(this.peerDisconnectTimeoutMap.get(clientId));\n      if (this.active) {\n        this.peerDisconnectTimeoutMap.set(clientId, setTimeout(() => {\n          this.peerDisconnectTimeoutMap.delete(clientId);\n          this.addToQueue(clientId, () => this.disconnectFromPeer(socketData));\n        }, 15000));\n      } else {\n        this.addToQueue(clientId, () => this.disconnectFromPeer(socketData));\n      }\n    });\n    this.braidClient.addListener('close', () => {\n      const oldSocketData = [...this.socketMap.values()];\n      const oldUserIds = [...this.userIds];\n      this.socketMap.clear();\n      this.userIds.clear();\n      for (const socketData of oldSocketData) {\n        this.emit('socketLeave', socketData);\n      }\n      for (const oldUserId of oldUserIds) {\n        this.emit('leave', oldUserId);\n      }\n    });\n    this.braidClient.addListener('reconnect', (isReconnecting: boolean) => {\n      if (!isReconnecting) {\n        return;\n      }\n      const startedSessionId = this.startedSessionId;\n      const joinedSessionId = this.joinedSessionId;\n      const handleInitialized = () => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.info(`Restarting session ${startedSessionId}`);\n          this.startSession(startedSessionId).catch((error) => {\n            this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        if (typeof joinedSessionId === 'string') {\n          this.logger.info(`Rejoining session ${joinedSessionId}`);\n          this.joinSession(joinedSessionId).catch((error) => {\n            this.logger.error(`Unable to rejoin session ${joinedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleClose = () => {\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleError = (error:Error) => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n          this.logger.errorStack(error);\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      this.braidClient.addListener('initialized', handleInitialized);\n      this.braidClient.addListener('close', handleClose);\n      this.braidClient.addListener('error', handleError);\n    });\n  }\n\n  get sessionClientIds():Set<number> {\n    const sessionId = this.sessionId;\n    if (typeof sessionId !== 'string') {\n      return new Set();\n    }\n    const sessionClientMap = this.sessionMap.get(sessionId);\n    if (typeof sessionClientMap === 'undefined') {\n      return new Set();\n    }\n    const clientIds = new Set(sessionClientMap.keys());\n    clientIds.delete(this.clientId);\n    return clientIds;\n  }\n\n  async init() {\n    const promise = new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(new Error('Closed before initialization completed'));\n      };\n      const handleValue = (key:string, value:any) => {\n        if (key !== this.name) {\n          return;\n        }\n        if (typeof value === 'undefined') {\n          return;\n        }\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(error);\n      };\n      this.addListener('close', handleClose);\n      this.braidClient.data.addListener('set', handleValue);\n      this.braidClient.addListener('error', handleError);\n      handleValue(this.name, this.braidClient.data.get(this.name));\n    });\n    try {\n      await Promise.all([\n        this.braidClient.subscribe(this.name),\n        this.braidClient.addServerEventListener(this.name, this.handleMessage.bind(this)),\n      ]);\n      await promise;\n      await this.braidClient.startPublishing(this.publishName);\n    } catch (error) {\n      this.braidClient.logger.error(`Unable to join ${this.roomId}`);\n      throw error;\n    }\n  }\n\n  addToQueue(queueId:string | number, func:() => Promise<*>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      return queue.add(func);\n    }\n    const newQueue = new PQueue({ concurrency: 1 });\n    const promise = newQueue.add(func);\n    this.queueMap.set(queueId, newQueue);\n    newQueue.on('idle', () => {\n      this.queueMap.delete(queueId);\n    });\n    return promise;\n  }\n\n  async publish(type:string, value:Object, options?: { timeoutDuration?: number, CustomError?: Class<RequestError> } = {}):Promise<{ text:string, code:number }> {\n    await this.ready;\n    const timeoutDuration = typeof options.timeoutDuration === 'number' ? options.timeoutDuration : 5000;\n    const CustomError = typeof options.CustomError === 'function' ? options.CustomError : RequestError;\n    const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    return new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        reject(new ClientClosedError(`Client closed before ${type} request completed`));\n      };\n      const timeout = setTimeout(() => {\n        this.requestCallbackMap.delete(requestId);\n        this.removeListener('close', handleClose);\n        reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n      }, timeoutDuration);\n      const handleResponse = (success:boolean, code: number, text:string) => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        if (success) {\n          resolve({ code, text });\n          return;\n        }\n        reject(new CustomError(text, code));\n      };\n      this.addListener('close', handleClose);\n      this.requestCallbackMap.set(requestId, handleResponse);\n      this.braidClient.publish(this.publishName, { requestId, type, value });\n    });\n  }\n\n  isConnectedToClient(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return false;\n    }\n    return !!peer.connected;\n  }\n\n  async connectToPeer({ userId, serverId, socketId, clientId, socketHash }:Socket) {\n    const existingPeer = this.peerMap.get(clientId);\n    const options = Object.assign({}, { initiator: clientId > this.clientId }, this.peerOptions);\n    const peer = existingPeer || new SimplePeer(options);\n    this.peerMap.set(clientId, peer);\n    if (peer.connected) {\n      peer.emit('peerReconnect');\n      const handlePeerClose = () => {\n        this.logger.info(`Peer ${socketHash} disconnected`);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('peerReconnect', handlePeerReconnect);\n        this.emit('disconnect', { userId, serverId, socketId, peer });\n      };\n      const handlePeerError = (error:Error) => {\n        this.logger.error(`Peer ${socketHash} error`);\n        this.logger.errorStack(error);\n        this.emit('peerError', { error, userId, serverId, socketId, peer });\n      };\n      const handlePeerReconnect = () => {\n        this.logger.info(`Peer ${socketHash} reconnected`);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('peerReconnect', handlePeerReconnect);\n      };\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('error', handlePeerError);\n      peer.addListener('peerReconnect', handlePeerReconnect);\n      this.emit('connect', { userId, clientId, serverId, socketId, peer });\n      return;\n    }\n    await new Promise((resolve) => {\n      const timeout = setTimeout(() => {\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n        resolve();\n      }, 5000);\n      const handleConnect = () => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n        const handlePeerClose = () => {\n          this.logger.info(`Peer ${socketHash} disconnected`);\n          peer.removeListener('error', handlePeerError);\n          peer.removeListener('close', handlePeerClose);\n          peer.removeListener('peerReconnect', handlePeerReconnect);\n          this.emit('disconnect', { userId, serverId, socketId, peer });\n        };\n        const handlePeerError = (error:Error) => {\n          this.logger.error(`Peer ${socketHash} error`);\n          this.logger.errorStack(error);\n          this.emit('peerError', { error, userId, serverId, socketId, peer });\n        };\n        const handlePeerReconnect = () => {\n          this.logger.info(`Peer ${socketHash} reconnected`);\n          peer.removeListener('error', handlePeerError);\n          peer.removeListener('close', handlePeerClose);\n          peer.removeListener('peerReconnect', handlePeerReconnect);\n        };\n        peer.addListener('close', handlePeerClose);\n        peer.addListener('error', handlePeerError);\n        peer.addListener('peerReconnect', handlePeerReconnect);\n        this.emit('connect', { userId, clientId, serverId, socketId, peer });\n        resolve();\n      };\n      const handleSignal = async (data:Object) => {\n        try {\n          await this.publish(SIGNAL, { serverId, socketId, data }, { CustomError: SignalError });\n        } catch (error) {\n          this.logger.error(`Unable to signal ${socketHash}`);\n          this.logger.errorStack(error);\n        }\n      };\n      const handleClose = () => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n        this.logger.error(`Error connecting to ${userId}`);\n        this.logger.errorStack(error);\n        this.emit('error', error);\n        resolve();\n      };\n      const handleSocketLeave = ({ socketHash: oldSocketHash }:Socket) => {\n        if (socketHash !== oldSocketHash) {\n          return;\n        }\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n        this.logger.warn(`Unable to connect to ${userId}, socket closed before connection was completed`);\n        resolve();\n      };\n      peer.addListener('error', handleError);\n      peer.addListener('connect', handleConnect);\n      peer.addListener('signal', handleSignal);\n      this.addListener('close', handleClose);\n      this.addListener('socketLeave', handleSocketLeave);\n      const signalQueue = this.signalQueueMap.get(clientId);\n      if (Array.isArray(signalQueue)) {\n        while (signalQueue.length > 0) {\n          const data = signalQueue.shift();\n          peer.signal(data);\n        }\n      }\n    });\n  }\n\n  async disconnectFromPeer({ clientId }:Socket) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return;\n    }\n    peer.destroy();\n    this.peerMap.delete(clientId);\n  }\n\n  async onIdle() {\n    while (this.queueMap.size > 0) {\n      for (const queue of this.queueMap.values()) {\n        await queue.onIdle();\n      }\n      // $FlowFixMe\n      await new Promise((resolve) => queueMicrotask(resolve));\n    }\n  }\n\n  cleanupSession(newSessionId?:string) {\n    const startedSessionId = this.startedSessionId;\n    delete this.startedSessionId;\n    delete this.joinedSessionId;\n    if (typeof startedSessionId === 'string') {\n      this.sessionJoinHandlerMap.delete(startedSessionId);\n    }\n    const oldSessionId = this.sessionId;\n    if (oldSessionId === newSessionId) {\n      return;\n    }\n    const oldSessionClientIds = this.sessionClientIds;\n    this.sessionId = newSessionId;\n    const newSessionClientIds = this.sessionClientIds;\n    for (const clientId of oldSessionClientIds) {\n      if (clientId === this.clientId) {\n        continue;\n      }\n      if (!newSessionClientIds.has(clientId)) {\n        this.emit('sessionClientLeave', clientId);\n      }\n    }\n    const timelineValue = this.data.get(this.clientId);\n    this.data.clear();\n    this.sessionClientOffsetMap.clear();\n    if (typeof timelineValue !== 'undefined') {\n      this.data.set(this.clientId);\n    }\n    for (const clientId of newSessionClientIds) {\n      if (clientId === this.clientId) {\n        continue;\n      }\n      if (!oldSessionClientIds.has(clientId)) {\n        this.emit('sessionClientJoin', clientId);\n      }\n    }\n  }\n\n  didStartSession() {\n    if (!this.sessionId) {\n      return false;\n    }\n    return this.startedSessionId === this.sessionId;\n  }\n\n  async startSession(sessionId:string, sessionJoinHandler?: SessionJoinHandler) {\n    await this.addToQueue(SESSION_QUEUE, () => this.publish(START_SESSION, { sessionId }, { CustomError: StartSessionError }));\n    this.cleanupSession(sessionId);\n    this.startedSessionId = sessionId;\n    if (typeof sessionJoinHandler === 'function') {\n      this.sessionJoinHandlerMap.set(sessionId, sessionJoinHandler);\n    } else {\n      this.sessionJoinHandlerMap.set(sessionId, () => [true, 200, 'Authorized']);\n    }\n  }\n\n  didJoinSession() {\n    if (!this.sessionId) {\n      return false;\n    }\n    return this.joinedSessionId === this.sessionId;\n  }\n\n  async joinSession(sessionId:string, timeoutDuration?: number = 30000) {\n    await this.addToQueue(SESSION_QUEUE, () => this.publish(JOIN_SESSION, { sessionId, timeoutDuration }, { CustomError: JoinSessionError }));\n    this.cleanupSession(sessionId);\n    this.joinedSessionId = sessionId;\n  }\n\n  async leaveSession() {\n    await this.addToQueue(SESSION_QUEUE, () => this.publish(LEAVE_SESSION, {}, { CustomError: LeaveSessionError }));\n    this.cleanupSession();\n  }\n\n  async handleMessage(message:{ requestId?: number, type:string, value:Object }) {\n    if (typeof message !== 'object') {\n      this.logger.error('Invalid message format');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    const { requestId, type, value } = message;\n    if (typeof type !== 'string') {\n      this.logger.error('Invalid message format, type property should be of type \"string\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (typeof value !== 'object') {\n      this.logger.error('Invalid message format, value property should be of type \"object\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (type === RESPONSE && typeof requestId === 'number') {\n      const callback = this.requestCallbackMap.get(requestId);\n      if (typeof callback !== 'function') {\n        this.logger.error(`Callback for request ${requestId} does not exist`);\n        return;\n      }\n      const { success, code, text } = value;\n      if (typeof success !== 'boolean') {\n        this.logger.error('Response message contained an invalid value success property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value success property');\n        return;\n      }\n      if (typeof code !== 'number') {\n        this.logger.error('Response message contained an invalid value code property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value code property');\n        return;\n      }\n      if (typeof text !== 'string') {\n        this.logger.error('Response message contained an invalid value text property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value text property');\n        return;\n      }\n      callback(success, code, text);\n      return;\n    }\n    switch (type) {\n      case SIGNAL:\n        try {\n          const {\n            clientId,\n            serverId,\n            socketId,\n            data,\n          } = value;\n          if (typeof serverId !== 'number') {\n            this.logger.error('Signal message contained an invalid server ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof socketId !== 'number') {\n            this.logger.error('Signal message contained an invalid socket ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof data !== 'object') {\n            this.logger.error('Signal message contained an invalid data property');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const peer = this.peerMap.get(clientId);\n          if (typeof peer === 'undefined') {\n            const signalQueue = this.signalQueueMap.get(clientId);\n            if (Array.isArray(signalQueue)) {\n              signalQueue.push(data);\n              return;\n            }\n            this.signalQueueMap.set(clientId, [data]);\n            return;\n          }\n          if (peer.destroyed || peer.destroying) {\n            return;\n          }\n          peer.signal(data);\n        } catch (error) {\n          this.logger.error('Unable to process signal message');\n          this.logger.errorStack(error);\n        }\n        break;\n      case ABORT_SESSION_JOIN_REQUEST:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Abort session join request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Abort session join request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const existing = this.sessionJoinRequestMap.get(requestHash);\n          if (!Array.isArray(existing)) {\n            this.logger.warn(`Unable to abort session join request for user ${userId} and session ${sessionId}, request does not exist`);\n            return;\n          }\n          this.logger.warn(`Aborting session join request for user ${userId} and session ${sessionId}`);\n          existing[1].abort();\n        } catch (error) {\n          this.logger.error('Unable to process session abort join request');\n          this.logger.errorStack(error);\n        }\n        break;\n      case SESSION_JOIN_REQUEST:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Session join request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Session join request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const existing = this.sessionJoinRequestMap.get(requestHash);\n          if (Array.isArray(existing)) {\n            this.logger.warn(`Session join request for user ${userId} and session ${sessionId} already exists`);\n            await existing[0];\n            return;\n          }\n          const sessionJoinHandler = this.sessionJoinHandlerMap.get(sessionId);\n          if (typeof sessionJoinHandler !== 'function') {\n            this.logger.error(`Handler for session ${sessionId} does not exist`);\n            return;\n          }\n          const abortController = new AbortController();\n          abortController.signal.addEventListener('abort', () => {\n            this.sessionJoinRequestMap.delete(requestHash);\n          });\n          const promise = (async () => {\n            let response = [false, 500, 'Error in sesssion join handler'];\n            try {\n              response = await sessionJoinHandler({ userId, sessionId, abortSignal: abortController.signal });\n            } catch (error) {\n              this.logger.error(`Unable to respond to session join request for user ${userId} and session ${sessionId}, error in session join handler`);\n              this.logger.errorStack(error);\n            }\n            if (abortController.signal.aborted) {\n              this.logger.warn(`Session join request for user ${userId} and session ${sessionId} was aborted`);\n              return;\n            }\n            try {\n              await this.publish(SESSION_JOIN_RESPONSE, {\n                userId,\n                sessionId,\n                success: response[0],\n                code: response[1],\n                text: response[2],\n              }, { CustomError: SessionJoinResponseError });\n            } catch (error) {\n              this.logger.error(`Unable to send session join request for user ${userId} and session ${sessionId}`);\n              this.logger.errorStack(error);\n            }\n            this.sessionJoinRequestMap.delete(requestHash);\n          })();\n          this.sessionJoinRequestMap.set(requestHash, [promise, abortController]);\n          await promise;\n        } catch (error) {\n          this.logger.error('Unable to process session join request');\n          this.logger.errorStack(error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown message type ${type}`);\n    }\n  }\n\n  async handleSessionClientJoin(clientId:number) {\n    let interval;\n    let _peer; // eslint-disable-line no-underscore-dangle\n    let offset = 0;\n    const abortController = new AbortController();\n    const abortSignal = abortController.signal;\n    const cleanup = () => {\n      abortController.abort();\n      this.removeListener('sessionClientLeave', handleSessionClientLeave);\n      if (typeof _peer !== 'undefined') {\n        _peer.removeListener('close', handlePeerClose);\n        _peer.removeListener('data', handlePeerData);\n      }\n      this.data.removeListener('publish', handleDataPublish);\n      clearInterval(interval);\n    };\n    const handlePeerClose = () => {\n      cleanup();\n      if (this.sessionClientIds.has(clientId)) {\n        this.handleSessionClientJoin(clientId);\n      }\n    };\n    const handleSessionClientLeave = (oldClientId:number) => {\n      if (clientId !== oldClientId) {\n        return;\n      }\n      cleanup();\n    };\n    const handleDataPublish = (queue:[Array<*>, Array<*>]) => {\n      sendToPeer(new ObservedRemoveDump(queue));\n    };\n    const sendToPeer = (unpacked: any) => {\n      if (typeof peer === 'undefined') {\n        throw new Error('Peer does not exist');\n      }\n      peer.send(pack(unpacked));\n    };\n    const handlePeerData = (packed:Buffer) => {\n      const message = unpack(packed);\n      if (message instanceof Ping) {\n        sendToPeer(new Pong(message.timestamp, Date.now()));\n      } else if (message instanceof Pong) {\n        offset = (Date.now() - message.wallclock) - (performance.now() - message.timestamp) / 2;\n        this.sessionClientOffsetMap.set(clientId, offset);\n      } else if (message instanceof ObservedRemoveDump) {\n        this.data.process(message.queue);\n      }\n    };\n    this.addListener('sessionClientLeave', handleSessionClientLeave);\n    if (!this.isConnectedToClient(clientId)) {\n      await new Promise((resolve) => {\n        const handleConnect = ({ clientId: newClientId }) => {\n          if (newClientId !== clientId) {\n            return;\n          }\n          this.removeListener('connect', handleConnect);\n          abortSignal.removeEventListener('abort', handleAbort);\n          resolve();\n        };\n        const handleAbort = () => {\n          this.removeListener('connect', handleConnect);\n          abortSignal.removeEventListener('abort', handleAbort);\n          resolve();\n        };\n        this.addListener('connect', handleConnect);\n        abortSignal.addEventListener('abort', handleAbort);\n      });\n      if (abortSignal.aborted) {\n        return;\n      }\n    }\n    const peer = this.peerMap.get(clientId);\n    _peer = peer;\n    if (typeof peer === 'undefined') {\n      throw new Error('Peer does not exist');\n    }\n    peer.addListener('close', handlePeerClose);\n    peer.addListener('data', handlePeerData);\n    interval = setInterval(() => {\n      peer.send(pack(new Ping(performance.now())));\n    }, 1000);\n    peer.send(pack(new Ping(performance.now())));\n    this.data.addListener('publish', handleDataPublish);\n    handleDataPublish(this.data.dump());\n  }\n\n  close() {\n    this.active = false;\n    const oldSessionClientIds = this.sessionClientIds;\n    const oldSocketData = [...this.socketMap.values()];\n    const oldUserIds = [...this.userIds];\n    this.braidClient.data.removeListener('set', this.handleSet);\n    this.braidClient.stopPublishing(this.publishName);\n    this.braidClient.unsubscribe(this.name);\n    this.braidClient.removeServerEventListener(this.name);\n    this.socketMap.clear();\n    this.userIds.clear();\n    for (const timeout of this.peerDisconnectTimeoutMap.values()) {\n      clearTimeout(timeout);\n    }\n    for (const clientId of oldSessionClientIds) {\n      this.emit('sessionClientLeave', clientId);\n    }\n    for (const socketData of oldSocketData) {\n      this.emit('socketLeave', socketData);\n    }\n    for (const userId of oldUserIds) {\n      this.emit('leave', userId);\n    }\n    this.emit('close');\n  }\n}\n\n"],"file":"index.js"}