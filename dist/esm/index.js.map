{"version":3,"sources":["../../src/index.js"],"names":["EventEmitter","SimplePeer","PQueue","SIGNAL","START_SESSION","LEAVE_SESSION","RESPONSE","RequestError","RequestTimeoutError","getSocketMap","values","Map","map","x","socketHash","socketId","serverId","userId","sessionId","getPeerIds","Set","getSessionMap","socketMap","socket","sessionSocketMap","get","set","Bond","constructor","braidClient","roomId","options","name","ready","init","logger","wrtc","userIds","peerMap","queueMap","sessionMap","requestCallbackMap","signalQueueMap","handleSet","key","oldSocketMap","newSocketMap","oldUserIds","newUserIds","oldSessionMap","newSessionMap","socketData","has","emit","peerId","oldSessionSocketMap","newSessionSocketMap","data","addListener","on","addToQueue","connectToPeer","disconnectFromPeer","promise","Promise","resolve","reject","handleClose","removeListener","handleValue","handleError","Error","value","error","all","subscribe","addServerEventListener","handleMessage","bind","startPublishing","queueId","func","queue","add","newQueue","concurrency","delete","publish","type","timeoutDuration","requestId","Math","floor","random","Number","MAX_SAFE_INTEGER","timeout","setTimeout","handleResponse","success","code","text","clearTimeout","peer","initiator","handleConnect","handleSignal","handlePeerClose","info","handlePeerError","errorStack","signalQueue","Array","isArray","length","shift","signal","destroy","onIdle","size","queueMicrotask","startSession","password","leaveSession","message","JSON","stringify","callback","push","warn","close","keys","stopPublishing","unsubscribe","removeServerEventListener","clear"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport type BraidClient from '@bunchtogether/braid-client';\nimport SimplePeer from 'simple-peer';\nimport PQueue from 'p-queue';\nimport {\n  SIGNAL,\n  START_SESSION,\n  LEAVE_SESSION,\n  RESPONSE,\n} from './constants';\nimport { RequestError, RequestTimeoutError } from './errors';\n\ntype Logger = {\n  debug: (string | number, ...any) => void,\n  info: (string | number, ...any) => void,\n  warn: (string | number, ...any) => void,\n  error: (string | number, ...any) => void,\n  errorStack: (error:Error | MediaError) => void,\n};\n\ntype Options = {\n  logger?: Logger,\n  wrtc?: Object\n}\n\ntype Connection = [number, number, string, string | false];\ntype Socket = { socketHash: string, socketId: number, serverId: number, userId: string, sessionId: string | false };\n\nconst getSocketMap = (values?:Array<Connection>):Map<string, Socket> => {\n  if (typeof values === 'undefined') {\n    return new Map();\n  }\n  return new Map(values.map((x) => {\n    const socketHash = `${x[0]}:${x[1]}`;\n    return [socketHash, { socketHash, socketId: x[0], serverId: x[1], userId: x[2], sessionId: x[3] }];\n  }));\n};\n\nconst getPeerIds = (values?:Array<Connection>):Set<string> => {\n  if (typeof values === 'undefined') {\n    return new Set();\n  }\n  return new Set(values.map((x) => x[2]));\n};\n\nconst getSessionMap = (socketMap:Map<string, Socket>):Map<string | false, Map<string, Socket>> => {\n  const map = new Map();\n  for (const socket of socketMap.values()) {\n    const { socketHash, sessionId } = socket;\n    const sessionSocketMap = map.get(sessionId);\n    if (typeof sessionSocketMap === 'undefined') {\n      map.set(sessionId, new Map([[socketHash, socket]]));\n    } else {\n      sessionSocketMap.set(socketHash, socket);\n    }\n  }\n  return map;\n};\n\nexport class Bond extends EventEmitter {\n  declare roomId: string;\n  declare userId: string;\n  declare name: string;\n  declare braidClient: BraidClient;\n  declare logger: Logger;\n  declare ready: Promise<void>;\n  declare socketMap: Map<string, Socket>;\n  declare sessionMap: Map<string | false, Map<string, Socket>>;\n  declare userIds: Set<string>;\n  declare wrtc: void | Object;\n  declare peerMap: Map<string, SimplePeer>;\n  declare queueMap: Map<string, PQueue>;\n  declare handleSet: (string, any) => void;\n  declare signalQueueMap: Map<string, Array<[string, Object]>>;\n  declare requestCallbackMap: Map<number, (boolean, number, string) => void | Promise<void>>;\n\n  constructor(braidClient: BraidClient, roomId:string, userId:string, options?: Options = {}) {\n    super();\n    this.roomId = roomId;\n    this.userId = userId;\n    const name = `signal/${this.roomId}`;\n    this.name = name;\n    this.braidClient = braidClient;\n    this.ready = this.init();\n    this.logger = options.logger || braidClient.logger;\n    this.wrtc = options.wrtc;\n    this.socketMap = new Map();\n    this.userIds = new Set();\n    this.peerMap = new Map();\n    this.queueMap = new Map();\n    this.sessionMap = new Map();\n    this.requestCallbackMap = new Map();\n    this.signalQueueMap = new Map();\n\n    this.handleSet = (key:string, values:Array<Connection>) => {\n      if (key !== name) {\n        return;\n      }\n      const oldSocketMap = this.socketMap;\n      const newSocketMap = getSocketMap(values);\n      const oldUserIds = this.userIds;\n      const newUserIds = getPeerIds(values);\n      const oldSessionMap = this.sessionMap;\n      const newSessionMap = getSessionMap(newSocketMap);\n      this.userIds = newUserIds;\n      this.socketMap = newSocketMap;\n      this.sessionMap = newSessionMap;\n      for (const [socketHash, socketData] of oldSocketMap) {\n        if (!newSocketMap.has(socketHash)) {\n          this.emit('socketLeave', socketData);\n        }\n      }\n      for (const [socketHash, socketData] of newSocketMap) {\n        if (!oldSocketMap.has(socketHash)) {\n          this.emit('socketJoin', socketData);\n        }\n      }\n      for (const peerId of oldUserIds) {\n        if (!newUserIds.has(peerId)) {\n          this.emit('leave', peerId);\n        }\n      }\n      for (const peerId of newUserIds) {\n        if (!oldUserIds.has(peerId)) {\n          this.emit('join', peerId);\n        }\n      }\n      for (const [sessionId, oldSessionSocketMap] of oldSessionMap) {\n        const newSessionSocketMap = newSessionMap.get(sessionId);\n        if (typeof newSessionSocketMap === 'undefined') {\n          for (const socketData of oldSessionSocketMap.values()) {\n            this.emit('sessionLeave', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of oldSessionSocketMap) {\n            if (!newSessionSocketMap.has(socketHash)) {\n              this.emit('sessionLeave', socketData);\n            }\n          }\n        }\n      }\n      for (const [sessionId, newSessionSocketMap] of newSessionMap) {\n        const oldSessionSocketMap = oldSessionMap.get(sessionId);\n        if (typeof oldSessionSocketMap === 'undefined') {\n          for (const socketData of newSessionSocketMap.values()) {\n            this.emit('sessionJoin', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of newSessionSocketMap) {\n            if (!oldSessionSocketMap.has(socketHash)) {\n              this.emit('sessionJoin', socketData);\n            }\n          }\n        }\n      }\n    };\n    this.braidClient.data.addListener('set', this.handleSet);\n    this.on('socketJoin', (socketData:Socket) => {\n      this.addToQueue(socketData.socketHash, () => this.connectToPeer(socketData));\n    });\n    this.on('socketLeave', (socketData:Socket) => {\n      this.addToQueue(socketData.socketHash, () => this.disconnectFromPeer(socketData));\n    });\n  }\n\n  async init() {\n    const promise = new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(new Error('Closed before initialization completed'));\n      };\n      const handleValue = (key:string, value:any) => {\n        if (key !== this.name) {\n          return;\n        }\n        if (typeof value === 'undefined') {\n          return;\n        }\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(error);\n      };\n      this.addListener('close', handleClose);\n      this.braidClient.data.addListener('set', handleValue);\n      this.braidClient.addListener('error', handleError);\n      handleValue(this.name, this.braidClient.data.get(this.name));\n    });\n    try {\n      await Promise.all([\n        this.braidClient.subscribe(this.name),\n        this.braidClient.addServerEventListener(this.name, this.handleMessage.bind(this)),\n      ]);\n      await promise;\n      await this.braidClient.startPublishing(this.name);\n    } catch (error) {\n      this.braidClient.logger.error(`Unable to join ${this.roomId}`);\n      throw error;\n    }\n  }\n\n  addToQueue(queueId:string, func:() => Promise<void>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      return queue.add(func);\n    }\n    const newQueue = new PQueue({ concurrency: 1 });\n    const promise = newQueue.add(func);\n    this.queueMap.set(queueId, newQueue);\n    newQueue.on('idle', () => {\n      this.queueMap.delete(queueId);\n    });\n    return promise;\n  }\n\n  async publish(type:string, value:Object, timeoutDuration?: number = 5000):Promise<{ text:string, code:number }> {\n    await this.ready;\n    const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        this.requestCallbackMap.delete(requestId);\n        reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n      }, timeoutDuration);\n      const handleResponse = (success:boolean, code: number, text:string) => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        if (success) {\n          resolve({ code, text });\n          return;\n        }\n        reject(new RequestError(text, code));\n      };\n      this.requestCallbackMap.set(requestId, handleResponse);\n      this.braidClient.publish(this.name, { requestId, type, value });\n    });\n  }\n\n  async connectToPeer({ userId, serverId, socketId, socketHash }:Socket) {\n    const peer = new SimplePeer({ initiator: userId > this.userId, wrtc: this.wrtc });\n    this.peerMap.set(socketHash, peer);\n    await new Promise((resolve) => {\n      const timeout = setTimeout(() => {\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        resolve();\n      }, 5000);\n      const handleConnect = () => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        const handlePeerClose = () => {\n          this.logger.info(`Peer ${socketHash} disconnected`);\n          peer.removeListener('error', handlePeerError);\n          peer.removeListener('close', handlePeerClose);\n          this.emit('disconnect', { userId, serverId, socketId, peer });\n        };\n        const handlePeerError = (error:Error) => {\n          this.logger.error(`Peer ${socketHash} error`);\n          this.logger.errorStack(error);\n          this.emit('peerError', { error, userId, serverId, socketId, peer });\n        };\n        peer.addListener('close', handlePeerClose);\n        peer.addListener('error', handlePeerError);\n        this.emit('connect', { userId, serverId, socketId, peer });\n        resolve();\n      };\n      const handleSignal = async (data:Object) => {\n        try {\n          await this.publish(SIGNAL, { serverId, socketId, data });\n        } catch (error) {\n          this.logger.error(`Unable to signal ${socketHash}`);\n          this.logger.errorStack(error);\n        }\n      };\n      const handleClose = () => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.logger.error(`Error connecting to ${userId}`);\n        this.logger.errorStack(error);\n        this.emit('error', error);\n        resolve();\n      };\n      peer.addListener('error', handleError);\n      peer.addListener('connect', handleConnect);\n      peer.addListener('signal', handleSignal);\n      this.addListener('close', handleClose);\n      const signalQueue = this.signalQueueMap.get(socketHash);\n      if (Array.isArray(signalQueue)) {\n        while (signalQueue.length > 0) {\n          const data = signalQueue.shift();\n          peer.signal(data);\n        }\n      }\n    });\n  }\n\n  async disconnectFromPeer({ socketHash }:Socket) {\n    const peer = this.peerMap.get(socketHash);\n    if (typeof peer === 'undefined') {\n      return;\n    }\n    peer.destroy();\n    this.peerMap.delete(socketHash);\n  }\n\n  async onIdle() {\n    while (this.queueMap.size > 0) {\n      for (const queue of this.queueMap.values()) {\n        await queue.onIdle();\n      }\n      // $FlowFixMe\n      await new Promise((resolve) => queueMicrotask(resolve));\n    }\n  }\n\n  startSession(sessionId:string, password?:string) {\n    return this.publish(START_SESSION, { sessionId, password });\n  }\n\n  leaveSession() {\n    return this.publish(LEAVE_SESSION, {});\n  }\n\n  handleMessage(message:{ requestId?: number, type:string, value:Object }) {\n    if (typeof message !== 'object') {\n      this.logger.error('Invalid message format');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    const { requestId, type, value } = message;\n    if (typeof type !== 'string') {\n      this.logger.error('Invalid message format, type property should be of type \"string\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (typeof value !== 'object') {\n      this.logger.error('Invalid message format, value property should be of type \"object\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (type === RESPONSE && typeof requestId === 'number') {\n      const callback = this.requestCallbackMap.get(requestId);\n      if (typeof callback !== 'function') {\n        this.logger.error(`Callback for request ${requestId} does not exist`);\n        return;\n      }\n      const { success, code, text } = value;\n      if (typeof success !== 'boolean') {\n        this.logger.error('Response message contained an invalid value success property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value success property');\n        return;\n      }\n      if (typeof code !== 'number') {\n        this.logger.error('Response message contained an invalid value code property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value code property');\n        return;\n      }\n      if (typeof text !== 'string') {\n        this.logger.error('Response message contained an invalid value text property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value text property');\n        return;\n      }\n      callback(success, code, text);\n      return;\n    }\n    switch (type) {\n      case SIGNAL:\n        try {\n          const {\n            serverId,\n            socketId,\n            data,\n          } = value;\n          if (typeof serverId !== 'number') {\n            this.logger.error('Signal message contained an invalid server ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof socketId !== 'number') {\n            this.logger.error('Signal message contained an invalid socket ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof data !== 'object') {\n            this.logger.error('Signal message contained an invalid data property');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const socketHash = `${socketId}:${serverId}`;\n          const peer = this.peerMap.get(socketHash);\n          if (typeof peer === 'undefined') {\n            const signalQueue = this.signalQueueMap.get(socketHash);\n            if (Array.isArray(signalQueue)) {\n              signalQueue.push(data);\n              return;\n            }\n            this.signalQueueMap.set(socketHash, [data]);\n            return;\n          }\n          peer.signal(data);\n        } catch (error) {\n          this.logger.error('Unable to process signal message');\n          this.logger.errorStack(error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown message type ${type}`);\n    }\n  }\n\n  close() {\n    const oldSocketMap = [...this.socketMap.keys()];\n    const oldUserIds = [...this.userIds];\n    this.braidClient.data.removeListener('set', this.handleSet);\n    this.braidClient.stopPublishing(this.name);\n    this.braidClient.unsubscribe(this.name);\n    this.braidClient.removeServerEventListener(this.name);\n    this.socketMap.clear();\n    this.userIds.clear();\n    for (const socketHash of oldSocketMap) {\n      this.emit('socketLeave', socketHash);\n    }\n    for (const userId of oldUserIds) {\n      this.emit('leave', userId);\n    }\n    this.emit('close');\n  }\n}\n\n"],"file":"index.js"}