{"version":3,"file":"index.js","names":["EventEmitter","ObservedRemoveMap","SimplePeer","PQueue","pack","unpack","SIGNAL","START_SESSION","LEAVE_SESSION","JOIN_SESSION","INVITE_TO_SESSION","DECLINE_INVITE_TO_SESSION","SESSION_QUEUE","ABORT_SESSION_JOIN_REQUEST","SESSION_JOIN_REQUEST","SESSION_JOIN_RESPONSE","REMOVE_FROM_SESSION","CANCEL_INVITE_TO_SESSION","RESPONSE","AUTOMATIC_DISCOVERY_ROOM_ID","AbortError","RequestError","StartSessionError","RequestTimeoutError","JoinSessionError","LeaveSessionError","SignalError","SessionJoinResponseError","ClientClosedError","InviteToSessionError","InvitationDeclinedError","InvitedUserLeftError","InvitationTimeoutError","DeclineInviteToSessionError","RemoveFromSessionError","CancelInviteToSessionError","InvitationCancelledError","AbortSessionJoinError","Ping","Pong","ObservedRemoveDump","PeerEvent","Close","MultipartContainer","getSocketMap","values","Map","map","x","socketHash","socketId","serverId","userId","clientId","sessionId","getSessionId","getPeerIds","Set","getSessionMap","socketMap","socket","sessionClientMap","get","set","Bond","constructor","braidClient","roomId","options","active","Math","floor","random","Number","MAX_SAFE_INTEGER","localConnectionsOnly","name","publishName","toString","logger","peerOptions","userIds","peerMap","peerReconnectMap","queueMap","sessionMap","inviteDeclineHandlerMap","requestCallbackMap","signalQueueMap","peerDisconnectTimeoutMap","sessionJoinHandlerMap","sessionJoinRequestMap","data","bufferPublishing","sessionClientOffsetMap","preApprovedSessionUserIdSet","peerAddTrackHandlerMap","_ready","init","ready","joinSession","handleSessionClientJoin","sessionClientIds","size","clearTimeout","leaveSessionAfterLastClientTimeout","interval","_peer","offset","peerIsClosing","abortController","AbortController","abortSignal","signal","cleanup","abort","removeListener","handleSessionClientLeave","handlePeerClose","handlePeerData","handleDataPublish","clearInterval","has","oldClientId","queue","sendToPeer","unpacked","peer","Error","connected","warn","send","mergeChunkPromises","handleMultipartContainer","multipartContainer","existingMergeChunksPromise","id","push","mergeChunksPromise","getMergeChunksPromise","packed","error","stack","split","forEach","line","message","delete","timestamp","Date","now","wallclock","performance","process","emit","type","args","info","code","addListener","isConnectedToClient","Promise","resolve","handleConnect","newClientId","removeEventListener","handleAbort","addEventListener","aborted","setInterval","dump","handleSocketJoin","socketData","addToQueue","connectToPeer","handleSocketLeave","setTimeout","disconnectFromPeer","leaveSession","errorStack","handleSession","clear","handleBraidSet","key","oldSessionId","newSessionId","oldSocketMap","newSocketMap","oldUserIds","newUserIds","oldSessionMap","newSessionMap","oldLocalSessionSocketMap","newLocalSessionSocketMap","peerUserId","oldSessionSocketMap","newSessionSocketMap","handleBraidClose","reset","handleBraidCloseRequested","close","handleBraidReconnect","isReconnecting","startedSessionId","joinedSessionId","handleInitialized","startSession","catch","handleClose","handleError","keys","promise","reject","handleValue","value","all","subscribe","addServerEventListener","handleMessage","bind","startPublishing","queueId","func","add","newQueue","concurrency","on","publish","timeoutDuration","CustomError","requestId","timeout","handleResponse","success","text","reconnectCount","reconnectDelay","round","oldSocketHash","existingPeer","Object","assign","initiator","config","iceServers","addPeerListeners","handleSignal","handleStream","handlePeerError","handlePeerReconnect","stream","getTracks","track","stop","dispatchEvent","Event","candidate","addressParts","join","sdp","replace","signalQueue","Array","isArray","length","shift","emitToPeer","getConnectedPeer","chunks","chunk","ok","write","once","addStream","addTrackHandler","event","MediaStreamTrackEvent","addTrack","removeStream","destroy","onIdle","queueMicrotask","didStartSession","removeFromSession","cancelInviteToSession","inviteToSession","sessionJoinHandler","hasSessionId","globalThis","crypto","randomUUID","didCancel","handleCancelInviteBeforePublish","cancelledSessionId","cancelledUserId","handleSessionJoin","handleLeave","handleCancelInvite","isOnlySocketForUserId","handleDecline","previousStartedSessionId","wrappedSessionJoinHandler","didJoinSession","previousJoinedSessionId","abortJoinSession","JSON","stringify","callback","destroyed","destroying","requestHash","inviteDeclineHandler","existing","response","handlePeer","_p","declineInviteToSession","stopPublishing","removeServerEventListener","unsubscribe","responseId","responseType","responseValue","then","getLocalRoomId","_roomId","bond","localKey","negotiatedRoomId","handleSet","remoteRoomId","parseInt"],"sources":["../../src/index.js"],"sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport ObservedRemoveMap from 'observed-remove/map';\nimport type BraidClient from '@bunchtogether/braid-client';\nimport SimplePeer from 'simple-peer';\nimport PQueue from 'p-queue';\nimport {\n  pack,\n  unpack,\n} from 'msgpackr';\nimport {\n  SIGNAL,\n  START_SESSION,\n  LEAVE_SESSION,\n  JOIN_SESSION,\n  INVITE_TO_SESSION,\n  DECLINE_INVITE_TO_SESSION,\n  SESSION_QUEUE,\n  ABORT_SESSION_JOIN_REQUEST,\n  SESSION_JOIN_REQUEST,\n  SESSION_JOIN_RESPONSE,\n  REMOVE_FROM_SESSION,\n  CANCEL_INVITE_TO_SESSION,\n  RESPONSE,\n  AUTOMATIC_DISCOVERY_ROOM_ID,\n} from './constants';\nimport {\n  AbortError,\n  RequestError,\n  StartSessionError,\n  RequestTimeoutError,\n  JoinSessionError,\n  LeaveSessionError,\n  SignalError,\n  SessionJoinResponseError,\n  ClientClosedError,\n  InviteToSessionError,\n  InvitationDeclinedError,\n  InvitedUserLeftError,\n  InvitationTimeoutError,\n  DeclineInviteToSessionError,\n  RemoveFromSessionError,\n  CancelInviteToSessionError,\n  InvitationCancelledError,\n  AbortSessionJoinError,\n} from './errors';\nimport {\n  Ping,\n  Pong,\n  ObservedRemoveDump,\n  PeerEvent,\n  Close,\n  MultipartContainer,\n} from './messagepack';\n\ntype Logger = {\n  debug: (string | number, ...any) => void,\n  info: (string | number, ...any) => void,\n  warn: (string | number, ...any) => void,\n  error: (string | number, ...any) => void,\n  errorStack: (error:Error | MediaError) => void,\n};\n\ntype Options = {\n  peerOptions?: Object,\n  logger?: Logger,\n  sessionId?: string,\n  localConnectionsOnly?: boolean\n}\n\nexport type SessionJoinHandler = ({ sessionId: string, userId: string, abortSignal: AbortSignal }) => [boolean, number, string] | Promise<[boolean, number, string]>;\nexport type Connection = [number, number, string, number, string | false];\nexport type Socket = { socketHash: string, socketId: number, serverId: number, userId: string, clientId: number, sessionId: string | false };\n\nconst getSocketMap = (values?:Array<Connection>):Map<string, Socket> => {\n  if (typeof values === 'undefined') {\n    return new Map();\n  }\n  return new Map(values.map((x) => {\n    const socketHash = `${x[0]}:${x[1]}`;\n    return [socketHash, { socketHash, socketId: x[0], serverId: x[1], userId: x[2], clientId: x[3], sessionId: x[4] }];\n  }));\n};\n\nconst getSessionId = (values?:Array<Connection>, clientId:number):(string | false) => {\n  if (typeof values === 'undefined') {\n    return false;\n  }\n  for (const x of values) {\n    if (x[3] === clientId) {\n      return x[4] || false;\n    }\n  }\n  return false;\n};\n\nconst getPeerIds = (values?:Array<Connection>):Set<string> => {\n  if (typeof values === 'undefined') {\n    return new Set();\n  }\n  return new Set(values.map((x) => x[2]));\n};\n\nconst getSessionMap = (socketMap:Map<string, Socket>):Map<string | false, Map<number, Socket>> => {\n  const map = new Map();\n  for (const socket of socketMap.values()) {\n    const { clientId, sessionId } = socket;\n    const sessionClientMap = map.get(sessionId);\n    if (typeof sessionClientMap === 'undefined') {\n      map.set(sessionId, new Map([[clientId, socket]]));\n    } else {\n      sessionClientMap.set(clientId, socket);\n    }\n  }\n  return map;\n};\n\nexport class Bond extends EventEmitter {\n  static declineInviteToSession: (BraidClient, AbortSignal, { roomId: string, userId: string, clientId: number, sessionId: string, data: Object }) => Promise<{ code:number, text:string }>;\n  static getLocalRoomId: (BraidClient, string | false, string, AbortSignal, Options) => Promise<string>;\n\n  declare roomId: string;\n  declare clientId: number;\n  declare userId: string;\n  declare name: string;\n  declare publishName: string;\n  declare braidClient: BraidClient;\n  declare logger: Logger;\n  declare _ready: Promise<void>;\n  declare ready: Promise<void>;\n  declare socketMap: Map<string, Socket>;\n  declare sessionMap: Map<string | false, Map<number, Socket>>;\n  declare userIds: Set<string>;\n  declare peerOptions: void | Object;\n  declare peerMap: Map<number, SimplePeer>;\n  declare peerReconnectMap: Map<number, number>;\n  declare queueMap: Map<string | number, PQueue>;\n  declare handleSocketJoin: (Socket) => void;\n  declare handleSocketLeave: (Socket) => void;\n  declare handleSessionClientLeave: () => void;\n  declare handleSessionClientJoin: (number) => Promise<void>;\n  declare handleSession: () => void;\n  declare handleBraidSet: (string, any) => void;\n  declare handleBraidClose: () => void;\n  declare handleBraidCloseRequested: () => void;\n  declare handleBraidReconnect: (boolean) => void;\n  declare handlePeerData: (Buffer) => void;\n  declare signalQueueMap: Map<number, Array<[string, Object]>>;\n  declare requestCallbackMap: Map<number, (boolean, number, string) => void | Promise<void>>;\n  declare inviteDeclineHandlerMap: Map<string, () => Promise<void>>;\n  declare sessionId: false | string;\n  declare startedSessionId: void | string;\n  declare joinedSessionId: void | string;\n  declare active: boolean;\n  declare peerDisconnectTimeoutMap: Map<number, TimeoutID>;\n  declare sessionJoinHandlerMap: Map<string, SessionJoinHandler>;\n  declare sessionJoinRequestMap: Map<string, [Promise<void>, AbortController]>;\n  declare data: ObservedRemoveMap<string | number, any>;\n  declare sessionClientOffsetMap: Map<number, number>;\n  declare leaveSessionAfterLastClientTimeout: void | TimeoutID;\n  declare preApprovedSessionUserIdSet: Set<string>;\n  declare peerAddTrackHandlerMap: Map<Object, (Event) => void>;\n  declare localConnectionsOnly: boolean;\n\n  constructor(braidClient: BraidClient, roomId:string, userId:string, options?: Options = {}) {\n    super();\n    this.active = true;\n    this.clientId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    this.userId = userId;\n    this.roomId = roomId;\n    this.sessionId = false;\n    this.localConnectionsOnly = !!options.localConnectionsOnly;\n    const name = `signal/${this.roomId}`;\n    this.name = name;\n    this.publishName = `signal/${this.roomId}/${this.clientId.toString(36)}`;\n    this.braidClient = braidClient;\n    this.logger = options.logger || braidClient.logger;\n    this.peerOptions = options.peerOptions;\n    this.socketMap = new Map();\n    this.userIds = new Set();\n    this.peerMap = new Map();\n    this.peerReconnectMap = new Map();\n    this.queueMap = new Map();\n    this.sessionMap = new Map();\n    this.inviteDeclineHandlerMap = new Map();\n    this.requestCallbackMap = new Map();\n    this.signalQueueMap = new Map();\n    this.peerDisconnectTimeoutMap = new Map();\n    this.sessionJoinHandlerMap = new Map();\n    this.sessionJoinRequestMap = new Map();\n    this.data = new ObservedRemoveMap([], { bufferPublishing: 0 });\n    this.sessionClientOffsetMap = new Map();\n    this.preApprovedSessionUserIdSet = new Set();\n    this.peerAddTrackHandlerMap = new Map();\n\n\n    this._ready = this.init(); // eslint-disable-line no-underscore-dangle\n\n    if (typeof options.sessionId === 'string') {\n      this.ready = this.joinSession(options.sessionId);\n    } else {\n      this.ready = this._ready; // eslint-disable-line no-underscore-dangle\n    }\n\n    this.handleSessionClientJoin = async (clientId:number) => {\n      const sessionClientIds = this.sessionClientIds;\n      if (sessionClientIds.size > 1) {\n        clearTimeout(this.leaveSessionAfterLastClientTimeout);\n      }\n      let interval;\n      let _peer; // eslint-disable-line no-underscore-dangle\n      let offset = 0;\n      let peerIsClosing = false;\n      const abortController = new AbortController();\n      const abortSignal = abortController.signal;\n      const cleanup = () => {\n        abortController.abort();\n        this.removeListener('sessionClientLeave', handleSessionClientLeave);\n        if (typeof _peer !== 'undefined') {\n          _peer.removeListener('close', handlePeerClose);\n          _peer.removeListener('data', handlePeerData);\n        }\n        this.data.removeListener('publish', handleDataPublish);\n        clearInterval(interval);\n      };\n      const handlePeerClose = () => {\n        cleanup();\n        if (!peerIsClosing && this.active && this.sessionClientIds.has(clientId)) {\n          this.handleSessionClientJoin(clientId);\n        }\n      };\n      const handleSessionClientLeave = (oldClientId:number) => {\n        if (clientId !== oldClientId) {\n          return;\n        }\n        cleanup();\n      };\n      const handleDataPublish = (queue:[Array<*>, Array<*>]) => {\n        sendToPeer(new ObservedRemoveDump(queue));\n      };\n      const sendToPeer = (unpacked: any) => {\n        if (typeof peer === 'undefined') {\n          throw new Error('Peer does not exist');\n        }\n        if (!peer.connected) {\n          this.logger.warn(`Unable to send message to client ${clientId}, connection is closing`);\n          return;\n        }\n        peer.send(pack(unpacked));\n      };\n\n      const mergeChunkPromises = new Map();\n\n      const handleMultipartContainer = async (multipartContainer:MultipartContainer) => {\n        const existingMergeChunksPromise = mergeChunkPromises.get(multipartContainer.id);\n        if (typeof existingMergeChunksPromise !== 'undefined') {\n          existingMergeChunksPromise.push(multipartContainer);\n          return;\n        }\n        const mergeChunksPromise = MultipartContainer.getMergeChunksPromise(60000);\n        mergeChunksPromise.push(multipartContainer);\n        mergeChunkPromises.set(multipartContainer.id, mergeChunksPromise);\n        try {\n          const packed = await mergeChunksPromise;\n          handlePeerData(packed);\n        } catch (error) {\n          if (error.stack) {\n            this.logger.error('Unable to merge multipart message chunks:');\n            error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n          } else {\n            this.logger.error(`Unable to merge multipart message chunks: ${error.message}`);\n          }\n        } finally {\n          mergeChunkPromises.delete(multipartContainer.id);\n        }\n      };\n\n      const handlePeerData = (packed:Buffer) => {\n        const message = unpack(packed);\n        if (message instanceof Ping) {\n          sendToPeer(new Pong(message.timestamp, Date.now()));\n        } else if (message instanceof Pong) {\n          offset = (Date.now() - message.wallclock) - (performance.now() - message.timestamp) / 2;\n          this.sessionClientOffsetMap.set(clientId, offset);\n        } else if (message instanceof ObservedRemoveDump) {\n          this.data.process(message.queue);\n        } else if (message instanceof PeerEvent) {\n          this.emit(message.type, ...message.args);\n        } else if (message instanceof Close) {\n          this.logger.info(`Client ${clientId} closing with code ${message.code}: ${message.message}`);\n          this.peerMap.delete(clientId);\n          peerIsClosing = true;\n        } else if (message instanceof MultipartContainer) {\n          handleMultipartContainer(message);\n        }\n      };\n\n      this.addListener('sessionClientLeave', handleSessionClientLeave);\n      if (!this.isConnectedToClient(clientId)) {\n        await new Promise((resolve) => {\n          const handleConnect = ({ clientId: newClientId }) => {\n            if (newClientId !== clientId) {\n              return;\n            }\n            this.removeListener('connect', handleConnect);\n            abortSignal.removeEventListener('abort', handleAbort);\n            resolve();\n          };\n          const handleAbort = () => {\n            this.removeListener('connect', handleConnect);\n            abortSignal.removeEventListener('abort', handleAbort);\n            resolve();\n          };\n          this.addListener('connect', handleConnect);\n          abortSignal.addEventListener('abort', handleAbort);\n        });\n        if (abortSignal.aborted) {\n          return;\n        }\n      }\n      const peer = this.peerMap.get(clientId);\n      _peer = peer;\n      if (typeof peer === 'undefined') {\n        throw new Error('Peer does not exist');\n      }\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('data', handlePeerData);\n      interval = setInterval(() => {\n        peer.send(pack(new Ping(performance.now())));\n      }, 1000);\n      peer.send(pack(new Ping(performance.now())));\n      this.data.addListener('publish', handleDataPublish);\n      handleDataPublish(this.data.dump());\n    };\n\n    this.handleSocketJoin = (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (clientId === this.clientId) {\n        return;\n      }\n      if (this.peerDisconnectTimeoutMap.has(clientId)) {\n        this.logger.info(`Clearing client ${clientId} disconnect timeout after socket join`);\n        clearTimeout(this.peerDisconnectTimeoutMap.get(clientId));\n        this.peerDisconnectTimeoutMap.delete(clientId);\n      }\n      this.addToQueue(clientId, () => this.connectToPeer(socketData));\n    };\n\n\n    this.handleSocketLeave = (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (clientId === this.clientId) {\n        return;\n      }\n      clearTimeout(this.peerDisconnectTimeoutMap.get(clientId));\n      if (this.active) {\n        this.peerDisconnectTimeoutMap.set(clientId, setTimeout(() => {\n          this.peerDisconnectTimeoutMap.delete(clientId);\n          this.addToQueue(clientId, () => this.disconnectFromPeer(clientId));\n        }, 15000));\n      } else {\n        this.addToQueue(clientId, () => this.disconnectFromPeer(clientId));\n      }\n    };\n\n    this.handleSessionClientLeave = () => {\n      const sessionClientIds = this.sessionClientIds;\n      if (sessionClientIds.size > 1) {\n        return;\n      }\n      this.leaveSessionAfterLastClientTimeout = setTimeout(async () => {\n        try {\n          await this.leaveSession();\n        } catch (error) {\n          this.logger.error('Unable to leave session after timeout when last session closed');\n          this.logger.errorStack(error);\n        }\n      }, 5000);\n    };\n\n    this.handleSession = () => {\n      this.data.clear();\n      this.sessionClientOffsetMap.clear();\n    };\n\n    this.addListener('socketJoin', this.handleSocketJoin);\n    this.addListener('socketLeave', this.handleSocketLeave);\n    this.addListener('sessionClientJoin', this.handleSessionClientJoin);\n    this.addListener('sessionClientLeave', this.handleSessionClientLeave);\n    this.addListener('session', this.handleSession);\n\n    this.handleBraidSet = (key:string, values:Array<Connection>) => {\n      if (key !== name) {\n        return;\n      }\n      this.active = true;\n      const oldSessionId = this.sessionId;\n      const newSessionId = getSessionId(values, this.clientId);\n      const oldSocketMap = this.socketMap;\n      const newSocketMap = getSocketMap(values);\n      const oldUserIds = this.userIds;\n      const newUserIds = getPeerIds(values);\n      const oldSessionMap = this.sessionMap;\n      const newSessionMap = getSessionMap(newSocketMap);\n      const oldLocalSessionSocketMap = typeof oldSessionId === 'string' ? oldSessionMap.get(oldSessionId) || new Map() : new Map();\n      const newLocalSessionSocketMap = typeof newSessionId === 'string' ? newSessionMap.get(newSessionId) || new Map() : new Map();\n      this.sessionId = newSessionId;\n      this.userIds = newUserIds;\n      this.socketMap = newSocketMap;\n      this.sessionMap = newSessionMap;\n      if (newSessionId !== oldSessionId) {\n        this.emit('session', newSessionId);\n      }\n      for (const [socketHash, socketData] of oldSocketMap) {\n        if (!newSocketMap.has(socketHash)) {\n          this.emit('socketLeave', socketData);\n        }\n      }\n      for (const [socketHash, socketData] of newSocketMap) {\n        if (!oldSocketMap.has(socketHash)) {\n          this.emit('socketJoin', socketData);\n        }\n      }\n      for (const peerUserId of oldUserIds) {\n        if (!newUserIds.has(peerUserId)) {\n          this.emit('leave', peerUserId);\n        }\n      }\n      for (const peerUserId of newUserIds) {\n        if (!oldUserIds.has(peerUserId)) {\n          this.emit('join', peerUserId);\n        }\n      }\n      for (const [clientId, socketData] of oldLocalSessionSocketMap) {\n        if (clientId === this.clientId) {\n          continue;\n        }\n        if (!newLocalSessionSocketMap.has(clientId)) {\n          this.emit('sessionClientLeave', clientId, socketData);\n        }\n      }\n      for (const [clientId, socketData] of newLocalSessionSocketMap) {\n        if (clientId === this.clientId) {\n          continue;\n        }\n        if (!oldLocalSessionSocketMap.has(clientId)) {\n          this.emit('sessionClientJoin', clientId, socketData);\n        }\n      }\n      for (const [sessionId, oldSessionSocketMap] of oldSessionMap) {\n        const newSessionSocketMap = newSessionMap.get(sessionId);\n        if (typeof newSessionSocketMap === 'undefined') {\n          for (const socketData of oldSessionSocketMap.values()) {\n            this.emit('sessionLeave', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of oldSessionSocketMap) {\n            if (!newSessionSocketMap.has(socketHash)) {\n              this.emit('sessionLeave', socketData);\n            }\n          }\n        }\n      }\n      for (const [sessionId, newSessionSocketMap] of newSessionMap) {\n        const oldSessionSocketMap = oldSessionMap.get(sessionId);\n        if (typeof oldSessionSocketMap === 'undefined') {\n          for (const socketData of newSessionSocketMap.values()) {\n            this.emit('sessionJoin', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of newSessionSocketMap) {\n            if (!oldSessionSocketMap.has(socketHash)) {\n              this.emit('sessionJoin', socketData);\n            }\n          }\n        }\n      }\n    };\n    this.handleBraidClose = () => {\n      this.reset();\n    };\n    this.handleBraidCloseRequested = () => {\n      this.close();\n    };\n    this.handleBraidReconnect = (isReconnecting: boolean) => {\n      if (!isReconnecting) {\n        return;\n      }\n      const startedSessionId = this.startedSessionId;\n      const joinedSessionId = this.joinedSessionId;\n      const handleInitialized = () => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.info(`Restarting session ${startedSessionId}`);\n          this.startSession(startedSessionId).catch((error) => {\n            this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        if (typeof joinedSessionId === 'string') {\n          this.logger.info(`Rejoining session ${joinedSessionId}`);\n          this.joinSession(joinedSessionId).catch((error) => {\n            this.logger.error(`Unable to rejoin session ${joinedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleClose = () => {\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleError = (error:Error) => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n          this.logger.errorStack(error);\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      this.braidClient.addListener('initialized', handleInitialized);\n      this.braidClient.addListener('close', handleClose);\n      this.braidClient.addListener('error', handleError);\n    };\n    this.braidClient.data.addListener('set', this.handleBraidSet);\n    this.braidClient.addListener('close', this.handleBraidClose);\n    this.braidClient.addListener('closeRequested', this.handleBraidCloseRequested);\n    this.braidClient.addListener('reconnect', this.handleBraidReconnect);\n  }\n\n  get sessionClientMap():Map<number, Socket> {\n    const sessionId = this.sessionId;\n    if (typeof sessionId !== 'string') {\n      return new Map();\n    }\n    const sessionClientMap = this.sessionMap.get(sessionId);\n    if (typeof sessionClientMap === 'undefined') {\n      return new Map();\n    }\n    return sessionClientMap;\n  }\n\n  get sessionClientIds():Set<number> {\n    return new Set(this.sessionClientMap.keys());\n  }\n\n  async init() {\n    const promise = new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(new Error('Closed before initialization completed'));\n      };\n      const handleValue = (key:string, value:any) => {\n        if (key !== this.name) {\n          return;\n        }\n        if (typeof value === 'undefined') {\n          return;\n        }\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(error);\n      };\n      this.addListener('close', handleClose);\n      this.braidClient.data.addListener('set', handleValue);\n      this.braidClient.addListener('error', handleError);\n      handleValue(this.name, this.braidClient.data.get(this.name));\n    });\n    try {\n      await Promise.all([\n        this.braidClient.subscribe(this.name),\n        this.braidClient.addServerEventListener(this.name, this.handleMessage.bind(this)),\n      ]);\n      if (!this.active) {\n        return;\n      }\n      await promise;\n      if (!this.active) {\n        return;\n      }\n      await this.braidClient.startPublishing(this.publishName);\n    } catch (error) {\n      this.braidClient.logger.error(`Unable to join ${this.roomId}`);\n      throw error;\n    }\n  }\n\n  addToQueue(queueId:string | number, func:() => Promise<*>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      return queue.add(func);\n    }\n    const newQueue = new PQueue({ concurrency: 1 });\n    const promise = newQueue.add(func);\n    this.queueMap.set(queueId, newQueue);\n    newQueue.on('idle', () => {\n      this.queueMap.delete(queueId);\n    });\n    return promise;\n  }\n\n  async publish(type:string, value:Object, options?: { timeoutDuration?: number, CustomError?: Class<RequestError> } = {}):Promise<{ text:string, code:number }> {\n    await this._ready; // eslint-disable-line no-underscore-dangle\n    const timeoutDuration = typeof options.timeoutDuration === 'number' ? options.timeoutDuration : 5000;\n    const CustomError = typeof options.CustomError === 'function' ? options.CustomError : RequestError;\n    const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    return new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        reject(new ClientClosedError(`Client closed before ${type} request completed`));\n      };\n      const timeout = setTimeout(() => {\n        this.requestCallbackMap.delete(requestId);\n        this.removeListener('close', handleClose);\n        reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n      }, timeoutDuration);\n      const handleResponse = (success:boolean, code: number, text:string) => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        if (success) {\n          resolve({ code, text });\n          return;\n        }\n        reject(new CustomError(text, code));\n      };\n      this.addListener('close', handleClose);\n      this.requestCallbackMap.set(requestId, handleResponse);\n      this.braidClient.publish(this.publishName, { requestId, type, value });\n    });\n  }\n\n  isConnectedToClient(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return false;\n    }\n    return !!peer.connected;\n  }\n\n  async connectToPeer(socket:Socket) {\n    const { userId, serverId, socketId, clientId, socketHash } = socket;\n    const reconnectCount = this.peerReconnectMap.get(clientId) || 0;\n    const reconnectDelay = reconnectCount > 5 ? 30000 : 1000 * (reconnectCount * reconnectCount);\n    if (reconnectDelay > 0) {\n      this.logger.info(`Delaying connect by ${Math.round(reconnectDelay / 1000)} ${reconnectDelay === 1000 ? 'second' : 'seconds'} on attempt ${reconnectCount}`);\n      await new Promise((resolve) => {\n        const timeout = setTimeout(() => {\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        }, reconnectDelay);\n        const handleClose = () => {\n          clearTimeout(timeout);\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        };\n        const handleSocketLeave = ({ socketHash: oldSocketHash }:Socket) => {\n          if (socketHash !== oldSocketHash) {\n            return;\n          }\n          clearTimeout(timeout);\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        };\n        this.addListener('close', handleClose);\n        this.addListener('socketLeave', handleSocketLeave);\n      });\n      if (!this.socketMap.has(socketHash)) {\n        return;\n      }\n    }\n    const existingPeer = this.peerMap.get(clientId);\n    const options = Object.assign({}, { initiator: clientId > this.clientId }, this.peerOptions);\n    if (this.localConnectionsOnly) {\n      options.config = {\n        iceServers: [],\n      };\n    }\n    const peer = existingPeer || new SimplePeer(options);\n    this.peerMap.set(clientId, peer);\n    this.peerReconnectMap.set(clientId, reconnectCount + 1);\n    this.emit('peer', { clientId, peer });\n    const addPeerListeners = () => {\n      this.peerReconnectMap.set(clientId, 0);\n      const cleanup = () => {\n        peer.removeListener('signal', handleSignal);\n        peer.removeListener('stream', handleStream);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('peerReconnect', handlePeerReconnect);\n      };\n      const handleSignal = async (data:Object) => {\n        try {\n          await this.publish(SIGNAL, { serverId, socketId, data }, { CustomError: SignalError });\n        } catch (error) {\n          this.logger.error(`Unable to signal user ${userId} client ${clientId} closed`);\n          this.logger.errorStack(error);\n        }\n      };\n      const handleStream = (stream:MediaStream) => {\n        if (!this.sessionClientIds.has(clientId)) {\n          this.logger.error(`Received an unexpected stream from non-session user ${userId} client ${clientId}`);\n          stream.getTracks().forEach((track) => {\n            track.stop();\n            track.dispatchEvent(new Event('stop'));\n          });\n          return;\n        }\n        this.emit('stream', { stream, userId, serverId, socketId, clientId });\n      };\n      const handlePeerClose = () => {\n        this.logger.info(`Disconnected from user ${userId} client ${clientId}`);\n        cleanup();\n        this.emit('disconnect', { userId, serverId, socketId, clientId });\n        if (this.active && this.peerMap.has(clientId)) {\n          this.peerMap.delete(clientId);\n          this.connectToPeer(socket);\n          this.logger.warn(`Reconnecting to user ${userId} client ${clientId}`);\n        }\n      };\n      const handlePeerError = (error:Error) => {\n        this.logger.error(`Error in connection to user ${userId} client ${clientId}`);\n        this.logger.errorStack(error);\n        this.emit('peerError', { userId, serverId, socketId, clientId, error });\n      };\n      const handlePeerReconnect = () => {\n        this.logger.info(`Reconnected to user ${userId} client ${clientId}`);\n        cleanup();\n      };\n      peer.addListener('signal', handleSignal);\n      peer.addListener('stream', handleStream);\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('error', handlePeerError);\n      peer.addListener('peerReconnect', handlePeerReconnect);\n    };\n    if (peer.connected) {\n      peer.emit('peerReconnect');\n      addPeerListeners();\n      this.emit('connect', { userId, clientId, serverId, socketId, socketHash, peer });\n      return;\n    }\n    await new Promise((resolve) => {\n      const cleanup = () => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n      };\n      const timeout = setTimeout(() => {\n        cleanup();\n        resolve();\n      }, 5000);\n      const handleConnect = () => {\n        cleanup();\n        addPeerListeners();\n        this.emit('connect', { userId, clientId, serverId, socketId, socketHash, peer });\n        resolve();\n      };\n      const handleSignal = async (data:Object) => {\n        if (this.localConnectionsOnly) {\n          if (data.type === 'candidate') {\n            const { candidate: { candidate } } = data;\n            const addressParts = candidate.split(' ');\n            if (addressParts[4] !== '127.0.0.1' && addressParts[4] !== '::1') {\n              addressParts[4] = '127.0.0.1';\n              data.candidate.candidate = addressParts.join(' '); // eslint-disable-line no-param-reassign\n            }\n          } else if (data.type === 'answer' || data.type === 'offer') {\n            data.sdp = data.sdp.replace(/(a=candidate[^\\s]+?\\s[^\\s]+?\\s[^\\s]+?\\s[^\\s]+?\\s)([^\\s]+?\\s)(.*?\\r?\\n)/g, '$1127.0.0.1 $3'); // eslint-disable-line no-param-reassign\n          }\n        }\n        try {\n          await this.publish(SIGNAL, { serverId, socketId, data }, { CustomError: SignalError });\n        } catch (error) {\n          if (error instanceof SignalError && error.code === 404) {\n            this.logger.error(`Unable to signal user ${userId}, client ${clientId}, client does not exist`);\n            cleanup();\n            resolve();\n          } else {\n            this.logger.error(`Unable to signal user ${userId}, client ${clientId}`);\n            this.logger.errorStack(error);\n          }\n        }\n      };\n      const handleClose = () => {\n        cleanup();\n        resolve();\n      };\n      const handlePeerClose = () => {\n        this.logger.info(`Connection to user ${userId} client ${clientId} closed`);\n        cleanup();\n        if (this.peerMap.has(clientId)) {\n          this.peerMap.delete(clientId);\n          this.connectToPeer(socket);\n          this.logger.warn(`Reconnecting to user ${userId} client ${clientId}`);\n        }\n        resolve();\n      };\n      const handlePeerError = (error:Error) => {\n        cleanup();\n        this.logger.error(`Error connecting to ${userId}`);\n        this.logger.errorStack(error);\n        this.emit('peerError', { userId, serverId, socketId, clientId, error });\n        resolve();\n      };\n      const handleSocketLeave = ({ socketHash: oldSocketHash }:Socket) => {\n        if (socketHash !== oldSocketHash) {\n          return;\n        }\n        cleanup();\n        this.logger.warn(`Unable to connect to user ${userId} client ${clientId}, socket closed before connection was completed`);\n        resolve();\n      };\n      peer.addListener('error', handlePeerError);\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('connect', handleConnect);\n      peer.addListener('signal', handleSignal);\n      this.addListener('close', handleClose);\n      this.addListener('socketLeave', handleSocketLeave);\n      const signalQueue = this.signalQueueMap.get(clientId);\n      if (Array.isArray(signalQueue)) {\n        while (signalQueue.length > 0) {\n          const data = signalQueue.shift();\n          peer.signal(data);\n        }\n      }\n    });\n  }\n\n  async emitToPeer(clientId:number, type:string, ...args:Array<any>) {\n    const peer = await this.getConnectedPeer(clientId);\n    const message = pack(new PeerEvent(type, args));\n    if (message.length > 65536) {\n      const chunks = MultipartContainer.chunk(message, 65536);\n      for (const chunk of chunks) {\n        const ok = peer.write(chunk);\n        if (!ok) {\n          await new Promise((resolve) => {\n            peer.once('drain', () => {\n              resolve();\n            });\n          });\n        }\n      }\n    } else {\n      const ok = peer.write(message);\n      if (!ok) {\n        await new Promise((resolve) => {\n          peer.once('drain', () => {\n            resolve();\n          });\n        });\n      }\n    }\n  }\n\n  async addStream(clientId:number, stream:MediaStream) {\n    const peer = await this.getConnectedPeer(clientId);\n    const addTrackHandler = (event:Event) => {\n      if (event instanceof MediaStreamTrackEvent) {\n        peer.addTrack(event.track);\n      }\n    };\n    this.peerAddTrackHandlerMap.set(stream, addTrackHandler);\n    stream.addEventListener('addtrack', addTrackHandler);\n    peer.addStream(stream);\n  }\n\n  async removeStream(clientId:number, stream:MediaStream) {\n    const peer = await this.getConnectedPeer(clientId);\n    const addTrackHandler = this.peerAddTrackHandlerMap.get(stream);\n    if (typeof addTrackHandler === 'function') {\n      stream.removeEventListener('addtrack', addTrackHandler);\n    }\n    peer.removeStream(stream);\n  }\n\n  async disconnectFromPeer(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return;\n    }\n    this.peerMap.delete(clientId);\n    if (peer.connected) {\n      peer.send(pack(new Close(1000, 'Disconnect requested')));\n    }\n    peer.destroy();\n  }\n\n  async onIdle() {\n    while (this.queueMap.size > 0) {\n      for (const queue of this.queueMap.values()) {\n        await queue.onIdle();\n      }\n      // $FlowFixMe\n      await new Promise((resolve) => queueMicrotask(resolve));\n    }\n  }\n\n  didStartSession() {\n    if (!this.sessionId) {\n      return false;\n    }\n    return this.startedSessionId === this.sessionId;\n  }\n\n  async removeFromSession(clientId:number) {\n    const sessionId = this.sessionId;\n    if (sessionId === false) {\n      this.logger.warn(`Unable to remove client ${clientId} from session, not in a session`);\n      return;\n    }\n    const sessionClientMap = this.sessionClientMap;\n    const socket = sessionClientMap.get(clientId);\n    if (typeof socket === 'undefined') {\n      this.logger.warn(`Unable to remove client ${clientId}, client not in session ${sessionId}`);\n      return;\n    }\n    const { userId, socketId, serverId } = socket;\n    if (this.userId !== userId) {\n      this.preApprovedSessionUserIdSet.delete(userId);\n    }\n    await this.publish(REMOVE_FROM_SESSION, { userId, socketId, serverId }, { CustomError: RemoveFromSessionError });\n  }\n\n  async cancelInviteToSession(userId:string) {\n    const queue = this.queueMap.get(SESSION_QUEUE);\n    if (typeof queue !== 'undefined') {\n      await queue.onIdle();\n    }\n    const sessionId = this.sessionId; // eslint-disable-line no-undef\n    if (typeof sessionId === 'string') {\n      this.preApprovedSessionUserIdSet.delete(userId);\n      this.emit('cancelInvite', { sessionId, userId });\n      await this.publish(CANCEL_INVITE_TO_SESSION, { sessionId, userId }, { CustomError: CancelInviteToSessionError });\n    } else {\n      this.logger.warn(`Unable to cancel invite to user ${userId}, not in session`);\n    }\n  }\n\n  async inviteToSession(userId:string, options?:{ data?:Object, timeoutDuration?: number, sessionJoinHandler?: SessionJoinHandler } = {}) {\n    const { data, timeoutDuration = 30000, sessionJoinHandler } = options;\n    const queue = this.queueMap.get(SESSION_QUEUE);\n    if (typeof queue !== 'undefined') {\n      await queue.onIdle();\n    }\n    const hasSessionId = this.sessionId === 'string';\n    // $FlowFixMe\n    const sessionId = this.sessionId || globalThis.crypto.randomUUID(); // eslint-disable-line no-undef\n    let didCancel = false;\n    const handleCancelInviteBeforePublish = ({ sessionId: cancelledSessionId, userId: cancelledUserId }:{ sessionId:string, userId:string }) => {\n      if (cancelledSessionId !== sessionId) {\n        return;\n      }\n      if (cancelledUserId !== userId) {\n        return;\n      }\n      didCancel = true;\n    };\n    const leaveSession = async () => {\n      if (hasSessionId) {\n        return;\n      }\n      try {\n        await this.leaveSession();\n      } catch (error) {\n        this.logger.error('Unable to leave session');\n        this.logger.errorStack(error);\n      }\n    };\n    this.addListener('cancelInvite', handleCancelInviteBeforePublish);\n    try {\n      if (hasSessionId) {\n        this.preApprovedSessionUserIdSet.add(userId);\n        await this.publish(INVITE_TO_SESSION, { userId, sessionId, data }, { CustomError: InviteToSessionError });\n      } else {\n        await this.startSession(sessionId, sessionJoinHandler);\n        this.preApprovedSessionUserIdSet.add(userId);\n        await this.publish(INVITE_TO_SESSION, { userId, sessionId, data }, { CustomError: InviteToSessionError });\n      }\n    } catch (error) {\n      throw error;\n    } finally {\n      this.removeListener('cancelInvite', handleCancelInviteBeforePublish);\n    }\n    if (didCancel) {\n      await leaveSession();\n      throw new InvitationCancelledError(`Invitation to user ${userId} was cancelled`);\n    }\n    await new Promise((resolve, reject) => {\n      const cleanup = () => {\n        clearTimeout(timeout);\n        this.removeListener('sessionJoin', handleSessionJoin);\n        this.removeListener('close', handleClose);\n        this.removeListener('leave', handleLeave);\n        this.removeListener('session', handleSession);\n        this.removeListener('socketLeave', handleSocketLeave);\n        this.removeListener('cancelInvite', handleCancelInvite);\n        this.inviteDeclineHandlerMap.delete(`${userId}:${sessionId}`);\n      };\n      const timeout = setTimeout(async () => {\n        cleanup();\n        await leaveSession();\n        reject(new InvitationTimeoutError(`Invitation timed out after ${Math.round(timeoutDuration / 100) / 10} seconds`));\n      }, timeoutDuration);\n      const handleCancelInvite = async ({ sessionId: cancelledSessionId, userId: cancelledUserId }:{ sessionId:string, userId:string }) => {\n        if (cancelledSessionId !== sessionId) {\n          return;\n        }\n        if (cancelledUserId !== userId) {\n          return;\n        }\n        cleanup();\n        await leaveSession();\n        reject(new InvitationCancelledError(`Invitation to user ${userId} was cancelled`));\n      };\n      const handleSessionJoin = (socket: Socket) => {\n        if (socket.sessionId !== sessionId) {\n          return;\n        }\n        if (socket.userId !== userId) {\n          return;\n        }\n        cleanup();\n        resolve();\n      };\n      // Only listen for socket leave events if the user is inviting themselves\n      const handleSocketLeave = async (socket: Socket) => {\n        if (socket.userId !== this.userId) {\n          return;\n        }\n        let isOnlySocketForUserId = true;\n        for (const socketData of this.socketMap.values()) {\n          if (socketData.userId !== this.userId) {\n            continue;\n          }\n          if (socketData.clientId === this.clientId) {\n            continue;\n          }\n          isOnlySocketForUserId = false;\n        }\n        if (isOnlySocketForUserId) {\n          cleanup();\n          await leaveSession();\n          reject(new InvitedUserLeftError(`User ${userId} left before accepting the invitation`));\n        }\n      };\n      const handleSession = (newSessionId:string | false) => {\n        if (newSessionId === sessionId) {\n          return;\n        }\n        cleanup();\n        resolve();\n      };\n      const handleClose = () => {\n        cleanup();\n        reject(new ClientClosedError('Closed before invite'));\n      };\n      const handleDecline = async () => {\n        cleanup();\n        await leaveSession();\n        reject(new InvitationDeclinedError('Invitation declined'));\n      };\n      const handleLeave = async (peerUserId:string) => {\n        if (userId !== peerUserId) {\n          return;\n        }\n        cleanup();\n        await leaveSession();\n        reject(new InvitedUserLeftError(`User ${userId} left before accepting the invitation`));\n      };\n      this.inviteDeclineHandlerMap.set(`${userId}:${sessionId || ''}`, handleDecline);\n      this.addListener('sessionJoin', handleSessionJoin);\n      this.addListener('close', handleClose);\n      this.addListener('leave', handleLeave);\n      this.addListener('session', handleSession);\n      if (this.userId === userId) {\n        this.addListener('socketLeave', handleSocketLeave);\n      }\n      this.addListener('cancelInvite', handleCancelInvite);\n    });\n  }\n\n  async startSession(sessionId:string, sessionJoinHandler?: SessionJoinHandler) {\n    this.preApprovedSessionUserIdSet.clear();\n    const previousStartedSessionId = this.startedSessionId;\n    this.startedSessionId = sessionId;\n    try {\n      await this.addToQueue(SESSION_QUEUE, () => this.publish(START_SESSION, { sessionId }, { CustomError: StartSessionError }));\n    } catch (error) {\n      this.startedSessionId = previousStartedSessionId;\n      throw error;\n    }\n    delete this.joinedSessionId;\n    if (typeof sessionJoinHandler === 'function') {\n      const wrappedSessionJoinHandler = async (values) => {\n        if (this.preApprovedSessionUserIdSet.has(values.userId)) {\n          return [true, 200, 'Authorized'];\n        }\n        if (this.userId === values.userId) {\n          return [true, 200, 'Authorized'];\n        }\n        if (typeof sessionJoinHandler === 'function') {\n          return sessionJoinHandler(values);\n        }\n        return [true, 200, 'Authorized'];\n      };\n      this.sessionJoinHandlerMap.set(sessionId, wrappedSessionJoinHandler);\n    } else {\n      this.sessionJoinHandlerMap.set(sessionId, () => [true, 200, 'Authorized']);\n    }\n  }\n\n  didJoinSession() {\n    if (!this.sessionId) {\n      return false;\n    }\n    return this.joinedSessionId === this.sessionId;\n  }\n\n  async joinSession(sessionId:string, timeoutDuration?: number = 30000) {\n    const previousJoinedSessionId = this.joinedSessionId;\n    this.joinedSessionId = sessionId;\n    try {\n      await this.addToQueue(SESSION_QUEUE, () => this.publish(JOIN_SESSION, { sessionId, timeoutDuration }, { CustomError: JoinSessionError, timeoutDuration: timeoutDuration + 5000 }));\n    } catch (error) {\n      this.joinedSessionId = previousJoinedSessionId;\n      throw error;\n    }\n    const startedSessionId = this.startedSessionId;\n    delete this.startedSessionId;\n    if (typeof startedSessionId === 'string') {\n      this.sessionJoinHandlerMap.delete(startedSessionId);\n    }\n  }\n\n  async abortJoinSession() {\n    await this.publish(ABORT_SESSION_JOIN_REQUEST, { }, { CustomError: AbortSessionJoinError });\n  }\n\n  async leaveSession() {\n    try {\n      await this.addToQueue(SESSION_QUEUE, () => this.publish(LEAVE_SESSION, {}, { CustomError: LeaveSessionError }));\n      const startedSessionId = this.startedSessionId;\n      delete this.startedSessionId;\n      delete this.joinedSessionId;\n      if (typeof startedSessionId === 'string') {\n        this.sessionJoinHandlerMap.delete(startedSessionId);\n      }\n    } catch (error) {\n      if (error instanceof ClientClosedError) {\n        return;\n      }\n      throw error;\n    }\n  }\n\n  async handleMessage(message:{ requestId?: number, type:string, value:Object }) {\n    if (typeof message !== 'object') {\n      this.logger.error('Invalid message format');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    const { requestId, type, value } = message;\n    if (typeof type !== 'string') {\n      this.logger.error('Invalid message format, type property should be of type \"string\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (typeof value !== 'object') {\n      this.logger.error('Invalid message format, value property should be of type \"object\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (type === RESPONSE && typeof requestId === 'number') {\n      const callback = this.requestCallbackMap.get(requestId);\n      if (typeof callback !== 'function') {\n        this.logger.error(`Callback for request ${requestId} does not exist`);\n        return;\n      }\n      const { success, code, text } = value;\n      if (typeof success !== 'boolean') {\n        this.logger.error('Response message contained an invalid value success property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value success property');\n        return;\n      }\n      if (typeof code !== 'number') {\n        this.logger.error('Response message contained an invalid value code property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value code property');\n        return;\n      }\n      if (typeof text !== 'string') {\n        this.logger.error('Response message contained an invalid value text property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value text property');\n        return;\n      }\n      callback(success, code, text);\n      return;\n    }\n    switch (type) {\n      case SIGNAL:\n        try {\n          const {\n            clientId,\n            serverId,\n            socketId,\n            data,\n          } = value;\n          if (typeof serverId !== 'number') {\n            this.logger.error('Signal message contained an invalid server ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof socketId !== 'number') {\n            this.logger.error('Signal message contained an invalid socket ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof data !== 'object') {\n            this.logger.error('Signal message contained an invalid data property');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const peer = this.peerMap.get(clientId);\n          if (typeof peer === 'undefined') {\n            const signalQueue = this.signalQueueMap.get(clientId);\n            if (Array.isArray(signalQueue)) {\n              signalQueue.push(data);\n              return;\n            }\n            this.signalQueueMap.set(clientId, [data]);\n            return;\n          }\n          if (peer.destroyed || peer.destroying) {\n            return;\n          }\n          peer.signal(data);\n        } catch (error) {\n          this.logger.error('Unable to process signal message');\n          this.logger.errorStack(error);\n        }\n        break;\n      case DECLINE_INVITE_TO_SESSION:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Decline invite request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Decline invite request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const inviteDeclineHandler = this.inviteDeclineHandlerMap.get(requestHash);\n          if (typeof inviteDeclineHandler === 'function') {\n            inviteDeclineHandler();\n          }\n        } catch (error) {\n          this.logger.error('Unable to process decline invite request');\n          this.logger.errorStack(error);\n        }\n        break;\n      case ABORT_SESSION_JOIN_REQUEST:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Abort session join request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Abort session join request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const existing = this.sessionJoinRequestMap.get(requestHash);\n          if (!Array.isArray(existing)) {\n            this.logger.warn(`Unable to abort session join request for user ${userId} and session ${sessionId}, request does not exist`);\n            return;\n          }\n          this.logger.warn(`Aborting session join request for user ${userId} and session ${sessionId}`);\n          existing[1].abort();\n        } catch (error) {\n          this.logger.error('Unable to process session abort join request');\n          this.logger.errorStack(error);\n        }\n        break;\n      case SESSION_JOIN_REQUEST:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Session join request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Session join request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const existing = this.sessionJoinRequestMap.get(requestHash);\n          if (Array.isArray(existing)) {\n            this.logger.warn(`Session join request for user ${userId} and session ${sessionId} already exists`);\n            await existing[0];\n            return;\n          }\n          const sessionJoinHandler = this.sessionJoinHandlerMap.get(sessionId);\n          if (typeof sessionJoinHandler !== 'function') {\n            this.logger.error(`Handler for session ${sessionId} does not exist`);\n            return;\n          }\n          const abortController = new AbortController();\n          abortController.signal.addEventListener('abort', () => {\n            this.sessionJoinRequestMap.delete(requestHash);\n          });\n          const promise = (async () => {\n            let response = [false, 500, 'Error in sesssion join handler'];\n            try {\n              response = await sessionJoinHandler({ userId, sessionId, abortSignal: abortController.signal });\n            } catch (error) {\n              this.logger.error(`Unable to respond to session join request for user ${userId} and session ${sessionId}, error in session join handler`);\n              this.logger.errorStack(error);\n            }\n            if (abortController.signal.aborted) {\n              this.logger.warn(`Session join request for user ${userId} and session ${sessionId} was aborted`);\n              return;\n            }\n            try {\n              await this.publish(SESSION_JOIN_RESPONSE, {\n                userId,\n                sessionId,\n                success: response[0],\n                code: response[1],\n                text: response[2],\n              }, { CustomError: SessionJoinResponseError });\n            } catch (error) {\n              this.logger.error(`Unable to send session join response for user ${userId} and session ${sessionId}`);\n              this.logger.errorStack(error);\n            }\n            this.sessionJoinRequestMap.delete(requestHash);\n          })();\n          this.sessionJoinRequestMap.set(requestHash, [promise, abortController]);\n          await promise;\n        } catch (error) {\n          this.logger.error('Unable to process session join request');\n          this.logger.errorStack(error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown message type ${type}`);\n    }\n  }\n\n  async getConnectedPeer(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer !== 'undefined' && peer.connected) {\n      return peer;\n    }\n    return new Promise((resolve, reject) => {\n      let _peer; // eslint-disable-line no-underscore-dangle\n      const cleanup = () => {\n        this.removeListener('sessionClientLeave', handleSessionClientLeave);\n        this.removeListener('connect', handleConnect);\n        this.removeListener('peer', handlePeer);\n        if (typeof _peer !== 'undefined') {\n          _peer.removeListener('close', handlePeerClose);\n          _peer.removeListener('error', handlePeerError);\n        }\n      };\n      const handlePeerClose = () => {\n        cleanup();\n        reject(new Error(`Peer ${clientId} closed before connection was established`));\n      };\n      const handlePeerError = (error:Error) => {\n        cleanup();\n        reject(error);\n      };\n      const handlePeer = ({ clientId: newClientId, peer: _p }) => {\n        if (newClientId !== clientId) {\n          return;\n        }\n        _peer = _p;\n        _p.addListener('close', handlePeerClose);\n        _p.addListener('error', handlePeerError);\n      };\n      const handleConnect = ({ clientId: newClientId, peer: _p }) => {\n        if (newClientId !== clientId) {\n          return;\n        }\n        cleanup();\n        resolve(_p);\n      };\n      const handleSessionClientLeave = (oldClientId:number) => {\n        if (clientId !== oldClientId) {\n          return;\n        }\n        cleanup();\n        reject(new Error(`Client ${clientId} left before connection was established`));\n      };\n      this.addListener('sessionClientLeave', handleSessionClientLeave);\n      this.addListener('connect', handleConnect);\n      this.addListener('peer', handlePeer);\n    });\n  }\n\n  declineInviteToSession(data: Object) {\n    return this.publish(DECLINE_INVITE_TO_SESSION, data, { CustomError: DeclineInviteToSessionError });\n  }\n\n  reset() {\n    this.handleBraidSet(this.name, []);\n    clearTimeout(this.leaveSessionAfterLastClientTimeout);\n  }\n\n  async close() {\n    this.logger.info('Closing');\n    this.active = false;\n\n    this.reset();\n\n    for (const [clientId, timeout] of this.peerDisconnectTimeoutMap) {\n      clearTimeout(timeout);\n      this.addToQueue(clientId, () => this.disconnectFromPeer(clientId));\n    }\n    this.peerDisconnectTimeoutMap.clear();\n\n    this.emit('close');\n\n    try {\n      await this.onIdle();\n    } catch (error) {\n      this.logger.error('Error in queue during close');\n      this.logger.errorStack(error);\n    }\n\n    this.removeListener('socketJoin', this.handleSocketJoin);\n    this.removeListener('socketLeave', this.handleSocketLeave);\n    this.removeListener('sessionClientJoin', this.handleSessionClientJoin);\n    this.removeListener('sessionClientLeave', this.handleSessionClientLeave);\n    this.removeListener('session', this.handleSession);\n\n    this.braidClient.data.removeListener('set', this.handleBraidSet);\n    this.braidClient.removeListener('close', this.handleBraidClose);\n    this.braidClient.removeListener('closeRequested', this.handleBraidCloseRequested);\n    this.braidClient.removeListener('reconnect', this.handleBraidReconnect);\n    this.braidClient.stopPublishing(this.publishName);\n    this.braidClient.removeServerEventListener(this.name);\n    this.braidClient.unsubscribe(this.name);\n  }\n}\n\nconst publish = (braidClient:BraidClient, abortSignal: AbortSignal, roomId:string, type:string, value:Object, options?: { timeoutDuration?: number, CustomError?: Class<RequestError> } = {}) => {\n  const name = `signal/${roomId}`;\n  const publishName = `signal/${roomId}/${Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(36)}`;\n  const timeoutDuration = typeof options.timeoutDuration === 'number' ? options.timeoutDuration : 5000;\n  const CustomError = typeof options.CustomError === 'function' ? options.CustomError : RequestError;\n  const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n  return new Promise((resolve, reject) => {\n    const cleanup = () => {\n      clearTimeout(timeout);\n      abortSignal.removeEventListener('abort', handleAbort);\n      braidClient.removeServerEventListener(name);\n      braidClient.stopPublishing(publishName);\n    };\n    const handleAbort = () => {\n      cleanup();\n      reject(new AbortError(`Publish request aborted before ${type} request completed`));\n    };\n    const timeout = setTimeout(() => {\n      cleanup();\n      reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n    }, timeoutDuration);\n    const handleMessage = (message:{ requestId?: number, type:string, value:Object }) => {\n      if (typeof message !== 'object') {\n        return;\n      }\n      const { requestId: responseId, type: responseType, value: responseValue } = message;\n      if (responseType !== RESPONSE) {\n        return;\n      }\n      if (responseId !== requestId) {\n        return;\n      }\n      const { success, code, text } = responseValue;\n      cleanup();\n      if (success) {\n        resolve({ code, text });\n        return;\n      }\n      reject(new CustomError(text, code));\n    };\n    abortSignal.addEventListener('abort', handleAbort);\n    Promise.all([\n      braidClient.startPublishing(publishName),\n      braidClient.addServerEventListener(name, handleMessage),\n    ]).then(() => {\n      braidClient.publish(publishName, { requestId, type, value });\n    }).catch((error) => {\n      cleanup();\n      reject(error);\n    });\n  });\n};\n\nBond.declineInviteToSession = (braidClient: BraidClient, abortSignal:AbortSignal, data: { roomId: string }) => {\n  const { roomId } = data;\n  return publish(braidClient, abortSignal, roomId, DECLINE_INVITE_TO_SESSION, data, { CustomError: DeclineInviteToSessionError });\n};\n\nBond.getLocalRoomId = async (braidClient: BraidClient, _roomId:string | false, userId:string, abortSignal: AbortSignal, options?: Options = {}) => {\n  const bond = new Bond(braidClient, AUTOMATIC_DISCOVERY_ROOM_ID, userId, Object.assign({}, options, { localConnectionsOnly: true }));\n  let roomId = _roomId; // eslint-disable-line no-undef\n  const localKey = bond.clientId.toString(36);\n  const logger = options.logger || braidClient.logger;\n  const negotiatedRoomId = await new Promise((resolve, reject) => {\n    const handleSession = () => {\n      bond.data.set(localKey, roomId);\n    };\n    const handleConnect = ({ clientId, socketHash }:Socket) => {\n      const socket = bond.socketMap.get(socketHash);\n      if (typeof socket === 'undefined') {\n        return;\n      }\n      const { sessionId } = socket;\n      if (typeof sessionId !== 'string') {\n        return;\n      }\n      if (clientId > bond.clientId) {\n        bond.joinSession(sessionId).catch((error) => {\n          logger.error('Unable to join session during automatic linking');\n          logger.errorStack(error);\n        });\n      }\n    };\n    const handleSessionJoin = ({ clientId, sessionId }:Socket) => {\n      if (typeof sessionId === 'string' && bond.sessionId === sessionId) {\n        return;\n      }\n      if (!bond.peerMap.has(clientId)) {\n        return;\n      }\n      if (typeof sessionId !== 'string') {\n        return;\n      }\n      if (clientId > bond.clientId) {\n        bond.joinSession(sessionId).catch((error) => {\n          logger.error('Unable to join session during automatic linking');\n          logger.errorStack(error);\n        });\n      }\n    };\n    const handleSet = (key:string, remoteRoomId:string | false) => {\n      if (key === localKey) {\n        return;\n      }\n      const clientId = parseInt(key, 36);\n      if (!bond.peerMap.has(clientId)) {\n        return;\n      }\n      if (roomId === false && remoteRoomId === false && clientId < bond.clientId) {\n        roomId = globalThis.crypto.randomUUID(); // eslint-disable-line no-undef\n        bond.data.set(localKey, roomId);\n        return;\n      } else if (typeof roomId === 'string' && typeof remoteRoomId === 'string' && roomId !== remoteRoomId && clientId > bond.clientId) {\n        roomId = remoteRoomId;\n        bond.data.set(localKey, remoteRoomId);\n      } else if (roomId === false && typeof remoteRoomId === 'string') {\n        roomId = remoteRoomId;\n        bond.data.set(localKey, remoteRoomId);\n      } else if (typeof roomId !== 'string' || roomId !== remoteRoomId) {\n        return;\n      }\n      abortSignal.removeEventListener('abort', handleAbort);\n      bond.removeListener('close', handleClose);\n      bond.removeListener('connect', handleConnect);\n      bond.removeListener('sessionJoin', handleSessionJoin);\n      bond.removeListener('session', handleSession);\n      bond.data.removeListener('set', handleSet);\n      resolve(roomId);\n    };\n    const handleClose = () => {\n      abortSignal.removeEventListener('abort', handleAbort);\n      bond.removeListener('close', handleClose);\n      bond.removeListener('connect', handleConnect);\n      bond.removeListener('sessionJoin', handleSessionJoin);\n      bond.removeListener('session', handleSession);\n      bond.data.removeListener('set', handleSet);\n      reject(new ClientClosedError('Client closed before local room ID was discovered'));\n    };\n    const handleAbort = async () => {\n      abortSignal.removeEventListener('abort', handleAbort);\n      bond.removeListener('close', handleClose);\n      bond.removeListener('connect', handleConnect);\n      bond.removeListener('sessionJoin', handleSessionJoin);\n      bond.removeListener('session', handleSession);\n      bond.data.removeListener('set', handleSet);\n      try {\n        const queue = bond.queueMap.get(SESSION_QUEUE);\n        if (typeof queue !== 'undefined') {\n          await queue.onIdle();\n        }\n        await bond.close();\n      } catch (error) {\n        logger.error('Unable to close before throwing abort error');\n        logger.errorStack(error);\n      }\n      reject(new AbortError('Local room ID discovery aborted'));\n    };\n    abortSignal.addEventListener('abort', handleAbort);\n    bond.data.addListener('set', handleSet);\n    bond.addListener('close', handleClose);\n    bond.addListener('connect', handleConnect);\n    bond.addListener('sessionJoin', handleSessionJoin);\n    bond.addListener('session', handleSession);\n    bond.startSession(globalThis.crypto.randomUUID()); // eslint-disable-line no-undef\n  });\n  await bond.close();\n  return negotiatedRoomId;\n};\n\n"],"mappings":"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"}