{"version":3,"sources":["../../src/index.js"],"names":["Bond","braidClient","roomId","userId","options","name","ready","init","logger","wrtc","socketHashSet","Set","userIds","peerMap","Map","queueMap","requestCallbackMap","signalQueueMap","handleSet","key","values","oldUserIds","newSocketHashes","oldSocketHashes","socketHash","includes","push","delete","split","peerId","add","has","emit","data","addListener","on","addToQueue","connectToPeer","disconnectFromPeer","promise","Promise","resolve","reject","handleClose","removeListener","handleValue","handleError","Error","value","error","get","all","subscribe","addServerEventListener","handleMessage","bind","startPublishing","queueId","func","queue","newQueue","PQueue","concurrency","set","type","timeoutDuration","requestId","Math","floor","random","Number","MAX_SAFE_INTEGER","timeout","setTimeout","RequestTimeoutError","handleResponse","success","code","text","clearTimeout","RequestError","publish","serverIdString","socketIdString","serverId","parseInt","socketId","peer","SimplePeer","initiator","handleConnect","handleSignal","handlePeerClose","info","handlePeerError","errorStack","SIGNAL","signalQueue","Array","isArray","length","shift","signal","destroy","size","onIdle","queueMicrotask","sessionId","password","START_SESSION","LEAVE_SESSION","message","JSON","stringify","RESPONSE","callback","warn","stopPublishing","unsubscribe","removeServerEventListener","clear","EventEmitter"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport type BraidClient from '@bunchtogether/braid-client';\nimport SimplePeer from 'simple-peer';\nimport PQueue from 'p-queue';\nimport {\n  SIGNAL,\n  START_SESSION,\n  LEAVE_SESSION,\n  RESPONSE,\n} from './constants';\nimport { RequestError, RequestTimeoutError } from './errors';\n\ntype Logger = {\n  debug: (string | number, ...any) => void,\n  info: (string | number, ...any) => void,\n  warn: (string | number, ...any) => void,\n  error: (string | number, ...any) => void,\n  errorStack: (error:Error | MediaError) => void,\n};\n\ntype Options = {\n  logger?: Logger,\n  wrtc?: Object\n}\n\nexport class Bond extends EventEmitter {\n  declare roomId: string;\n  declare userId: string;\n  declare name: string;\n  declare braidClient: BraidClient;\n  declare logger: Logger;\n  declare ready: Promise<void>;\n  declare socketHashSet: Set<string>;\n  declare userIds: Set<string>;\n  declare wrtc: void | Object;\n  declare peerMap: Map<string, SimplePeer>;\n  declare queueMap: Map<string, PQueue>;\n  declare handleSet: (string, any) => void;\n  declare signalQueueMap: Map<string, Array<[string, Object]>>;\n  declare requestCallbackMap: Map<number, (boolean, number, string) => void | Promise<void>>;\n\n  constructor(braidClient: BraidClient, roomId:string, userId:string, options?: Options = {}) {\n    super();\n    this.roomId = roomId;\n    this.userId = userId;\n    const name = `signal/${this.roomId}`;\n    this.name = name;\n    this.braidClient = braidClient;\n    this.ready = this.init();\n    this.logger = options.logger || braidClient.logger;\n    this.wrtc = options.wrtc;\n    this.socketHashSet = new Set();\n    this.userIds = new Set();\n    this.peerMap = new Map();\n    this.queueMap = new Map();\n    this.requestCallbackMap = new Map();\n    this.signalQueueMap = new Map();\n    this.handleSet = (key:string, values:Array<string>) => {\n      if (key !== name) {\n        return;\n      }\n      const oldUserIds = this.userIds;\n      this.userIds = new Set();\n      const newSocketHashes = [];\n      const oldSocketHashes = [];\n      for (const socketHash of this.socketHashSet) {\n        if (!values.includes(socketHash)) {\n          oldSocketHashes.push(socketHash);\n          this.socketHashSet.delete(socketHash);\n        }\n      }\n      for (const socketHash of values) {\n        const [peerId] = socketHash.split(':');\n        if (peerId === userId) {\n          continue;\n        }\n        this.userIds.add(peerId);\n        if (!this.socketHashSet.has(socketHash)) {\n          newSocketHashes.push(socketHash);\n          this.socketHashSet.add(socketHash);\n        }\n      }\n      for (const socketHash of oldSocketHashes) {\n        this.emit('socketLeave', socketHash);\n      }\n      for (const socketHash of newSocketHashes) {\n        this.emit('socketJoin', socketHash);\n      }\n      for (const peerId of oldUserIds) {\n        if (!this.userIds.has(peerId)) {\n          this.emit('leave', peerId);\n        }\n      }\n      for (const peerId of this.userIds) {\n        if (!oldUserIds.has(peerId)) {\n          this.emit('join', peerId);\n        }\n      }\n    };\n    this.braidClient.data.addListener('set', this.handleSet);\n    this.on('socketJoin', (socketHash:string) => {\n      this.addToQueue(socketHash, () => this.connectToPeer(socketHash));\n    });\n    this.on('socketLeave', (socketHash:string) => {\n      this.addToQueue(socketHash, () => this.disconnectFromPeer(socketHash));\n    });\n  }\n\n\n  async init() {\n    const promise = new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(new Error('Closed before initialization completed'));\n      };\n      const handleValue = (key:string, value:any) => {\n        if (key !== this.name) {\n          return;\n        }\n        if (typeof value === 'undefined') {\n          return;\n        }\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(error);\n      };\n      this.addListener('close', handleClose);\n      this.braidClient.data.addListener('set', handleValue);\n      this.braidClient.addListener('error', handleError);\n      handleValue(this.name, this.braidClient.data.get(this.name));\n    });\n    try {\n      await Promise.all([\n        this.braidClient.subscribe(this.name),\n        this.braidClient.addServerEventListener(this.name, this.handleMessage.bind(this)),\n      ]);\n      await this.braidClient.startPublishing(this.name);\n      await promise;\n    } catch (error) {\n      this.braidClient.logger.error(`Unable to join ${this.roomId}`);\n      throw error;\n    }\n  }\n\n  addToQueue(queueId:string, func:() => Promise<void>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      return queue.add(func);\n    }\n    const newQueue = new PQueue({ concurrency: 1 });\n    const promise = newQueue.add(func);\n    this.queueMap.set(queueId, newQueue);\n    newQueue.on('idle', () => {\n      this.queueMap.delete(queueId);\n    });\n    return promise;\n  }\n\n  async publish(type:string, value:Object, timeoutDuration?: number = 5000):Promise<{ text:string, code:number }> {\n    await this.ready;\n    const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        this.requestCallbackMap.delete(requestId);\n        reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n      }, timeoutDuration);\n      const handleResponse = (success:boolean, code: number, text:string) => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        if (success) {\n          resolve({ code, text });\n          return;\n        }\n        reject(new RequestError(text, code));\n      };\n      this.requestCallbackMap.set(requestId, handleResponse);\n      this.braidClient.publish(this.name, { requestId, type, value });\n    });\n  }\n\n  async connectToPeer(socketHash:string) {\n    const [peerId, serverIdString, socketIdString] = socketHash.split(':');\n    const serverId = parseInt(serverIdString, 10);\n    const socketId = parseInt(socketIdString, 10);\n    const peer = new SimplePeer({ initiator: peerId > this.userId, wrtc: this.wrtc });\n    this.peerMap.set(socketHash, peer);\n    await new Promise((resolve) => {\n      const timeout = setTimeout(() => {\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        resolve();\n      }, 5000);\n      const handleConnect = () => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        const handlePeerClose = () => {\n          this.logger.info(`Peer ${socketHash} disconnected`);\n          peer.removeListener('error', handlePeerError);\n          peer.removeListener('close', handlePeerClose);\n          this.emit('disconnect', { peerId, serverId, socketId, peer });\n        };\n        const handlePeerError = (error:Error) => {\n          this.logger.error(`Peer ${socketHash} error`);\n          this.logger.errorStack(error);\n          this.emit('peerError', { error, peerId, serverId, socketId, peer });\n        };\n        peer.addListener('close', handlePeerClose);\n        peer.addListener('error', handlePeerError);\n        this.emit('connect', { peerId, serverId, socketId, peer });\n        resolve();\n      };\n      const handleSignal = async (data:Object) => {\n        try {\n          await this.publish(SIGNAL, { peerId, serverId, socketId, data });\n        } catch (error) {\n          this.logger.error(`Unable to signal ${socketHash}`);\n          this.logger.errorStack(error);\n        }\n      };\n      const handleClose = () => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.logger.error(`Error connecting to ${peerId}`);\n        this.logger.errorStack(error);\n        this.emit('error', error);\n        resolve();\n      };\n      peer.addListener('error', handleError);\n      peer.addListener('connect', handleConnect);\n      peer.addListener('signal', handleSignal);\n      this.addListener('close', handleClose);\n      const signalQueue = this.signalQueueMap.get(socketHash);\n      if (Array.isArray(signalQueue)) {\n        while (signalQueue.length > 0) {\n          const data = signalQueue.shift();\n          peer.signal(data);\n        }\n      }\n    });\n  }\n\n  async disconnectFromPeer(socketHash:string) {\n    const peer = this.peerMap.get(socketHash);\n    if (typeof peer === 'undefined') {\n      return;\n    }\n    peer.destroy();\n    this.peerMap.delete(socketHash);\n  }\n\n  async onIdle() {\n    while (this.queueMap.size > 0) {\n      for (const queue of this.queueMap.values()) {\n        await queue.onIdle();\n      }\n      // $FlowFixMe\n      await new Promise((resolve) => queueMicrotask(resolve));\n    }\n  }\n\n  startSession(sessionId:string, password?:string) {\n    return this.publish(START_SESSION, { sessionId, password });\n  }\n\n  leaveSession() {\n    return this.publish(LEAVE_SESSION, {});\n  }\n\n  handleMessage(message:{ requestId?: number, type:string, value:Object }) {\n    if (typeof message !== 'object') {\n      this.logger.error('Invalid message format');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    const { requestId, type, value } = message;\n    if (typeof type !== 'string') {\n      this.logger.error('Invalid message format, type property should be of type \"string\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (typeof value !== 'object') {\n      this.logger.error('Invalid message format, value property should be of type \"object\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (type === RESPONSE && typeof requestId === 'number') {\n      const callback = this.requestCallbackMap.get(requestId);\n      if (typeof callback !== 'function') {\n        this.logger.error(`Callback for request ${requestId} does not exist`);\n        return;\n      }\n      const { success, code, text } = value;\n      if (typeof success !== 'boolean') {\n        this.logger.error('Response message contained an invalid value success property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value success property');\n        return;\n      }\n      if (typeof code !== 'number') {\n        this.logger.error('Response message contained an invalid value code property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value code property');\n        return;\n      }\n      if (typeof text !== 'string') {\n        this.logger.error('Response message contained an invalid value text property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value text property');\n        return;\n      }\n      callback(success, code, text);\n      return;\n    }\n    switch (type) {\n      case SIGNAL:\n        try {\n          const {\n            peerId,\n            serverId,\n            socketId,\n            data,\n          } = value;\n          if (typeof peerId !== 'string') {\n            this.logger.error('Signal message contained an invalid peer ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof serverId !== 'number') {\n            this.logger.error('Signal message contained an invalid server ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof socketId !== 'number') {\n            this.logger.error('Signal message contained an invalid socket ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof data !== 'object') {\n            this.logger.error('Signal message contained an invalid data property');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const socketHash = `${peerId}:${serverId}:${socketId}`;\n          const peer = this.peerMap.get(socketHash);\n          if (typeof peer === 'undefined') {\n            const signalQueue = this.signalQueueMap.get(socketHash);\n            if (Array.isArray(signalQueue)) {\n              signalQueue.push(data);\n              return;\n            }\n            this.signalQueueMap.set(socketHash, [data]);\n            return;\n          }\n          peer.signal(data);\n        } catch (error) {\n          this.logger.error('Unable to process signal message');\n          this.logger.errorStack(error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown message type ${type}`);\n    }\n  }\n\n  close() {\n    const oldSocketHashes = [...this.socketHashSet];\n    const oldUserIds = [...this.userIds];\n    this.braidClient.data.removeListener('set', this.handleSet);\n    this.braidClient.stopPublishing(this.name);\n    this.braidClient.unsubscribe(this.name);\n    this.braidClient.removeServerEventListener(this.name);\n    this.socketHashSet.clear();\n    this.userIds.clear();\n    for (const socketHash of oldSocketHashes) {\n      this.emit('socketLeave', socketHash);\n    }\n    for (const userId of oldUserIds) {\n      this.emit('leave', userId);\n    }\n    this.emit('close');\n  }\n}\n\n"],"file":"index.js"}