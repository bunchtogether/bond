{"version":3,"sources":["../../src/index.js"],"names":["getSocketMap","values","Map","map","x","socketHash","socketId","serverId","userId","clientId","sessionId","getSessionId","getPeerIds","Set","getSessionMap","socketMap","socket","sessionClientMap","get","set","Bond","braidClient","roomId","options","active","Math","floor","random","Number","MAX_SAFE_INTEGER","name","publishName","toString","logger","peerOptions","userIds","peerMap","peerReconnectMap","queueMap","sessionMap","inviteDeclineHandlerMap","requestCallbackMap","signalQueueMap","peerDisconnectTimeoutMap","sessionJoinHandlerMap","sessionJoinRequestMap","data","ObservedRemoveMap","bufferPublishing","sessionClientOffsetMap","addListener","handleSessionClientJoin","bind","_ready","init","ready","joinSession","socketData","has","info","clearTimeout","delete","addToQueue","connectToPeer","setTimeout","disconnectFromPeer","sessionClientIds","size","leaveSessionAfterLastClientTimeout","leaveSession","error","errorStack","timelineValue","clear","handleBraidSet","key","oldSessionId","newSessionId","oldSocketMap","newSocketMap","oldUserIds","newUserIds","oldSessionMap","newSessionMap","oldLocalSessionSocketMap","newLocalSessionSocketMap","emit","peerUserId","oldSessionSocketMap","newSessionSocketMap","handleBraidClose","reset","handleBraidCloseRequested","close","handleBraidReconnect","isReconnecting","startedSessionId","joinedSessionId","handleInitialized","startSession","catch","removeListener","handleClose","handleError","clientIds","keys","promise","Promise","resolve","reject","handleValue","Error","value","all","subscribe","addServerEventListener","handleMessage","startPublishing","queueId","func","queue","add","newQueue","PQueue","concurrency","on","type","timeoutDuration","CustomError","RequestError","requestId","timeout","ClientClosedError","RequestTimeoutError","handleResponse","success","code","text","publish","peer","connected","reconnectCount","reconnectDelay","round","handleSocketLeave","oldSocketHash","existingPeer","Object","assign","initiator","SimplePeer","addPeerListeners","cleanup","handleStream","handlePeerError","handlePeerClose","handlePeerReconnect","stream","getTracks","forEach","track","stop","dispatchEvent","Event","warn","handleConnect","handleSignal","SIGNAL","SignalError","signalQueue","Array","isArray","length","shift","signal","getConnectedPeer","addStream","destroy","onIdle","queueMicrotask","sessionJoinHandler","SESSION_QUEUE","hasSessionId","globalThis","crypto","randomUUID","INVITE_TO_SESSION","InviteToSessionError","automaticSessionJoinHandler","handleSessionJoin","InvitationTimeoutError","handleDecline","InvitationDeclinedError","START_SESSION","StartSessionError","cleanupSession","JOIN_SESSION","JoinSessionError","LEAVE_SESSION","LeaveSessionError","message","JSON","stringify","RESPONSE","callback","push","destroyed","destroying","DECLINE_INVITE_TO_SESSION","requestHash","inviteDeclineHandler","ABORT_SESSION_JOIN_REQUEST","existing","abort","SESSION_JOIN_REQUEST","abortController","AbortController","addEventListener","response","abortSignal","aborted","SESSION_JOIN_RESPONSE","SessionJoinResponseError","_peer","handleSessionClientLeave","handlePeer","newClientId","_p","oldClientId","interval","offset","handlePeerData","handleDataPublish","clearInterval","sendToPeer","ObservedRemoveDump","unpacked","send","packed","Ping","Pong","timestamp","Date","now","wallclock","performance","process","isConnectedToClient","removeEventListener","handleAbort","setInterval","dump","DeclineInviteToSessionError","finally","stopPublishing","removeServerEventListener","unsubscribe","EventEmitter","AbortError","responseId","responseType","responseValue","then","declineInviteToSession"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport ObservedRemoveMap from 'observed-remove/dist/map';\nimport type BraidClient from '@bunchtogether/braid-client';\nimport SimplePeer from 'simple-peer';\nimport PQueue from 'p-queue';\nimport {\n  pack,\n  unpack,\n} from 'msgpackr';\nimport {\n  SIGNAL,\n  START_SESSION,\n  LEAVE_SESSION,\n  JOIN_SESSION,\n  INVITE_TO_SESSION,\n  DECLINE_INVITE_TO_SESSION,\n  SESSION_QUEUE,\n  ABORT_SESSION_JOIN_REQUEST,\n  SESSION_JOIN_REQUEST,\n  SESSION_JOIN_RESPONSE,\n  RESPONSE,\n} from './constants';\nimport {\n  AbortError,\n  RequestError,\n  StartSessionError,\n  RequestTimeoutError,\n  JoinSessionError,\n  LeaveSessionError,\n  SignalError,\n  SessionJoinResponseError,\n  ClientClosedError,\n  InviteToSessionError,\n  InvitationDeclinedError,\n  InvitationTimeoutError,\n  DeclineInviteToSessionError,\n} from './errors';\nimport {\n  Ping,\n  Pong,\n  ObservedRemoveDump,\n} from './messagepack';\n\ntype Logger = {\n  debug: (string | number, ...any) => void,\n  info: (string | number, ...any) => void,\n  warn: (string | number, ...any) => void,\n  error: (string | number, ...any) => void,\n  errorStack: (error:Error | MediaError) => void,\n};\n\ntype Options = {\n  peerOptions?: Object,\n  logger?: Logger,\n  sessionId?: string\n}\n\nexport type SessionJoinHandler = ({ sessionId: string, userId: string, abortSignal: AbortSignal }) => [boolean, number, string] | Promise<[boolean, number, string]>;\nexport type Connection = [number, number, string, number, string | false];\nexport type Socket = { socketHash: string, socketId: number, serverId: number, userId: string, clientId: number, sessionId: string | false };\n\nconst getSocketMap = (values?:Array<Connection>):Map<string, Socket> => {\n  if (typeof values === 'undefined') {\n    return new Map();\n  }\n  return new Map(values.map((x) => {\n    const socketHash = `${x[0]}:${x[1]}`;\n    return [socketHash, { socketHash, socketId: x[0], serverId: x[1], userId: x[2], clientId: x[3], sessionId: x[4] }];\n  }));\n};\n\nconst getSessionId = (values?:Array<Connection>, clientId:number):(string | false) => {\n  if (typeof values === 'undefined') {\n    return false;\n  }\n  for (const x of values) {\n    if (x[3] === clientId) {\n      return x[4] || false;\n    }\n  }\n  return false;\n};\n\nconst getPeerIds = (values?:Array<Connection>):Set<string> => {\n  if (typeof values === 'undefined') {\n    return new Set();\n  }\n  return new Set(values.map((x) => x[2]));\n};\n\nconst getSessionMap = (socketMap:Map<string, Socket>):Map<string | false, Map<number, Socket>> => {\n  const map = new Map();\n  for (const socket of socketMap.values()) {\n    const { clientId, sessionId } = socket;\n    const sessionClientMap = map.get(sessionId);\n    if (typeof sessionClientMap === 'undefined') {\n      map.set(sessionId, new Map([[clientId, socket]]));\n    } else {\n      sessionClientMap.set(clientId, socket);\n    }\n  }\n  return map;\n};\n\nexport class Bond extends EventEmitter {\n  static declineInviteToSession: (BraidClient, AbortSignal, { roomId: string, userId: string, clientId: number, sessionId: string, data: Object }) => Promise<{ code:number, text:string }>;\n\n  declare roomId: string;\n  declare clientId: number;\n  declare name: string;\n  declare publishName: string;\n  declare braidClient: BraidClient;\n  declare logger: Logger;\n  declare _ready: Promise<void>;\n  declare ready: Promise<void>;\n  declare socketMap: Map<string, Socket>;\n  declare sessionMap: Map<string | false, Map<number, Socket>>;\n  declare userIds: Set<string>;\n  declare peerOptions: void | Object;\n  declare peerMap: Map<number, SimplePeer>;\n  declare peerReconnectMap: Map<number, number>;\n  declare queueMap: Map<string | number, PQueue>;\n  declare handleBraidSet: (string, any) => void;\n  declare handleBraidClose: () => void;\n  declare handleBraidCloseRequested: () => void;\n  declare handleBraidReconnect: (boolean) => void;\n  declare signalQueueMap: Map<number, Array<[string, Object]>>;\n  declare requestCallbackMap: Map<number, (boolean, number, string) => void | Promise<void>>;\n  declare inviteDeclineHandlerMap: Map<string, () => Promise<void>>;\n  declare sessionId: false | string;\n  declare startedSessionId: void | string;\n  declare joinedSessionId: void | string;\n  declare active: boolean;\n  declare peerDisconnectTimeoutMap: Map<number, TimeoutID>;\n  declare sessionJoinHandlerMap: Map<string, SessionJoinHandler>;\n  declare sessionJoinRequestMap: Map<string, [Promise<void>, AbortController]>;\n  declare data: ObservedRemoveMap<string | number, any>;\n  declare sessionClientOffsetMap: Map<number, number>;\n  declare leaveSessionAfterLastClientTimeout: void | TimeoutID;\n\n  constructor(braidClient: BraidClient, roomId:string, userId:string, options?: Options = {}) {\n    super();\n    this.active = true;\n    this.clientId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    this.roomId = roomId;\n    this.sessionId = false;\n    const name = `signal/${this.roomId}`;\n    this.name = name;\n    this.publishName = `signal/${this.roomId}/${this.clientId.toString(36)}`;\n    this.braidClient = braidClient;\n    this.logger = options.logger || braidClient.logger;\n    this.peerOptions = options.peerOptions;\n    this.socketMap = new Map();\n    this.userIds = new Set();\n    this.peerMap = new Map();\n    this.peerReconnectMap = new Map();\n    this.queueMap = new Map();\n    this.sessionMap = new Map();\n    this.inviteDeclineHandlerMap = new Map();\n    this.requestCallbackMap = new Map();\n    this.signalQueueMap = new Map();\n    this.peerDisconnectTimeoutMap = new Map();\n    this.sessionJoinHandlerMap = new Map();\n    this.sessionJoinRequestMap = new Map();\n    this.data = new ObservedRemoveMap([], { bufferPublishing: 0 });\n    this.sessionClientOffsetMap = new Map();\n    this.addListener('sessionClientJoin', this.handleSessionClientJoin.bind(this));\n    this._ready = this.init(); // eslint-disable-line no-underscore-dangle\n    if (typeof options.sessionId === 'string') {\n      this.ready = this.joinSession(options.sessionId);\n    } else {\n      this.ready = this._ready; // eslint-disable-line no-underscore-dangle\n    }\n    this.addListener('socketJoin', (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (clientId === this.clientId) {\n        return;\n      }\n      if (this.peerDisconnectTimeoutMap.has(clientId)) {\n        this.logger.info(`Clearing client ${clientId} disconnect timeout after socket join`);\n        clearTimeout(this.peerDisconnectTimeoutMap.get(clientId));\n        this.peerDisconnectTimeoutMap.delete(clientId);\n      }\n      this.addToQueue(clientId, () => this.connectToPeer(socketData));\n    });\n    this.addListener('socketLeave', (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (clientId === this.clientId) {\n        return;\n      }\n      clearTimeout(this.peerDisconnectTimeoutMap.get(clientId));\n      if (this.active) {\n        this.peerDisconnectTimeoutMap.set(clientId, setTimeout(() => {\n          this.peerDisconnectTimeoutMap.delete(clientId);\n          this.addToQueue(clientId, () => this.disconnectFromPeer(socketData));\n        }, 15000));\n      } else {\n        this.addToQueue(clientId, () => this.disconnectFromPeer(socketData));\n      }\n    });\n    this.addListener('sessionClientJoin', () => {\n      const sessionClientIds = this.sessionClientIds;\n      if (sessionClientIds.size > 1) {\n        return;\n      }\n      clearTimeout(this.leaveSessionAfterLastClientTimeout);\n    });\n    this.addListener('sessionClientLeave', async () => {\n      const sessionClientIds = this.sessionClientIds;\n      if (sessionClientIds.size > 1) {\n        return;\n      }\n      this.leaveSessionAfterLastClientTimeout = setTimeout(async () => {\n        try {\n          await this.leaveSession();\n        } catch (error) {\n          this.logger.error('Unable to leave session after timeout when last session closed');\n          this.logger.errorStack(error);\n        }\n      }, 5000);\n    });\n\n    this.addListener('session', async () => {\n      const timelineValue = this.data.get(this.clientId);\n      this.data.clear();\n      this.sessionClientOffsetMap.clear();\n      if (typeof timelineValue !== 'undefined') {\n        this.data.set(this.clientId);\n      }\n    });\n\n    this.handleBraidSet = (key:string, values:Array<Connection>) => {\n      if (key !== name) {\n        return;\n      }\n      this.active = true;\n      const oldSessionId = this.sessionId;\n      const newSessionId = getSessionId(values, this.clientId);\n      const oldSocketMap = this.socketMap;\n      const newSocketMap = getSocketMap(values);\n      const oldUserIds = this.userIds;\n      const newUserIds = getPeerIds(values);\n      const oldSessionMap = this.sessionMap;\n      const newSessionMap = getSessionMap(newSocketMap);\n      const oldLocalSessionSocketMap = typeof oldSessionId === 'string' ? oldSessionMap.get(oldSessionId) || new Map() : new Map();\n      const newLocalSessionSocketMap = typeof newSessionId === 'string' ? newSessionMap.get(newSessionId) || new Map() : new Map();\n      this.sessionId = newSessionId;\n      this.userIds = newUserIds;\n      this.socketMap = newSocketMap;\n      this.sessionMap = newSessionMap;\n      if (newSessionId !== oldSessionId) {\n        this.emit('session', newSessionId);\n      }\n      for (const [socketHash, socketData] of oldSocketMap) {\n        if (!newSocketMap.has(socketHash)) {\n          this.emit('socketLeave', socketData);\n        }\n      }\n      for (const [socketHash, socketData] of newSocketMap) {\n        if (!oldSocketMap.has(socketHash)) {\n          this.emit('socketJoin', socketData);\n        }\n      }\n      for (const peerUserId of oldUserIds) {\n        if (!newUserIds.has(peerUserId)) {\n          this.emit('leave', peerUserId);\n        }\n      }\n      for (const peerUserId of newUserIds) {\n        if (!oldUserIds.has(peerUserId)) {\n          this.emit('join', peerUserId);\n        }\n      }\n      for (const [clientId, socketData] of oldLocalSessionSocketMap) {\n        if (clientId === this.clientId) {\n          continue;\n        }\n        if (!newLocalSessionSocketMap.has(clientId)) {\n          this.emit('sessionClientLeave', clientId, socketData);\n        }\n      }\n      for (const [clientId, socketData] of newLocalSessionSocketMap) {\n        if (clientId === this.clientId) {\n          continue;\n        }\n        if (!oldLocalSessionSocketMap.has(clientId)) {\n          this.emit('sessionClientJoin', clientId, socketData);\n        }\n      }\n      for (const [sessionId, oldSessionSocketMap] of oldSessionMap) {\n        const newSessionSocketMap = newSessionMap.get(sessionId);\n        if (typeof newSessionSocketMap === 'undefined') {\n          for (const socketData of oldSessionSocketMap.values()) {\n            this.emit('sessionLeave', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of oldSessionSocketMap) {\n            if (!newSessionSocketMap.has(socketHash)) {\n              this.emit('sessionLeave', socketData);\n            }\n          }\n        }\n      }\n      for (const [sessionId, newSessionSocketMap] of newSessionMap) {\n        const oldSessionSocketMap = oldSessionMap.get(sessionId);\n        if (typeof oldSessionSocketMap === 'undefined') {\n          for (const socketData of newSessionSocketMap.values()) {\n            this.emit('sessionJoin', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of newSessionSocketMap) {\n            if (!oldSessionSocketMap.has(socketHash)) {\n              this.emit('sessionJoin', socketData);\n            }\n          }\n        }\n      }\n    };\n    this.handleBraidClose = () => {\n      this.reset();\n    };\n    this.handleBraidCloseRequested = () => {\n      this.close();\n    };\n    this.handleBraidReconnect = (isReconnecting: boolean) => {\n      if (!isReconnecting) {\n        return;\n      }\n      const startedSessionId = this.startedSessionId;\n      const joinedSessionId = this.joinedSessionId;\n      const handleInitialized = () => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.info(`Restarting session ${startedSessionId}`);\n          this.startSession(startedSessionId).catch((error) => {\n            this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        if (typeof joinedSessionId === 'string') {\n          this.logger.info(`Rejoining session ${joinedSessionId}`);\n          this.joinSession(joinedSessionId).catch((error) => {\n            this.logger.error(`Unable to rejoin session ${joinedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleClose = () => {\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleError = (error:Error) => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n          this.logger.errorStack(error);\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      this.braidClient.addListener('initialized', handleInitialized);\n      this.braidClient.addListener('close', handleClose);\n      this.braidClient.addListener('error', handleError);\n    };\n    this.braidClient.data.addListener('set', this.handleBraidSet);\n    this.braidClient.addListener('close', this.handleBraidClose);\n    this.braidClient.addListener('closeRequested', this.handleBraidCloseRequested);\n    this.braidClient.addListener('reconnect', this.handleBraidReconnect);\n  }\n\n  get sessionClientIds():Set<number> {\n    const sessionId = this.sessionId;\n    if (typeof sessionId !== 'string') {\n      return new Set();\n    }\n    const sessionClientMap = this.sessionMap.get(sessionId);\n    if (typeof sessionClientMap === 'undefined') {\n      return new Set();\n    }\n    const clientIds = new Set(sessionClientMap.keys());\n    clientIds.delete(this.clientId);\n    return clientIds;\n  }\n\n  async init() {\n    const promise = new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(new Error('Closed before initialization completed'));\n      };\n      const handleValue = (key:string, value:any) => {\n        if (key !== this.name) {\n          return;\n        }\n        if (typeof value === 'undefined') {\n          return;\n        }\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(error);\n      };\n      this.addListener('close', handleClose);\n      this.braidClient.data.addListener('set', handleValue);\n      this.braidClient.addListener('error', handleError);\n      handleValue(this.name, this.braidClient.data.get(this.name));\n    });\n    try {\n      await Promise.all([\n        this.braidClient.subscribe(this.name),\n        this.braidClient.addServerEventListener(this.name, this.handleMessage.bind(this)),\n      ]);\n      if (!this.active) {\n        return;\n      }\n      await promise;\n      if (!this.active) {\n        return;\n      }\n      await this.braidClient.startPublishing(this.publishName);\n    } catch (error) {\n      this.braidClient.logger.error(`Unable to join ${this.roomId}`);\n      throw error;\n    }\n  }\n\n  addToQueue(queueId:string | number, func:() => Promise<*>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      return queue.add(func);\n    }\n    const newQueue = new PQueue({ concurrency: 1 });\n    const promise = newQueue.add(func);\n    this.queueMap.set(queueId, newQueue);\n    newQueue.on('idle', () => {\n      this.queueMap.delete(queueId);\n    });\n    return promise;\n  }\n\n  async publish(type:string, value:Object, options?: { timeoutDuration?: number, CustomError?: Class<RequestError> } = {}):Promise<{ text:string, code:number }> {\n    await this._ready; // eslint-disable-line no-underscore-dangle\n    const timeoutDuration = typeof options.timeoutDuration === 'number' ? options.timeoutDuration : 5000;\n    const CustomError = typeof options.CustomError === 'function' ? options.CustomError : RequestError;\n    const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    return new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        reject(new ClientClosedError(`Client closed before ${type} request completed`));\n      };\n      const timeout = setTimeout(() => {\n        this.requestCallbackMap.delete(requestId);\n        this.removeListener('close', handleClose);\n        reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n      }, timeoutDuration);\n      const handleResponse = (success:boolean, code: number, text:string) => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        if (success) {\n          resolve({ code, text });\n          return;\n        }\n        reject(new CustomError(text, code));\n      };\n      this.addListener('close', handleClose);\n      this.requestCallbackMap.set(requestId, handleResponse);\n      this.braidClient.publish(this.publishName, { requestId, type, value });\n    });\n  }\n\n  isConnectedToClient(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return false;\n    }\n    return !!peer.connected;\n  }\n\n  async connectToPeer(socket:Socket) {\n    const { userId, serverId, socketId, clientId, socketHash } = socket;\n    const reconnectCount = this.peerReconnectMap.get(clientId) || 0;\n    const reconnectDelay = reconnectCount > 5 ? 30000 : 1000 * (reconnectCount * reconnectCount);\n    if (reconnectDelay > 0) {\n      this.logger.info(`Delaying connect by ${Math.round(reconnectDelay / 1000)} ${reconnectDelay === 1000 ? 'second' : 'seconds'} on attempt ${reconnectCount}`);\n      await new Promise((resolve) => {\n        const timeout = setTimeout(() => {\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        }, reconnectDelay);\n        const handleClose = () => {\n          clearTimeout(timeout);\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        };\n        const handleSocketLeave = ({ socketHash: oldSocketHash }:Socket) => {\n          if (socketHash !== oldSocketHash) {\n            return;\n          }\n          clearTimeout(timeout);\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        };\n        this.addListener('close', handleClose);\n        this.addListener('socketLeave', handleSocketLeave);\n      });\n      if (!this.socketMap.has(socketHash)) {\n        return;\n      }\n    }\n    const existingPeer = this.peerMap.get(clientId);\n    const options = Object.assign({}, { initiator: clientId > this.clientId }, this.peerOptions);\n    const peer = existingPeer || new SimplePeer(options);\n    this.peerMap.set(clientId, peer);\n    this.peerReconnectMap.set(clientId, reconnectCount + 1);\n    this.emit('peer', { clientId, peer });\n    const addPeerListeners = () => {\n      this.peerReconnectMap.set(clientId, 0);\n      const cleanup = () => {\n        peer.removeListener('stream', handleStream);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('peerReconnect', handlePeerReconnect);\n      };\n      const handleStream = (stream:MediaStream) => {\n        if (!this.sessionClientIds.has(clientId)) {\n          this.logger.error(`Received an unexpected stream from non-session user ${userId} client ${clientId}`);\n          stream.getTracks().forEach((track) => {\n            track.stop();\n            track.dispatchEvent(new Event('stop'));\n          });\n          return;\n        }\n        this.emit('stream', { stream, userId, serverId, socketId, clientId });\n      };\n      const handlePeerClose = () => {\n        this.logger.info(`Disconnected from user ${userId} client ${clientId}`);\n        cleanup();\n        this.emit('disconnect', { userId, serverId, socketId, clientId });\n        if (this.peerMap.has(clientId)) {\n          this.peerMap.delete(clientId);\n          this.connectToPeer(socket);\n          this.logger.warn(`Reconnecting to user ${userId} client ${clientId}`);\n        }\n      };\n      const handlePeerError = (error:Error) => {\n        this.logger.error(`Error in connection to user ${userId} client ${clientId}`);\n        this.logger.errorStack(error);\n        this.emit('peerError', { userId, serverId, socketId, clientId, error });\n      };\n      const handlePeerReconnect = () => {\n        this.logger.info(`Reconnected to user ${userId} client ${clientId}`);\n        cleanup();\n      };\n      peer.addListener('stream', handleStream);\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('error', handlePeerError);\n      peer.addListener('peerReconnect', handlePeerReconnect);\n    };\n    if (peer.connected) {\n      peer.emit('peerReconnect');\n      addPeerListeners();\n      this.emit('connect', { userId, clientId, serverId, socketId, peer });\n      return;\n    }\n    await new Promise((resolve) => {\n      const cleanup = () => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n      };\n      const timeout = setTimeout(() => {\n        cleanup();\n        resolve();\n      }, 5000);\n      const handleConnect = () => {\n        cleanup();\n        addPeerListeners();\n        this.emit('connect', { userId, clientId, serverId, socketId, peer });\n        resolve();\n      };\n      const handleSignal = async (data:Object) => {\n        try {\n          await this.publish(SIGNAL, { serverId, socketId, data }, { CustomError: SignalError });\n        } catch (error) {\n          this.logger.error(`Unable to signal user ${userId} client ${clientId} closed`);\n          this.logger.errorStack(error);\n        }\n      };\n      const handleClose = () => {\n        cleanup();\n        resolve();\n      };\n      const handlePeerClose = () => {\n        this.logger.info(`Connection to user ${userId} client ${clientId} closed`);\n        cleanup();\n        if (this.peerMap.has(clientId)) {\n          this.peerMap.delete(clientId);\n          this.connectToPeer(socket);\n          this.logger.warn(`Reconnecting to user ${userId} client ${clientId}`);\n        }\n        resolve();\n      };\n      const handlePeerError = (error:Error) => {\n        cleanup();\n        this.logger.error(`Error connecting to ${userId}`);\n        this.logger.errorStack(error);\n        this.emit('peerError', { userId, serverId, socketId, clientId, error });\n        this.emit('error', error);\n        resolve();\n      };\n      const handleSocketLeave = ({ socketHash: oldSocketHash }:Socket) => {\n        if (socketHash !== oldSocketHash) {\n          return;\n        }\n        cleanup();\n        this.logger.warn(`Unable to connect to user ${userId} client ${clientId}, socket closed before connection was completed`);\n        resolve();\n      };\n      peer.addListener('error', handlePeerError);\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('connect', handleConnect);\n      peer.addListener('signal', handleSignal);\n      this.addListener('close', handleClose);\n      this.addListener('socketLeave', handleSocketLeave);\n      const signalQueue = this.signalQueueMap.get(clientId);\n      if (Array.isArray(signalQueue)) {\n        while (signalQueue.length > 0) {\n          const data = signalQueue.shift();\n          peer.signal(data);\n        }\n      }\n    });\n  }\n\n  async sendStream(clientId:number, stream:MediaStream) {\n    const peer = await this.getConnectedPeer(clientId);\n    peer.addStream(stream);\n  }\n\n  async disconnectFromPeer({ clientId }:Socket) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return;\n    }\n    this.peerMap.delete(clientId);\n    peer.destroy();\n  }\n\n  async onIdle() {\n    while (this.queueMap.size > 0) {\n      for (const queue of this.queueMap.values()) {\n        await queue.onIdle();\n      }\n      // $FlowFixMe\n      await new Promise((resolve) => queueMicrotask(resolve));\n    }\n  }\n\n  cleanupSession() {\n    const startedSessionId = this.startedSessionId;\n    delete this.startedSessionId;\n    delete this.joinedSessionId;\n    if (typeof startedSessionId === 'string') {\n      this.sessionJoinHandlerMap.delete(startedSessionId);\n    }\n    // const oldSessionId = this.sessionId;\n    // if (oldSessionId === newSessionId) {\n    //  return;\n    // }\n    // const oldSessionClientIds = this.sessionClientIds;\n    // //this.sessionId = newSessionId;\n    // //this.emit('session', newSessionId || false);\n    // const newSessionClientIds = this.sessionClientIds;\n    // /for (const clientId of oldSessionClientIds) {\n    // /  if (clientId === this.clientId) {\n    // /    continue;\n    // /  }\n    // /  if (!newSessionClientIds.has(clientId)) {\n    // /    this.emit('sessionClientLeave', clientId);\n    // /  }\n    // /}\n    // const timelineValue = this.data.get(this.clientId);\n    // this.data.clear();\n    // this.sessionClientOffsetMap.clear();\n    // if (typeof timelineValue !== 'undefined') {\n    //  this.data.set(this.clientId);\n    // }\n    // for (const clientId of newSessionClientIds) {\n    //   if (clientId === this.clientId) {\n    //     continue;\n    //   }\n    //   if (!oldSessionClientIds.has(clientId)) {\n    //     this.emit('sessionClientJoin', clientId);\n    //   }\n    // }\n  }\n\n  didStartSession() {\n    if (!this.sessionId) {\n      return false;\n    }\n    return this.startedSessionId === this.sessionId;\n  }\n\n  async inviteToSession(userId:string, options?:{ data?:Object, timeoutDuration?: number, sessionJoinHandler?: SessionJoinHandler } = {}) {\n    const { data, timeoutDuration = 30000, sessionJoinHandler } = options;\n    const queue = this.queueMap.get(SESSION_QUEUE);\n    if (typeof queue !== 'undefined') {\n      await queue.onIdle();\n    }\n    const hasSessionId = this.sessionId === 'string';\n    // $FlowFixMe\n    const sessionId = this.sessionId || globalThis.crypto.randomUUID(); // eslint-disable-line no-undef\n    if (hasSessionId) {\n      await this.publish(INVITE_TO_SESSION, { userId, sessionId, data }, { CustomError: InviteToSessionError });\n    } else {\n      const automaticSessionJoinHandler = async (values) => {\n        if (values.userId === userId) {\n          return [true, 200, 'Authorized'];\n        }\n        if (typeof sessionJoinHandler === 'function') {\n          return sessionJoinHandler(values);\n        }\n        return [true, 200, 'Authorized'];\n      };\n      await this.startSession(sessionId, automaticSessionJoinHandler);\n      await this.publish(INVITE_TO_SESSION, { userId, sessionId, data }, { CustomError: InviteToSessionError });\n    }\n    await new Promise((resolve, reject) => {\n      const cleanup = () => {\n        clearTimeout(timeout);\n        this.removeListener('sessionJoin', handleSessionJoin);\n        this.removeListener('close', handleClose);\n        this.inviteDeclineHandlerMap.delete(`${userId}:${sessionId}`);\n      };\n      const leaveSession = async () => {\n        if (hasSessionId) {\n          return;\n        }\n        try {\n          await this.leaveSession();\n        } catch (error) {\n          this.logger.error('Unable to leave session after invite timeout');\n          this.logger.errorStack(error);\n        }\n      };\n      const timeout = setTimeout(async () => {\n        cleanup();\n        await leaveSession();\n        reject(new InvitationTimeoutError(`Invitation timed out after ${Math.round(timeoutDuration / 100) / 10} seconds`));\n      }, timeoutDuration);\n      const handleSessionJoin = (socket: Socket) => {\n        if (socket.sessionId !== sessionId) {\n          return;\n        }\n        if (socket.userId !== userId) {\n          return;\n        }\n        cleanup();\n        resolve();\n      };\n      const handleClose = () => {\n        cleanup();\n        reject(new ClientClosedError('Closed before invite'));\n      };\n      const handleDecline = async () => {\n        cleanup();\n        await leaveSession();\n        reject(new InvitationDeclinedError('Invitation declined'));\n      };\n      this.inviteDeclineHandlerMap.set(`${userId}:${sessionId || ''}`, handleDecline);\n      this.addListener('sessionJoin', handleSessionJoin);\n      this.addListener('close', handleClose);\n    });\n  }\n\n  async startSession(sessionId:string, sessionJoinHandler?: SessionJoinHandler) {\n    await this.addToQueue(SESSION_QUEUE, () => this.publish(START_SESSION, { sessionId }, { CustomError: StartSessionError }));\n    this.cleanupSession();\n    this.startedSessionId = sessionId;\n    if (typeof sessionJoinHandler === 'function') {\n      this.sessionJoinHandlerMap.set(sessionId, sessionJoinHandler);\n    } else {\n      this.sessionJoinHandlerMap.set(sessionId, () => [true, 200, 'Authorized']);\n    }\n  }\n\n  didJoinSession() {\n    if (!this.sessionId) {\n      return false;\n    }\n    return this.joinedSessionId === this.sessionId;\n  }\n\n  async joinSession(sessionId:string, timeoutDuration?: number = 30000) {\n    await this.addToQueue(SESSION_QUEUE, () => this.publish(JOIN_SESSION, { sessionId, timeoutDuration }, { CustomError: JoinSessionError }));\n    this.cleanupSession();\n    this.joinedSessionId = sessionId;\n  }\n\n  async leaveSession() {\n    try {\n      await this.addToQueue(SESSION_QUEUE, () => this.publish(LEAVE_SESSION, {}, { CustomError: LeaveSessionError }));\n      this.cleanupSession();\n    } catch (error) {\n      if (error instanceof ClientClosedError) {\n        return;\n      }\n      throw error;\n    }\n  }\n\n  async handleMessage(message:{ requestId?: number, type:string, value:Object }) {\n    if (typeof message !== 'object') {\n      this.logger.error('Invalid message format');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    const { requestId, type, value } = message;\n    if (typeof type !== 'string') {\n      this.logger.error('Invalid message format, type property should be of type \"string\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (typeof value !== 'object') {\n      this.logger.error('Invalid message format, value property should be of type \"object\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (type === RESPONSE && typeof requestId === 'number') {\n      const callback = this.requestCallbackMap.get(requestId);\n      if (typeof callback !== 'function') {\n        this.logger.error(`Callback for request ${requestId} does not exist`);\n        return;\n      }\n      const { success, code, text } = value;\n      if (typeof success !== 'boolean') {\n        this.logger.error('Response message contained an invalid value success property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value success property');\n        return;\n      }\n      if (typeof code !== 'number') {\n        this.logger.error('Response message contained an invalid value code property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value code property');\n        return;\n      }\n      if (typeof text !== 'string') {\n        this.logger.error('Response message contained an invalid value text property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value text property');\n        return;\n      }\n      callback(success, code, text);\n      return;\n    }\n    switch (type) {\n      case SIGNAL:\n        try {\n          const {\n            clientId,\n            serverId,\n            socketId,\n            data,\n          } = value;\n          if (typeof serverId !== 'number') {\n            this.logger.error('Signal message contained an invalid server ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof socketId !== 'number') {\n            this.logger.error('Signal message contained an invalid socket ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof data !== 'object') {\n            this.logger.error('Signal message contained an invalid data property');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const peer = this.peerMap.get(clientId);\n          if (typeof peer === 'undefined') {\n            const signalQueue = this.signalQueueMap.get(clientId);\n            if (Array.isArray(signalQueue)) {\n              signalQueue.push(data);\n              return;\n            }\n            this.signalQueueMap.set(clientId, [data]);\n            return;\n          }\n          if (peer.destroyed || peer.destroying) {\n            return;\n          }\n          peer.signal(data);\n        } catch (error) {\n          this.logger.error('Unable to process signal message');\n          this.logger.errorStack(error);\n        }\n        break;\n      case DECLINE_INVITE_TO_SESSION:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Decline invite request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Decline invite request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const inviteDeclineHandler = this.inviteDeclineHandlerMap.get(requestHash);\n          if (typeof inviteDeclineHandler === 'function') {\n            inviteDeclineHandler();\n          }\n        } catch (error) {\n          this.logger.error('Unable to process decline invite request');\n          this.logger.errorStack(error);\n        }\n        break;\n      case ABORT_SESSION_JOIN_REQUEST:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Abort session join request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Abort session join request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const existing = this.sessionJoinRequestMap.get(requestHash);\n          if (!Array.isArray(existing)) {\n            this.logger.warn(`Unable to abort session join request for user ${userId} and session ${sessionId}, request does not exist`);\n            return;\n          }\n          this.logger.warn(`Aborting session join request for user ${userId} and session ${sessionId}`);\n          existing[1].abort();\n        } catch (error) {\n          this.logger.error('Unable to process session abort join request');\n          this.logger.errorStack(error);\n        }\n        break;\n      case SESSION_JOIN_REQUEST:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Session join request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Session join request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const existing = this.sessionJoinRequestMap.get(requestHash);\n          if (Array.isArray(existing)) {\n            this.logger.warn(`Session join request for user ${userId} and session ${sessionId} already exists`);\n            await existing[0];\n            return;\n          }\n          const sessionJoinHandler = this.sessionJoinHandlerMap.get(sessionId);\n          if (typeof sessionJoinHandler !== 'function') {\n            this.logger.error(`Handler for session ${sessionId} does not exist`);\n            return;\n          }\n          const abortController = new AbortController();\n          abortController.signal.addEventListener('abort', () => {\n            this.sessionJoinRequestMap.delete(requestHash);\n          });\n          const promise = (async () => {\n            let response = [false, 500, 'Error in sesssion join handler'];\n            try {\n              response = await sessionJoinHandler({ userId, sessionId, abortSignal: abortController.signal });\n            } catch (error) {\n              this.logger.error(`Unable to respond to session join request for user ${userId} and session ${sessionId}, error in session join handler`);\n              this.logger.errorStack(error);\n            }\n            if (abortController.signal.aborted) {\n              this.logger.warn(`Session join request for user ${userId} and session ${sessionId} was aborted`);\n              return;\n            }\n            try {\n              await this.publish(SESSION_JOIN_RESPONSE, {\n                userId,\n                sessionId,\n                success: response[0],\n                code: response[1],\n                text: response[2],\n              }, { CustomError: SessionJoinResponseError });\n            } catch (error) {\n              this.logger.error(`Unable to send session join response for user ${userId} and session ${sessionId}`);\n              this.logger.errorStack(error);\n            }\n            this.sessionJoinRequestMap.delete(requestHash);\n          })();\n          this.sessionJoinRequestMap.set(requestHash, [promise, abortController]);\n          await promise;\n        } catch (error) {\n          this.logger.error('Unable to process session join request');\n          this.logger.errorStack(error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown message type ${type}`);\n    }\n  }\n\n  async getConnectedPeer(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer !== 'undefined' && peer.connected) {\n      return peer;\n    }\n    return new Promise((resolve, reject) => {\n      let _peer; // eslint-disable-line no-underscore-dangle\n      const cleanup = () => {\n        this.removeListener('sessionClientLeave', handleSessionClientLeave);\n        this.removeListener('connect', handleConnect);\n        this.removeListener('peer', handlePeer);\n        if (typeof _peer !== 'undefined') {\n          _peer.removeListener('close', handlePeerClose);\n          _peer.removeListener('error', handlePeerError);\n        }\n      };\n      const handlePeerClose = () => {\n        cleanup();\n        reject(new Error(`Peer ${clientId} closed before connection was established`));\n      };\n      const handlePeerError = (error:Error) => {\n        cleanup();\n        reject(error);\n      };\n      const handlePeer = ({ clientId: newClientId, peer: _p }) => {\n        if (newClientId !== clientId) {\n          return;\n        }\n        _peer = _p;\n        _p.addListener('close', handlePeerClose);\n        _p.addListener('error', handlePeerError);\n      };\n      const handleConnect = ({ clientId: newClientId, peer: _p }) => {\n        if (newClientId !== clientId) {\n          return;\n        }\n        cleanup();\n        resolve(_p);\n      };\n      const handleSessionClientLeave = (oldClientId:number) => {\n        if (clientId !== oldClientId) {\n          return;\n        }\n        cleanup();\n        reject(new Error(`Client ${clientId} left before connection was established`));\n      };\n      this.addListener('sessionClientLeave', handleSessionClientLeave);\n      this.addListener('connect', handleConnect);\n      this.addListener('peer', handlePeer);\n    });\n  }\n\n  async handleSessionClientJoin(clientId:number) {\n    let interval;\n    let _peer; // eslint-disable-line no-underscore-dangle\n    let offset = 0;\n    const abortController = new AbortController();\n    const abortSignal = abortController.signal;\n    const cleanup = () => {\n      abortController.abort();\n      this.removeListener('sessionClientLeave', handleSessionClientLeave);\n      if (typeof _peer !== 'undefined') {\n        _peer.removeListener('close', handlePeerClose);\n        _peer.removeListener('data', handlePeerData);\n      }\n      this.data.removeListener('publish', handleDataPublish);\n      clearInterval(interval);\n    };\n    const handlePeerClose = () => {\n      cleanup();\n      if (this.sessionClientIds.has(clientId)) {\n        this.handleSessionClientJoin(clientId);\n      }\n    };\n    const handleSessionClientLeave = (oldClientId:number) => {\n      if (clientId !== oldClientId) {\n        return;\n      }\n      cleanup();\n    };\n    const handleDataPublish = (queue:[Array<*>, Array<*>]) => {\n      sendToPeer(new ObservedRemoveDump(queue));\n    };\n    const sendToPeer = (unpacked: any) => {\n      if (typeof peer === 'undefined') {\n        throw new Error('Peer does not exist');\n      }\n      peer.send(pack(unpacked));\n    };\n    const handlePeerData = (packed:Buffer) => {\n      const message = unpack(packed);\n      if (message instanceof Ping) {\n        sendToPeer(new Pong(message.timestamp, Date.now()));\n      } else if (message instanceof Pong) {\n        offset = (Date.now() - message.wallclock) - (performance.now() - message.timestamp) / 2;\n        this.sessionClientOffsetMap.set(clientId, offset);\n      } else if (message instanceof ObservedRemoveDump) {\n        this.data.process(message.queue);\n      }\n    };\n    this.addListener('sessionClientLeave', handleSessionClientLeave);\n    if (!this.isConnectedToClient(clientId)) {\n      await new Promise((resolve) => {\n        const handleConnect = ({ clientId: newClientId }) => {\n          if (newClientId !== clientId) {\n            return;\n          }\n          this.removeListener('connect', handleConnect);\n          abortSignal.removeEventListener('abort', handleAbort);\n          resolve();\n        };\n        const handleAbort = () => {\n          this.removeListener('connect', handleConnect);\n          abortSignal.removeEventListener('abort', handleAbort);\n          resolve();\n        };\n        this.addListener('connect', handleConnect);\n        abortSignal.addEventListener('abort', handleAbort);\n      });\n      if (abortSignal.aborted) {\n        return;\n      }\n    }\n    const peer = this.peerMap.get(clientId);\n    _peer = peer;\n    if (typeof peer === 'undefined') {\n      throw new Error('Peer does not exist');\n    }\n    peer.addListener('close', handlePeerClose);\n    peer.addListener('data', handlePeerData);\n    interval = setInterval(() => {\n      peer.send(pack(new Ping(performance.now())));\n    }, 1000);\n    peer.send(pack(new Ping(performance.now())));\n    this.data.addListener('publish', handleDataPublish);\n    handleDataPublish(this.data.dump());\n  }\n\n  declineInviteToSession(data: Object) {\n    return this.publish(DECLINE_INVITE_TO_SESSION, data, { CustomError: DeclineInviteToSessionError });\n  }\n\n  reset() {\n    clearTimeout(this.leaveSessionAfterLastClientTimeout);\n    this.handleBraidSet(this.name, []);\n  }\n\n  close() {\n    this.reset();\n    this.active = false;\n    this.onIdle().catch((error) => {\n      this.logger.error('Error in queue during close');\n      this.logger.errorStack(error);\n    }).finally(() => {\n      this.braidClient.data.removeListener('set', this.handleBraidSet);\n      this.braidClient.removeListener('close', this.handleBraidClose);\n      this.braidClient.removeListener('closeRequested', this.handleBraidCloseRequested);\n      this.braidClient.removeListener('reconnect', this.handleBraidReconnect);\n      this.braidClient.stopPublishing(this.publishName);\n      this.braidClient.removeServerEventListener(this.name);\n      this.braidClient.unsubscribe(this.name);\n    });\n    this.emit('close');\n  }\n}\n\nconst publish = (braidClient:BraidClient, abortSignal: AbortSignal, roomId:string, type:string, value:Object, options?: { timeoutDuration?: number, CustomError?: Class<RequestError> } = {}) => {\n  const name = `signal/${roomId}`;\n  const publishName = `signal/${roomId}/${Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(36)}`;\n  const timeoutDuration = typeof options.timeoutDuration === 'number' ? options.timeoutDuration : 5000;\n  const CustomError = typeof options.CustomError === 'function' ? options.CustomError : RequestError;\n  const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n  return new Promise((resolve, reject) => {\n    const cleanup = () => {\n      clearTimeout(timeout);\n      abortSignal.removeEventListener('abort', handleAbort);\n      braidClient.removeServerEventListener(name);\n      braidClient.stopPublishing(publishName);\n    };\n    const handleAbort = () => {\n      cleanup();\n      reject(new AbortError(`Publish request aborted before ${type} request completed`));\n    };\n    const timeout = setTimeout(() => {\n      cleanup();\n      reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n    }, timeoutDuration);\n    const handleMessage = (message:{ requestId?: number, type:string, value:Object }) => {\n      if (typeof message !== 'object') {\n        return;\n      }\n      const { requestId: responseId, type: responseType, value: responseValue } = message;\n      if (responseType !== RESPONSE) {\n        return;\n      }\n      if (responseId !== requestId) {\n        return;\n      }\n      const { success, code, text } = responseValue;\n      cleanup();\n      if (success) {\n        resolve({ code, text });\n        return;\n      }\n      reject(new CustomError(text, code));\n    };\n    abortSignal.addEventListener('abort', handleAbort);\n    Promise.all([\n      braidClient.startPublishing(publishName),\n      braidClient.addServerEventListener(name, handleMessage),\n    ]).then(() => {\n      braidClient.publish(publishName, { requestId, type, value });\n    }).catch((error) => {\n      cleanup();\n      reject(error);\n    });\n  });\n};\n\nBond.declineInviteToSession = (braidClient: BraidClient, abortSignal:AbortSignal, data: { roomId: string }) => {\n  const { roomId } = data;\n  return publish(braidClient, abortSignal, roomId, DECLINE_INVITE_TO_SESSION, data, { CustomError: DeclineInviteToSessionError });\n};\n\n"],"file":"index.js"}