{"version":3,"file":"index.js","names":["getSocketMap","values","Map","map","x","socketHash","socketId","serverId","userId","clientId","sessionId","getSessionId","getPeerIds","Set","getSessionMap","socketMap","socket","sessionClientMap","get","set","Bond","braidClient","roomId","options","active","Math","floor","random","Number","MAX_SAFE_INTEGER","localConnectionsOnly","name","publishName","toString","logger","peerOptions","userIds","peerMap","peerReconnectMap","queueMap","sessionMap","inviteDeclineHandlerMap","requestCallbackMap","signalQueueMap","peerDisconnectTimeoutMap","sessionJoinHandlerMap","sessionJoinRequestMap","data","ObservedRemoveMap","bufferPublishing","sessionClientOffsetMap","preApprovedSessionUserIdSet","peerAddTrackHandlerMap","_ready","init","ready","joinSession","handleSessionClientJoin","sessionClientIds","size","clearTimeout","leaveSessionAfterLastClientTimeout","interval","_peer","offset","peerIsClosing","abortController","AbortController","abortSignal","signal","cleanup","abort","removeListener","handleSessionClientLeave","handlePeerClose","handlePeerData","handleDataPublish","clearInterval","has","oldClientId","queue","sendToPeer","ObservedRemoveDump","unpacked","peer","Error","connected","warn","send","mergeChunkPromises","handleMultipartContainer","multipartContainer","existingMergeChunksPromise","id","push","mergeChunksPromise","MultipartContainer","getMergeChunksPromise","packed","error","stack","split","forEach","line","message","delete","Ping","Pong","timestamp","Date","now","wallclock","performance","process","PeerEvent","emit","type","args","Close","info","code","addListener","isConnectedToClient","Promise","resolve","handleConnect","newClientId","removeEventListener","handleAbort","addEventListener","aborted","setInterval","dump","handleSocketJoin","socketData","addToQueue","connectToPeer","handleSocketLeave","setTimeout","disconnectFromPeer","leaveSession","errorStack","handleSession","clear","handleBraidSet","key","oldSessionId","newSessionId","oldSocketMap","newSocketMap","oldUserIds","newUserIds","oldSessionMap","newSessionMap","oldLocalSessionSocketMap","newLocalSessionSocketMap","peerUserId","oldSessionSocketMap","newSessionSocketMap","handleBraidClose","reset","handleBraidCloseRequested","close","handleBraidReconnect","isReconnecting","startedSessionId","joinedSessionId","handleInitialized","startSession","catch","handleClose","handleError","keys","promise","reject","handleValue","value","all","subscribe","addServerEventListener","handleMessage","bind","startPublishing","queueId","func","add","newQueue","PQueue","concurrency","on","timeoutDuration","CustomError","RequestError","requestId","timeout","ClientClosedError","RequestTimeoutError","handleResponse","success","text","publish","reconnectCount","reconnectDelay","round","oldSocketHash","existingPeer","Object","assign","initiator","config","iceServers","SimplePeer","addPeerListeners","handleSignal","handleStream","handlePeerError","handlePeerReconnect","SIGNAL","SignalError","stream","getTracks","track","stop","dispatchEvent","Event","candidate","addressParts","join","sdp","replace","signalQueue","Array","isArray","length","shift","getConnectedPeer","chunks","chunk","ok","write","once","addTrackHandler","event","MediaStreamTrackEvent","addTrack","addStream","removeStream","destroy","onIdle","queueMicrotask","REMOVE_FROM_SESSION","RemoveFromSessionError","SESSION_QUEUE","CANCEL_INVITE_TO_SESSION","CancelInviteToSessionError","sessionJoinHandler","hasSessionId","globalThis","crypto","randomUUID","didCancel","handleCancelInviteBeforePublish","cancelledSessionId","cancelledUserId","INVITE_TO_SESSION","InviteToSessionError","InvitationCancelledError","handleSessionJoin","handleLeave","handleCancelInvite","InvitationTimeoutError","isOnlySocketForUserId","InvitedUserLeftError","handleDecline","InvitationDeclinedError","previousStartedSessionId","START_SESSION","StartSessionError","wrappedSessionJoinHandler","previousJoinedSessionId","JOIN_SESSION","JoinSessionError","ABORT_SESSION_JOIN_REQUEST","AbortSessionJoinError","LEAVE_SESSION","LeaveSessionError","JSON","stringify","RESPONSE","callback","destroyed","destroying","DECLINE_INVITE_TO_SESSION","requestHash","inviteDeclineHandler","existing","SESSION_JOIN_REQUEST","response","SESSION_JOIN_RESPONSE","SessionJoinResponseError","handlePeer","_p","DeclineInviteToSessionError","stopPublishing","removeServerEventListener","unsubscribe","EventEmitter","AbortError","responseId","responseType","responseValue","then","declineInviteToSession","getLocalRoomId","_roomId","bond","AUTOMATIC_DISCOVERY_ROOM_ID","localKey","negotiatedRoomId","handleSet","remoteRoomId","parseInt"],"sources":["../../src/index.js"],"sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport ObservedRemoveMap from 'observed-remove/map';\nimport type BraidClient from '@bunchtogether/braid-client';\nimport SimplePeer from 'simple-peer';\nimport PQueue from 'p-queue';\nimport {\n  pack,\n  unpack,\n} from 'msgpackr';\nimport {\n  SIGNAL,\n  START_SESSION,\n  LEAVE_SESSION,\n  JOIN_SESSION,\n  INVITE_TO_SESSION,\n  DECLINE_INVITE_TO_SESSION,\n  SESSION_QUEUE,\n  ABORT_SESSION_JOIN_REQUEST,\n  SESSION_JOIN_REQUEST,\n  SESSION_JOIN_RESPONSE,\n  REMOVE_FROM_SESSION,\n  CANCEL_INVITE_TO_SESSION,\n  RESPONSE,\n  AUTOMATIC_DISCOVERY_ROOM_ID,\n} from './constants';\nimport {\n  AbortError,\n  RequestError,\n  StartSessionError,\n  RequestTimeoutError,\n  JoinSessionError,\n  LeaveSessionError,\n  SignalError,\n  SessionJoinResponseError,\n  ClientClosedError,\n  InviteToSessionError,\n  InvitationDeclinedError,\n  InvitedUserLeftError,\n  InvitationTimeoutError,\n  DeclineInviteToSessionError,\n  RemoveFromSessionError,\n  CancelInviteToSessionError,\n  InvitationCancelledError,\n  AbortSessionJoinError,\n} from './errors';\nimport {\n  Ping,\n  Pong,\n  ObservedRemoveDump,\n  PeerEvent,\n  Close,\n  MultipartContainer,\n} from './messagepack';\n\ntype Logger = {\n  debug: (string | number, ...any) => void,\n  info: (string | number, ...any) => void,\n  warn: (string | number, ...any) => void,\n  error: (string | number, ...any) => void,\n  errorStack: (error:Error | MediaError) => void,\n};\n\ntype Options = {\n  peerOptions?: Object,\n  logger?: Logger,\n  sessionId?: string,\n  localConnectionsOnly?: boolean\n}\n\nexport type SessionJoinHandler = ({ sessionId: string, userId: string, abortSignal: AbortSignal }) => [boolean, number, string] | Promise<[boolean, number, string]>;\nexport type Connection = [number, number, string, number, string | false];\nexport type Socket = { socketHash: string, socketId: number, serverId: number, userId: string, clientId: number, sessionId: string | false };\n\nconst getSocketMap = (values?:Array<Connection>):Map<string, Socket> => {\n  if (typeof values === 'undefined') {\n    return new Map();\n  }\n  return new Map(values.map((x) => {\n    const socketHash = `${x[0]}:${x[1]}`;\n    return [socketHash, { socketHash, socketId: x[0], serverId: x[1], userId: x[2], clientId: x[3], sessionId: x[4] }];\n  }));\n};\n\nconst getSessionId = (values?:Array<Connection>, clientId:number):(string | false) => {\n  if (typeof values === 'undefined') {\n    return false;\n  }\n  for (const x of values) {\n    if (x[3] === clientId) {\n      return x[4] || false;\n    }\n  }\n  return false;\n};\n\nconst getPeerIds = (values?:Array<Connection>):Set<string> => {\n  if (typeof values === 'undefined') {\n    return new Set();\n  }\n  return new Set(values.map((x) => x[2]));\n};\n\nconst getSessionMap = (socketMap:Map<string, Socket>):Map<string | false, Map<number, Socket>> => {\n  const map = new Map();\n  for (const socket of socketMap.values()) {\n    const { clientId, sessionId } = socket;\n    const sessionClientMap = map.get(sessionId);\n    if (typeof sessionClientMap === 'undefined') {\n      map.set(sessionId, new Map([[clientId, socket]]));\n    } else {\n      sessionClientMap.set(clientId, socket);\n    }\n  }\n  return map;\n};\n\nexport class Bond extends EventEmitter {\n  static declineInviteToSession: (BraidClient, AbortSignal, { roomId: string, userId: string, clientId: number, sessionId: string, data: Object }) => Promise<{ code:number, text:string }>;\n  static getLocalRoomId: (BraidClient, string | false, string, AbortSignal, Options) => Promise<string>;\n\n  declare roomId: string;\n  declare clientId: number;\n  declare userId: string;\n  declare name: string;\n  declare publishName: string;\n  declare braidClient: BraidClient;\n  declare logger: Logger;\n  declare _ready: Promise<void>;\n  declare ready: Promise<void>;\n  declare socketMap: Map<string, Socket>;\n  declare sessionMap: Map<string | false, Map<number, Socket>>;\n  declare userIds: Set<string>;\n  declare peerOptions: void | Object;\n  declare peerMap: Map<number, SimplePeer>;\n  declare peerReconnectMap: Map<number, number>;\n  declare queueMap: Map<string | number, PQueue>;\n  declare handleSocketJoin: (Socket) => void;\n  declare handleSocketLeave: (Socket) => void;\n  declare handleSessionClientLeave: () => void;\n  declare handleSessionClientJoin: (number) => Promise<void>;\n  declare handleSession: () => void;\n  declare handleBraidSet: (string, any) => void;\n  declare handleBraidClose: () => void;\n  declare handleBraidCloseRequested: () => void;\n  declare handleBraidReconnect: (boolean) => void;\n  declare handlePeerData: (Buffer) => void;\n  declare signalQueueMap: Map<number, Array<[string, Object]>>;\n  declare requestCallbackMap: Map<number, (boolean, number, string) => void | Promise<void>>;\n  declare inviteDeclineHandlerMap: Map<string, () => Promise<void>>;\n  declare sessionId: false | string;\n  declare startedSessionId: void | string;\n  declare joinedSessionId: void | string;\n  declare active: boolean;\n  declare peerDisconnectTimeoutMap: Map<number, TimeoutID>;\n  declare sessionJoinHandlerMap: Map<string, SessionJoinHandler>;\n  declare sessionJoinRequestMap: Map<string, [Promise<void>, AbortController]>;\n  declare data: ObservedRemoveMap<string | number, any>;\n  declare sessionClientOffsetMap: Map<number, number>;\n  declare leaveSessionAfterLastClientTimeout: void | TimeoutID;\n  declare preApprovedSessionUserIdSet: Set<string>;\n  declare peerAddTrackHandlerMap: Map<Object, (Event) => void>;\n  declare localConnectionsOnly: boolean;\n\n  constructor(braidClient: BraidClient, roomId:string, userId:string, options?: Options = {}) {\n    super();\n    this.active = true;\n    this.clientId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    this.userId = userId;\n    this.roomId = roomId;\n    this.sessionId = false;\n    this.localConnectionsOnly = !!options.localConnectionsOnly;\n    const name = `signal/${this.roomId}`;\n    this.name = name;\n    this.publishName = `signal/${this.roomId}/${this.clientId.toString(36)}`;\n    this.braidClient = braidClient;\n    this.logger = options.logger || braidClient.logger;\n    this.peerOptions = options.peerOptions;\n    this.socketMap = new Map();\n    this.userIds = new Set();\n    this.peerMap = new Map();\n    this.peerReconnectMap = new Map();\n    this.queueMap = new Map();\n    this.sessionMap = new Map();\n    this.inviteDeclineHandlerMap = new Map();\n    this.requestCallbackMap = new Map();\n    this.signalQueueMap = new Map();\n    this.peerDisconnectTimeoutMap = new Map();\n    this.sessionJoinHandlerMap = new Map();\n    this.sessionJoinRequestMap = new Map();\n    this.data = new ObservedRemoveMap([], { bufferPublishing: 0 });\n    this.sessionClientOffsetMap = new Map();\n    this.preApprovedSessionUserIdSet = new Set();\n    this.peerAddTrackHandlerMap = new Map();\n\n\n    this._ready = this.init(); // eslint-disable-line no-underscore-dangle\n\n    if (typeof options.sessionId === 'string') {\n      this.ready = this.joinSession(options.sessionId);\n    } else {\n      this.ready = this._ready; // eslint-disable-line no-underscore-dangle\n    }\n\n    this.handleSessionClientJoin = async (clientId:number) => {\n      const sessionClientIds = this.sessionClientIds;\n      if (sessionClientIds.size > 1) {\n        clearTimeout(this.leaveSessionAfterLastClientTimeout);\n      }\n      let interval;\n      let _peer; // eslint-disable-line no-underscore-dangle\n      let offset = 0;\n      let peerIsClosing = false;\n      const abortController = new AbortController();\n      const abortSignal = abortController.signal;\n      const cleanup = () => {\n        abortController.abort();\n        this.removeListener('sessionClientLeave', handleSessionClientLeave);\n        if (typeof _peer !== 'undefined') {\n          _peer.removeListener('close', handlePeerClose);\n          _peer.removeListener('data', handlePeerData);\n        }\n        this.data.removeListener('publish', handleDataPublish);\n        clearInterval(interval);\n      };\n      const handlePeerClose = () => {\n        cleanup();\n        if (!peerIsClosing && this.active && this.sessionClientIds.has(clientId)) {\n          this.handleSessionClientJoin(clientId);\n        }\n      };\n      const handleSessionClientLeave = (oldClientId:number) => {\n        if (clientId !== oldClientId) {\n          return;\n        }\n        cleanup();\n      };\n      const handleDataPublish = (queue:[Array<*>, Array<*>]) => {\n        sendToPeer(new ObservedRemoveDump(queue));\n      };\n      const sendToPeer = (unpacked: any) => {\n        if (typeof peer === 'undefined') {\n          throw new Error('Peer does not exist');\n        }\n        if (!peer.connected) {\n          this.logger.warn(`Unable to send message to client ${clientId}, connection is closing`);\n          return;\n        }\n        peer.send(pack(unpacked));\n      };\n\n      const mergeChunkPromises = new Map();\n\n      const handleMultipartContainer = async (multipartContainer:MultipartContainer) => {\n        const existingMergeChunksPromise = mergeChunkPromises.get(multipartContainer.id);\n        if (typeof existingMergeChunksPromise !== 'undefined') {\n          existingMergeChunksPromise.push(multipartContainer);\n          return;\n        }\n        const mergeChunksPromise = MultipartContainer.getMergeChunksPromise(60000);\n        mergeChunksPromise.push(multipartContainer);\n        mergeChunkPromises.set(multipartContainer.id, mergeChunksPromise);\n        try {\n          const packed = await mergeChunksPromise;\n          handlePeerData(packed);\n        } catch (error) {\n          if (error.stack) {\n            this.logger.error('Unable to merge multipart message chunks:');\n            error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n          } else {\n            this.logger.error(`Unable to merge multipart message chunks: ${error.message}`);\n          }\n        } finally {\n          mergeChunkPromises.delete(multipartContainer.id);\n        }\n      };\n\n      const handlePeerData = (packed:Buffer) => {\n        const message = unpack(packed);\n        if (message instanceof Ping) {\n          sendToPeer(new Pong(message.timestamp, Date.now()));\n        } else if (message instanceof Pong) {\n          offset = (Date.now() - message.wallclock) - (performance.now() - message.timestamp) / 2;\n          this.sessionClientOffsetMap.set(clientId, offset);\n        } else if (message instanceof ObservedRemoveDump) {\n          this.data.process(message.queue);\n        } else if (message instanceof PeerEvent) {\n          this.emit(message.type, ...message.args);\n        } else if (message instanceof Close) {\n          this.logger.info(`Client ${clientId} closing with code ${message.code}: ${message.message}`);\n          this.peerMap.delete(clientId);\n          peerIsClosing = true;\n        } else if (message instanceof MultipartContainer) {\n          handleMultipartContainer(message);\n        }\n      };\n\n      this.addListener('sessionClientLeave', handleSessionClientLeave);\n      if (!this.isConnectedToClient(clientId)) {\n        await new Promise((resolve) => {\n          const handleConnect = ({ clientId: newClientId }) => {\n            if (newClientId !== clientId) {\n              return;\n            }\n            this.removeListener('connect', handleConnect);\n            abortSignal.removeEventListener('abort', handleAbort);\n            resolve();\n          };\n          const handleAbort = () => {\n            this.removeListener('connect', handleConnect);\n            abortSignal.removeEventListener('abort', handleAbort);\n            resolve();\n          };\n          this.addListener('connect', handleConnect);\n          abortSignal.addEventListener('abort', handleAbort);\n        });\n        if (abortSignal.aborted) {\n          return;\n        }\n      }\n      const peer = this.peerMap.get(clientId);\n      _peer = peer;\n      if (typeof peer === 'undefined') {\n        throw new Error('Peer does not exist');\n      }\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('data', handlePeerData);\n      interval = setInterval(() => {\n        peer.send(pack(new Ping(performance.now())));\n      }, 1000);\n      peer.send(pack(new Ping(performance.now())));\n      this.data.addListener('publish', handleDataPublish);\n      handleDataPublish(this.data.dump());\n    };\n\n    this.handleSocketJoin = (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (clientId === this.clientId) {\n        return;\n      }\n      if (this.peerDisconnectTimeoutMap.has(clientId)) {\n        this.logger.info(`Clearing client ${clientId} disconnect timeout after socket join`);\n        clearTimeout(this.peerDisconnectTimeoutMap.get(clientId));\n        this.peerDisconnectTimeoutMap.delete(clientId);\n      }\n      this.addToQueue(clientId, () => this.connectToPeer(socketData));\n    };\n\n\n    this.handleSocketLeave = (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (clientId === this.clientId) {\n        return;\n      }\n      clearTimeout(this.peerDisconnectTimeoutMap.get(clientId));\n      if (this.active) {\n        this.peerDisconnectTimeoutMap.set(clientId, setTimeout(() => {\n          this.peerDisconnectTimeoutMap.delete(clientId);\n          this.addToQueue(clientId, () => this.disconnectFromPeer(clientId));\n        }, 15000));\n      } else {\n        this.addToQueue(clientId, () => this.disconnectFromPeer(clientId));\n      }\n    };\n\n    this.handleSessionClientLeave = () => {\n      const sessionClientIds = this.sessionClientIds;\n      if (sessionClientIds.size > 1) {\n        return;\n      }\n      this.leaveSessionAfterLastClientTimeout = setTimeout(async () => {\n        try {\n          await this.leaveSession();\n        } catch (error) {\n          this.logger.error('Unable to leave session after timeout when last session closed');\n          this.logger.errorStack(error);\n        }\n      }, 5000);\n    };\n\n    this.handleSession = () => {\n      this.data.clear();\n      this.sessionClientOffsetMap.clear();\n    };\n\n    this.addListener('socketJoin', this.handleSocketJoin);\n    this.addListener('socketLeave', this.handleSocketLeave);\n    this.addListener('sessionClientJoin', this.handleSessionClientJoin);\n    this.addListener('sessionClientLeave', this.handleSessionClientLeave);\n    this.addListener('session', this.handleSession);\n\n    this.handleBraidSet = (key:string, values:Array<Connection>) => {\n      if (key !== name) {\n        return;\n      }\n      this.active = true;\n      const oldSessionId = this.sessionId;\n      const newSessionId = getSessionId(values, this.clientId);\n      const oldSocketMap = this.socketMap;\n      const newSocketMap = getSocketMap(values);\n      const oldUserIds = this.userIds;\n      const newUserIds = getPeerIds(values);\n      const oldSessionMap = this.sessionMap;\n      const newSessionMap = getSessionMap(newSocketMap);\n      const oldLocalSessionSocketMap = typeof oldSessionId === 'string' ? oldSessionMap.get(oldSessionId) || new Map() : new Map();\n      const newLocalSessionSocketMap = typeof newSessionId === 'string' ? newSessionMap.get(newSessionId) || new Map() : new Map();\n      this.sessionId = newSessionId;\n      this.userIds = newUserIds;\n      this.socketMap = newSocketMap;\n      this.sessionMap = newSessionMap;\n      if (newSessionId !== oldSessionId) {\n        this.emit('session', newSessionId);\n      }\n      for (const [socketHash, socketData] of oldSocketMap) {\n        if (!newSocketMap.has(socketHash)) {\n          this.emit('socketLeave', socketData);\n        }\n      }\n      for (const [socketHash, socketData] of newSocketMap) {\n        if (!oldSocketMap.has(socketHash)) {\n          this.emit('socketJoin', socketData);\n        }\n      }\n      for (const peerUserId of oldUserIds) {\n        if (!newUserIds.has(peerUserId)) {\n          this.emit('leave', peerUserId);\n        }\n      }\n      for (const peerUserId of newUserIds) {\n        if (!oldUserIds.has(peerUserId)) {\n          this.emit('join', peerUserId);\n        }\n      }\n      for (const [clientId, socketData] of oldLocalSessionSocketMap) {\n        if (clientId === this.clientId) {\n          continue;\n        }\n        if (!newLocalSessionSocketMap.has(clientId)) {\n          this.emit('sessionClientLeave', clientId, socketData);\n        }\n      }\n      for (const [clientId, socketData] of newLocalSessionSocketMap) {\n        if (clientId === this.clientId) {\n          continue;\n        }\n        if (!oldLocalSessionSocketMap.has(clientId)) {\n          this.emit('sessionClientJoin', clientId, socketData);\n        }\n      }\n      for (const [sessionId, oldSessionSocketMap] of oldSessionMap) {\n        const newSessionSocketMap = newSessionMap.get(sessionId);\n        if (typeof newSessionSocketMap === 'undefined') {\n          for (const socketData of oldSessionSocketMap.values()) {\n            this.emit('sessionLeave', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of oldSessionSocketMap) {\n            if (!newSessionSocketMap.has(socketHash)) {\n              this.emit('sessionLeave', socketData);\n            }\n          }\n        }\n      }\n      for (const [sessionId, newSessionSocketMap] of newSessionMap) {\n        const oldSessionSocketMap = oldSessionMap.get(sessionId);\n        if (typeof oldSessionSocketMap === 'undefined') {\n          for (const socketData of newSessionSocketMap.values()) {\n            this.emit('sessionJoin', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of newSessionSocketMap) {\n            if (!oldSessionSocketMap.has(socketHash)) {\n              this.emit('sessionJoin', socketData);\n            }\n          }\n        }\n      }\n    };\n    this.handleBraidClose = () => {\n      this.reset();\n    };\n    this.handleBraidCloseRequested = () => {\n      this.close();\n    };\n    this.handleBraidReconnect = (isReconnecting: boolean) => {\n      if (!isReconnecting) {\n        return;\n      }\n      const startedSessionId = this.startedSessionId;\n      const joinedSessionId = this.joinedSessionId;\n      const handleInitialized = () => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.info(`Restarting session ${startedSessionId}`);\n          this.startSession(startedSessionId).catch((error) => {\n            this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        if (typeof joinedSessionId === 'string') {\n          this.logger.info(`Rejoining session ${joinedSessionId}`);\n          this.joinSession(joinedSessionId).catch((error) => {\n            this.logger.error(`Unable to rejoin session ${joinedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleClose = () => {\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleError = (error:Error) => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n          this.logger.errorStack(error);\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      this.braidClient.addListener('initialized', handleInitialized);\n      this.braidClient.addListener('close', handleClose);\n      this.braidClient.addListener('error', handleError);\n    };\n    this.braidClient.data.addListener('set', this.handleBraidSet);\n    this.braidClient.addListener('close', this.handleBraidClose);\n    this.braidClient.addListener('closeRequested', this.handleBraidCloseRequested);\n    this.braidClient.addListener('reconnect', this.handleBraidReconnect);\n  }\n\n  get sessionClientMap():Map<number, Socket> {\n    const sessionId = this.sessionId;\n    if (typeof sessionId !== 'string') {\n      return new Map();\n    }\n    const sessionClientMap = this.sessionMap.get(sessionId);\n    if (typeof sessionClientMap === 'undefined') {\n      return new Map();\n    }\n    return sessionClientMap;\n  }\n\n  get sessionClientIds():Set<number> {\n    return new Set(this.sessionClientMap.keys());\n  }\n\n  async init() {\n    const promise = new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(new Error('Closed before initialization completed'));\n      };\n      const handleValue = (key:string, value:any) => {\n        if (key !== this.name) {\n          return;\n        }\n        if (typeof value === 'undefined') {\n          return;\n        }\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(error);\n      };\n      this.addListener('close', handleClose);\n      this.braidClient.data.addListener('set', handleValue);\n      this.braidClient.addListener('error', handleError);\n      handleValue(this.name, this.braidClient.data.get(this.name));\n    });\n    try {\n      await Promise.all([\n        this.braidClient.subscribe(this.name),\n        this.braidClient.addServerEventListener(this.name, this.handleMessage.bind(this)),\n      ]);\n      if (!this.active) {\n        return;\n      }\n      await promise;\n      if (!this.active) {\n        return;\n      }\n      await this.braidClient.startPublishing(this.publishName);\n    } catch (error) {\n      this.braidClient.logger.error(`Unable to join ${this.roomId}`);\n      throw error;\n    }\n  }\n\n  addToQueue(queueId:string | number, func:() => Promise<*>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      return queue.add(func);\n    }\n    const newQueue = new PQueue({ concurrency: 1 });\n    const promise = newQueue.add(func);\n    this.queueMap.set(queueId, newQueue);\n    newQueue.on('idle', () => {\n      this.queueMap.delete(queueId);\n    });\n    return promise;\n  }\n\n  async publish(type:string, value:Object, options?: { timeoutDuration?: number, CustomError?: Class<RequestError> } = {}):Promise<{ text:string, code:number }> {\n    await this._ready; // eslint-disable-line no-underscore-dangle\n    const timeoutDuration = typeof options.timeoutDuration === 'number' ? options.timeoutDuration : 5000;\n    const CustomError = typeof options.CustomError === 'function' ? options.CustomError : RequestError;\n    const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    return new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        reject(new ClientClosedError(`Client closed before ${type} request completed`));\n      };\n      const timeout = setTimeout(() => {\n        this.requestCallbackMap.delete(requestId);\n        this.removeListener('close', handleClose);\n        reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n      }, timeoutDuration);\n      const handleResponse = (success:boolean, code: number, text:string) => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        if (success) {\n          resolve({ code, text });\n          return;\n        }\n        reject(new CustomError(text, code));\n      };\n      this.addListener('close', handleClose);\n      this.requestCallbackMap.set(requestId, handleResponse);\n      this.braidClient.publish(this.publishName, { requestId, type, value });\n    });\n  }\n\n  isConnectedToClient(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return false;\n    }\n    return !!peer.connected;\n  }\n\n  async connectToPeer(socket:Socket) {\n    const { userId, serverId, socketId, clientId, socketHash } = socket;\n    const reconnectCount = this.peerReconnectMap.get(clientId) || 0;\n    const reconnectDelay = reconnectCount > 5 ? 30000 : 1000 * (reconnectCount * reconnectCount);\n    if (reconnectDelay > 0) {\n      this.logger.info(`Delaying connect by ${Math.round(reconnectDelay / 1000)} ${reconnectDelay === 1000 ? 'second' : 'seconds'} on attempt ${reconnectCount}`);\n      await new Promise((resolve) => {\n        const timeout = setTimeout(() => {\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        }, reconnectDelay);\n        const handleClose = () => {\n          clearTimeout(timeout);\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        };\n        const handleSocketLeave = ({ socketHash: oldSocketHash }:Socket) => {\n          if (socketHash !== oldSocketHash) {\n            return;\n          }\n          clearTimeout(timeout);\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        };\n        this.addListener('close', handleClose);\n        this.addListener('socketLeave', handleSocketLeave);\n      });\n      if (!this.socketMap.has(socketHash)) {\n        return;\n      }\n    }\n    const existingPeer = this.peerMap.get(clientId);\n    const options = Object.assign({}, { initiator: clientId > this.clientId }, this.peerOptions);\n    if (this.localConnectionsOnly) {\n      options.config = {\n        iceServers: [],\n      };\n    }\n    const peer = existingPeer || new SimplePeer(options);\n    this.peerMap.set(clientId, peer);\n    this.peerReconnectMap.set(clientId, reconnectCount + 1);\n    this.emit('peer', { clientId, peer });\n    const addPeerListeners = () => {\n      this.peerReconnectMap.set(clientId, 0);\n      const cleanup = () => {\n        peer.removeListener('signal', handleSignal);\n        peer.removeListener('stream', handleStream);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('peerReconnect', handlePeerReconnect);\n      };\n      const handleSignal = async (data:Object) => {\n        try {\n          await this.publish(SIGNAL, { serverId, socketId, data }, { CustomError: SignalError });\n        } catch (error) {\n          this.logger.error(`Unable to signal user ${userId} client ${clientId} closed`);\n          this.logger.errorStack(error);\n        }\n      };\n      const handleStream = (stream:MediaStream) => {\n        if (!this.sessionClientIds.has(clientId)) {\n          this.logger.error(`Received an unexpected stream from non-session user ${userId} client ${clientId}`);\n          stream.getTracks().forEach((track) => {\n            track.stop();\n            track.dispatchEvent(new Event('stop'));\n          });\n          return;\n        }\n        this.emit('stream', { stream, userId, serverId, socketId, clientId });\n      };\n      const handlePeerClose = () => {\n        this.logger.info(`Disconnected from user ${userId} client ${clientId}`);\n        cleanup();\n        this.emit('disconnect', { userId, serverId, socketId, clientId });\n        if (this.active && this.peerMap.has(clientId)) {\n          this.peerMap.delete(clientId);\n          this.connectToPeer(socket);\n          this.logger.warn(`Reconnecting to user ${userId} client ${clientId}`);\n        }\n      };\n      const handlePeerError = (error:Error) => {\n        this.logger.error(`Error in connection to user ${userId} client ${clientId}`);\n        this.logger.errorStack(error);\n        this.emit('peerError', { userId, serverId, socketId, clientId, error });\n      };\n      const handlePeerReconnect = () => {\n        this.logger.info(`Reconnected to user ${userId} client ${clientId}`);\n        cleanup();\n      };\n      peer.addListener('signal', handleSignal);\n      peer.addListener('stream', handleStream);\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('error', handlePeerError);\n      peer.addListener('peerReconnect', handlePeerReconnect);\n    };\n    if (peer.connected) {\n      peer.emit('peerReconnect');\n      addPeerListeners();\n      this.emit('connect', { userId, clientId, serverId, socketId, socketHash, peer });\n      return;\n    }\n    await new Promise((resolve) => {\n      const cleanup = () => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n      };\n      const timeout = setTimeout(() => {\n        cleanup();\n        resolve();\n      }, 5000);\n      const handleConnect = () => {\n        cleanup();\n        addPeerListeners();\n        this.emit('connect', { userId, clientId, serverId, socketId, socketHash, peer });\n        resolve();\n      };\n      const handleSignal = async (data:Object) => {\n        if (this.localConnectionsOnly) {\n          if (data.type === 'candidate') {\n            const { candidate: { candidate } } = data;\n            const addressParts = candidate.split(' ');\n            if (addressParts[4] !== '127.0.0.1' && addressParts[4] !== '::1') {\n              addressParts[4] = '127.0.0.1';\n              data.candidate.candidate = addressParts.join(' '); // eslint-disable-line no-param-reassign\n            }\n          } else if (data.type === 'answer' || data.type === 'offer') {\n            data.sdp = data.sdp.replace(/(a=candidate[^\\s]+?\\s[^\\s]+?\\s[^\\s]+?\\s[^\\s]+?\\s)([^\\s]+?\\s)(.*?\\r?\\n)/g, '$1127.0.0.1 $3'); // eslint-disable-line no-param-reassign\n          }\n        }\n        try {\n          await this.publish(SIGNAL, { serverId, socketId, data }, { CustomError: SignalError });\n        } catch (error) {\n          if (error instanceof SignalError && error.code === 404) {\n            this.logger.error(`Unable to signal user ${userId}, client ${clientId}, client does not exist`);\n            cleanup();\n            resolve();\n          } else {\n            this.logger.error(`Unable to signal user ${userId}, client ${clientId}`);\n            this.logger.errorStack(error);\n          }\n        }\n      };\n      const handleClose = () => {\n        cleanup();\n        resolve();\n      };\n      const handlePeerClose = () => {\n        this.logger.info(`Connection to user ${userId} client ${clientId} closed`);\n        cleanup();\n        if (this.peerMap.has(clientId)) {\n          this.peerMap.delete(clientId);\n          this.connectToPeer(socket);\n          this.logger.warn(`Reconnecting to user ${userId} client ${clientId}`);\n        }\n        resolve();\n      };\n      const handlePeerError = (error:Error) => {\n        cleanup();\n        this.logger.error(`Error connecting to ${userId}`);\n        this.logger.errorStack(error);\n        this.emit('peerError', { userId, serverId, socketId, clientId, error });\n        resolve();\n      };\n      const handleSocketLeave = ({ socketHash: oldSocketHash }:Socket) => {\n        if (socketHash !== oldSocketHash) {\n          return;\n        }\n        cleanup();\n        this.logger.warn(`Unable to connect to user ${userId} client ${clientId}, socket closed before connection was completed`);\n        resolve();\n      };\n      peer.addListener('error', handlePeerError);\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('connect', handleConnect);\n      peer.addListener('signal', handleSignal);\n      this.addListener('close', handleClose);\n      this.addListener('socketLeave', handleSocketLeave);\n      const signalQueue = this.signalQueueMap.get(clientId);\n      if (Array.isArray(signalQueue)) {\n        while (signalQueue.length > 0) {\n          const data = signalQueue.shift();\n          peer.signal(data);\n        }\n      }\n    });\n  }\n\n  async emitToPeer(clientId:number, type:string, ...args:Array<any>) {\n    const peer = await this.getConnectedPeer(clientId);\n    const message = pack(new PeerEvent(type, args));\n    if (message.length > 65536) {\n      const chunks = MultipartContainer.chunk(message, 65536);\n      for (const chunk of chunks) {\n        const ok = peer.write(chunk);\n        if (!ok) {\n          await new Promise((resolve) => {\n            peer.once('drain', () => {\n              resolve();\n            });\n          });\n        }\n      }\n    } else {\n      const ok = peer.write(message);\n      if (!ok) {\n        await new Promise((resolve) => {\n          peer.once('drain', () => {\n            resolve();\n          });\n        });\n      }\n    }\n  }\n\n  async addStream(clientId:number, stream:MediaStream) {\n    const peer = await this.getConnectedPeer(clientId);\n    const addTrackHandler = (event:Event) => {\n      if (event instanceof MediaStreamTrackEvent) {\n        peer.addTrack(event.track);\n      }\n    };\n    this.peerAddTrackHandlerMap.set(stream, addTrackHandler);\n    stream.addEventListener('addtrack', addTrackHandler);\n    peer.addStream(stream);\n  }\n\n  async removeStream(clientId:number, stream:MediaStream) {\n    const peer = await this.getConnectedPeer(clientId);\n    const addTrackHandler = this.peerAddTrackHandlerMap.get(stream);\n    if (typeof addTrackHandler === 'function') {\n      stream.removeEventListener('addtrack', addTrackHandler);\n    }\n    peer.removeStream(stream);\n  }\n\n  async disconnectFromPeer(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return;\n    }\n    this.peerMap.delete(clientId);\n    if (peer.connected) {\n      peer.send(pack(new Close(1000, 'Disconnect requested')));\n    }\n    peer.destroy();\n  }\n\n  async onIdle() {\n    while (this.queueMap.size > 0) {\n      for (const queue of this.queueMap.values()) {\n        await queue.onIdle();\n      }\n      // $FlowFixMe\n      await new Promise((resolve) => queueMicrotask(resolve));\n    }\n  }\n\n  didStartSession() {\n    if (!this.sessionId) {\n      return false;\n    }\n    return this.startedSessionId === this.sessionId;\n  }\n\n  async removeFromSession(clientId:number) {\n    const sessionId = this.sessionId;\n    if (sessionId === false) {\n      this.logger.warn(`Unable to remove client ${clientId} from session, not in a session`);\n      return;\n    }\n    const sessionClientMap = this.sessionClientMap;\n    const socket = sessionClientMap.get(clientId);\n    if (typeof socket === 'undefined') {\n      this.logger.warn(`Unable to remove client ${clientId}, client not in session ${sessionId}`);\n      return;\n    }\n    const { userId, socketId, serverId } = socket;\n    if (this.userId !== userId) {\n      this.preApprovedSessionUserIdSet.delete(userId);\n    }\n    await this.publish(REMOVE_FROM_SESSION, { userId, socketId, serverId }, { CustomError: RemoveFromSessionError });\n  }\n\n  async cancelInviteToSession(userId:string) {\n    const queue = this.queueMap.get(SESSION_QUEUE);\n    if (typeof queue !== 'undefined') {\n      await queue.onIdle();\n    }\n    const sessionId = this.sessionId; // eslint-disable-line no-undef\n    if (typeof sessionId === 'string') {\n      this.preApprovedSessionUserIdSet.delete(userId);\n      this.emit('cancelInvite', { sessionId, userId });\n      await this.publish(CANCEL_INVITE_TO_SESSION, { sessionId, userId }, { CustomError: CancelInviteToSessionError });\n    } else {\n      this.logger.warn(`Unable to cancel invite to user ${userId}, not in session`);\n    }\n  }\n\n  async inviteToSession(userId:string, options?:{ data?:Object, timeoutDuration?: number, sessionJoinHandler?: SessionJoinHandler } = {}) {\n    const { data, timeoutDuration = 30000, sessionJoinHandler } = options;\n    const queue = this.queueMap.get(SESSION_QUEUE);\n    if (typeof queue !== 'undefined') {\n      await queue.onIdle();\n    }\n    const hasSessionId = this.sessionId === 'string';\n    // $FlowFixMe\n    const sessionId = this.sessionId || globalThis.crypto.randomUUID(); // eslint-disable-line no-undef\n    let didCancel = false;\n    const handleCancelInviteBeforePublish = ({ sessionId: cancelledSessionId, userId: cancelledUserId }:{ sessionId:string, userId:string }) => {\n      if (cancelledSessionId !== sessionId) {\n        return;\n      }\n      if (cancelledUserId !== userId) {\n        return;\n      }\n      didCancel = true;\n    };\n    const leaveSession = async () => {\n      if (hasSessionId) {\n        return;\n      }\n      try {\n        await this.leaveSession();\n      } catch (error) {\n        this.logger.error('Unable to leave session');\n        this.logger.errorStack(error);\n      }\n    };\n    this.addListener('cancelInvite', handleCancelInviteBeforePublish);\n    try {\n      if (hasSessionId) {\n        this.preApprovedSessionUserIdSet.add(userId);\n        await this.publish(INVITE_TO_SESSION, { userId, sessionId, data }, { CustomError: InviteToSessionError });\n      } else {\n        await this.startSession(sessionId, sessionJoinHandler);\n        this.preApprovedSessionUserIdSet.add(userId);\n        await this.publish(INVITE_TO_SESSION, { userId, sessionId, data }, { CustomError: InviteToSessionError });\n      }\n    } catch (error) {\n      throw error;\n    } finally {\n      this.removeListener('cancelInvite', handleCancelInviteBeforePublish);\n    }\n    if (didCancel) {\n      await leaveSession();\n      throw new InvitationCancelledError(`Invitation to user ${userId} was cancelled`);\n    }\n    await new Promise((resolve, reject) => {\n      const cleanup = () => {\n        clearTimeout(timeout);\n        this.removeListener('sessionJoin', handleSessionJoin);\n        this.removeListener('close', handleClose);\n        this.removeListener('leave', handleLeave);\n        this.removeListener('session', handleSession);\n        this.removeListener('socketLeave', handleSocketLeave);\n        this.removeListener('cancelInvite', handleCancelInvite);\n        this.inviteDeclineHandlerMap.delete(`${userId}:${sessionId}`);\n      };\n      const timeout = setTimeout(async () => {\n        cleanup();\n        await leaveSession();\n        reject(new InvitationTimeoutError(`Invitation timed out after ${Math.round(timeoutDuration / 100) / 10} seconds`));\n      }, timeoutDuration);\n      const handleCancelInvite = async ({ sessionId: cancelledSessionId, userId: cancelledUserId }:{ sessionId:string, userId:string }) => {\n        if (cancelledSessionId !== sessionId) {\n          return;\n        }\n        if (cancelledUserId !== userId) {\n          return;\n        }\n        cleanup();\n        await leaveSession();\n        reject(new InvitationCancelledError(`Invitation to user ${userId} was cancelled`));\n      };\n      const handleSessionJoin = (socket: Socket) => {\n        if (socket.sessionId !== sessionId) {\n          return;\n        }\n        if (socket.userId !== userId) {\n          return;\n        }\n        cleanup();\n        resolve();\n      };\n      // Only listen for socket leave events if the user is inviting themselves\n      const handleSocketLeave = async (socket: Socket) => {\n        if (socket.userId !== this.userId) {\n          return;\n        }\n        let isOnlySocketForUserId = true;\n        for (const socketData of this.socketMap.values()) {\n          if (socketData.userId !== this.userId) {\n            continue;\n          }\n          if (socketData.clientId === this.clientId) {\n            continue;\n          }\n          isOnlySocketForUserId = false;\n        }\n        if (isOnlySocketForUserId) {\n          cleanup();\n          await leaveSession();\n          reject(new InvitedUserLeftError(`User ${userId} left before accepting the invitation`));\n        }\n      };\n      const handleSession = (newSessionId:string | false) => {\n        if (newSessionId === sessionId) {\n          return;\n        }\n        cleanup();\n        resolve();\n      };\n      const handleClose = () => {\n        cleanup();\n        reject(new ClientClosedError('Closed before invite'));\n      };\n      const handleDecline = async () => {\n        cleanup();\n        await leaveSession();\n        reject(new InvitationDeclinedError('Invitation declined'));\n      };\n      const handleLeave = async (peerUserId:string) => {\n        if (userId !== peerUserId) {\n          return;\n        }\n        cleanup();\n        await leaveSession();\n        reject(new InvitedUserLeftError(`User ${userId} left before accepting the invitation`));\n      };\n      this.inviteDeclineHandlerMap.set(`${userId}:${sessionId || ''}`, handleDecline);\n      this.addListener('sessionJoin', handleSessionJoin);\n      this.addListener('close', handleClose);\n      this.addListener('leave', handleLeave);\n      this.addListener('session', handleSession);\n      if (this.userId === userId) {\n        this.addListener('socketLeave', handleSocketLeave);\n      }\n      this.addListener('cancelInvite', handleCancelInvite);\n    });\n  }\n\n  async startSession(sessionId:string, sessionJoinHandler?: SessionJoinHandler) {\n    this.preApprovedSessionUserIdSet.clear();\n    const previousStartedSessionId = this.startedSessionId;\n    this.startedSessionId = sessionId;\n    try {\n      await this.addToQueue(SESSION_QUEUE, () => this.publish(START_SESSION, { sessionId }, { CustomError: StartSessionError }));\n    } catch (error) {\n      this.startedSessionId = previousStartedSessionId;\n      throw error;\n    }\n    delete this.joinedSessionId;\n    if (typeof sessionJoinHandler === 'function') {\n      const wrappedSessionJoinHandler = async (values) => {\n        if (this.preApprovedSessionUserIdSet.has(values.userId)) {\n          return [true, 200, 'Authorized'];\n        }\n        if (this.userId === values.userId) {\n          return [true, 200, 'Authorized'];\n        }\n        if (typeof sessionJoinHandler === 'function') {\n          return sessionJoinHandler(values);\n        }\n        return [true, 200, 'Authorized'];\n      };\n      this.sessionJoinHandlerMap.set(sessionId, wrappedSessionJoinHandler);\n    } else {\n      this.sessionJoinHandlerMap.set(sessionId, () => [true, 200, 'Authorized']);\n    }\n  }\n\n  didJoinSession() {\n    if (!this.sessionId) {\n      return false;\n    }\n    return this.joinedSessionId === this.sessionId;\n  }\n\n  async joinSession(sessionId:string, timeoutDuration?: number = 30000) {\n    const previousJoinedSessionId = this.joinedSessionId;\n    this.joinedSessionId = sessionId;\n    try {\n      await this.addToQueue(SESSION_QUEUE, () => this.publish(JOIN_SESSION, { sessionId, timeoutDuration }, { CustomError: JoinSessionError, timeoutDuration: timeoutDuration + 5000 }));\n    } catch (error) {\n      this.joinedSessionId = previousJoinedSessionId;\n      throw error;\n    }\n    const startedSessionId = this.startedSessionId;\n    delete this.startedSessionId;\n    if (typeof startedSessionId === 'string') {\n      this.sessionJoinHandlerMap.delete(startedSessionId);\n    }\n  }\n\n  async abortJoinSession() {\n    await this.publish(ABORT_SESSION_JOIN_REQUEST, { }, { CustomError: AbortSessionJoinError });\n  }\n\n  async leaveSession() {\n    try {\n      await this.addToQueue(SESSION_QUEUE, () => this.publish(LEAVE_SESSION, {}, { CustomError: LeaveSessionError }));\n      const startedSessionId = this.startedSessionId;\n      delete this.startedSessionId;\n      delete this.joinedSessionId;\n      if (typeof startedSessionId === 'string') {\n        this.sessionJoinHandlerMap.delete(startedSessionId);\n      }\n    } catch (error) {\n      if (error instanceof ClientClosedError) {\n        return;\n      }\n      throw error;\n    }\n  }\n\n  async handleMessage(message:{ requestId?: number, type:string, value:Object }) {\n    if (typeof message !== 'object') {\n      this.logger.error('Invalid message format');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    const { requestId, type, value } = message;\n    if (typeof type !== 'string') {\n      this.logger.error('Invalid message format, type property should be of type \"string\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (typeof value !== 'object') {\n      this.logger.error('Invalid message format, value property should be of type \"object\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (type === RESPONSE && typeof requestId === 'number') {\n      const callback = this.requestCallbackMap.get(requestId);\n      if (typeof callback !== 'function') {\n        this.logger.error(`Callback for request ${requestId} does not exist`);\n        return;\n      }\n      const { success, code, text } = value;\n      if (typeof success !== 'boolean') {\n        this.logger.error('Response message contained an invalid value success property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value success property');\n        return;\n      }\n      if (typeof code !== 'number') {\n        this.logger.error('Response message contained an invalid value code property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value code property');\n        return;\n      }\n      if (typeof text !== 'string') {\n        this.logger.error('Response message contained an invalid value text property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value text property');\n        return;\n      }\n      callback(success, code, text);\n      return;\n    }\n    switch (type) {\n      case SIGNAL:\n        try {\n          const {\n            clientId,\n            serverId,\n            socketId,\n            data,\n          } = value;\n          if (typeof serverId !== 'number') {\n            this.logger.error('Signal message contained an invalid server ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof socketId !== 'number') {\n            this.logger.error('Signal message contained an invalid socket ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof data !== 'object') {\n            this.logger.error('Signal message contained an invalid data property');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const peer = this.peerMap.get(clientId);\n          if (typeof peer === 'undefined') {\n            const signalQueue = this.signalQueueMap.get(clientId);\n            if (Array.isArray(signalQueue)) {\n              signalQueue.push(data);\n              return;\n            }\n            this.signalQueueMap.set(clientId, [data]);\n            return;\n          }\n          if (peer.destroyed || peer.destroying) {\n            return;\n          }\n          peer.signal(data);\n        } catch (error) {\n          this.logger.error('Unable to process signal message');\n          this.logger.errorStack(error);\n        }\n        break;\n      case DECLINE_INVITE_TO_SESSION:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Decline invite request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Decline invite request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const inviteDeclineHandler = this.inviteDeclineHandlerMap.get(requestHash);\n          if (typeof inviteDeclineHandler === 'function') {\n            inviteDeclineHandler();\n          }\n        } catch (error) {\n          this.logger.error('Unable to process decline invite request');\n          this.logger.errorStack(error);\n        }\n        break;\n      case ABORT_SESSION_JOIN_REQUEST:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Abort session join request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Abort session join request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const existing = this.sessionJoinRequestMap.get(requestHash);\n          if (!Array.isArray(existing)) {\n            this.logger.warn(`Unable to abort session join request for user ${userId} and session ${sessionId}, request does not exist`);\n            return;\n          }\n          this.logger.warn(`Aborting session join request for user ${userId} and session ${sessionId}`);\n          existing[1].abort();\n        } catch (error) {\n          this.logger.error('Unable to process session abort join request');\n          this.logger.errorStack(error);\n        }\n        break;\n      case SESSION_JOIN_REQUEST:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Session join request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Session join request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const existing = this.sessionJoinRequestMap.get(requestHash);\n          if (Array.isArray(existing)) {\n            this.logger.warn(`Session join request for user ${userId} and session ${sessionId} already exists`);\n            await existing[0];\n            return;\n          }\n          const sessionJoinHandler = this.sessionJoinHandlerMap.get(sessionId);\n          if (typeof sessionJoinHandler !== 'function') {\n            this.logger.error(`Handler for session ${sessionId} does not exist`);\n            return;\n          }\n          const abortController = new AbortController();\n          abortController.signal.addEventListener('abort', () => {\n            this.sessionJoinRequestMap.delete(requestHash);\n          });\n          const promise = (async () => {\n            let response = [false, 500, 'Error in sesssion join handler'];\n            try {\n              response = await sessionJoinHandler({ userId, sessionId, abortSignal: abortController.signal });\n            } catch (error) {\n              this.logger.error(`Unable to respond to session join request for user ${userId} and session ${sessionId}, error in session join handler`);\n              this.logger.errorStack(error);\n            }\n            if (abortController.signal.aborted) {\n              this.logger.warn(`Session join request for user ${userId} and session ${sessionId} was aborted`);\n              return;\n            }\n            try {\n              await this.publish(SESSION_JOIN_RESPONSE, {\n                userId,\n                sessionId,\n                success: response[0],\n                code: response[1],\n                text: response[2],\n              }, { CustomError: SessionJoinResponseError });\n            } catch (error) {\n              this.logger.error(`Unable to send session join response for user ${userId} and session ${sessionId}`);\n              this.logger.errorStack(error);\n            }\n            this.sessionJoinRequestMap.delete(requestHash);\n          })();\n          this.sessionJoinRequestMap.set(requestHash, [promise, abortController]);\n          await promise;\n        } catch (error) {\n          this.logger.error('Unable to process session join request');\n          this.logger.errorStack(error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown message type ${type}`);\n    }\n  }\n\n  async getConnectedPeer(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer !== 'undefined' && peer.connected) {\n      return peer;\n    }\n    return new Promise((resolve, reject) => {\n      let _peer; // eslint-disable-line no-underscore-dangle\n      const cleanup = () => {\n        this.removeListener('sessionClientLeave', handleSessionClientLeave);\n        this.removeListener('connect', handleConnect);\n        this.removeListener('peer', handlePeer);\n        if (typeof _peer !== 'undefined') {\n          _peer.removeListener('close', handlePeerClose);\n          _peer.removeListener('error', handlePeerError);\n        }\n      };\n      const handlePeerClose = () => {\n        cleanup();\n        reject(new Error(`Peer ${clientId} closed before connection was established`));\n      };\n      const handlePeerError = (error:Error) => {\n        cleanup();\n        reject(error);\n      };\n      const handlePeer = ({ clientId: newClientId, peer: _p }) => {\n        if (newClientId !== clientId) {\n          return;\n        }\n        _peer = _p;\n        _p.addListener('close', handlePeerClose);\n        _p.addListener('error', handlePeerError);\n      };\n      const handleConnect = ({ clientId: newClientId, peer: _p }) => {\n        if (newClientId !== clientId) {\n          return;\n        }\n        cleanup();\n        resolve(_p);\n      };\n      const handleSessionClientLeave = (oldClientId:number) => {\n        if (clientId !== oldClientId) {\n          return;\n        }\n        cleanup();\n        reject(new Error(`Client ${clientId} left before connection was established`));\n      };\n      this.addListener('sessionClientLeave', handleSessionClientLeave);\n      this.addListener('connect', handleConnect);\n      this.addListener('peer', handlePeer);\n    });\n  }\n\n  declineInviteToSession(data: Object) {\n    return this.publish(DECLINE_INVITE_TO_SESSION, data, { CustomError: DeclineInviteToSessionError });\n  }\n\n  reset() {\n    this.handleBraidSet(this.name, []);\n    clearTimeout(this.leaveSessionAfterLastClientTimeout);\n  }\n\n  async close() {\n    this.logger.info('Closing');\n    this.active = false;\n\n    this.reset();\n\n    for (const [clientId, timeout] of this.peerDisconnectTimeoutMap) {\n      clearTimeout(timeout);\n      this.addToQueue(clientId, () => this.disconnectFromPeer(clientId));\n    }\n    this.peerDisconnectTimeoutMap.clear();\n\n    this.emit('close');\n\n    try {\n      await this.onIdle();\n    } catch (error) {\n      this.logger.error('Error in queue during close');\n      this.logger.errorStack(error);\n    }\n\n    this.removeListener('socketJoin', this.handleSocketJoin);\n    this.removeListener('socketLeave', this.handleSocketLeave);\n    this.removeListener('sessionClientJoin', this.handleSessionClientJoin);\n    this.removeListener('sessionClientLeave', this.handleSessionClientLeave);\n    this.removeListener('session', this.handleSession);\n\n    this.braidClient.data.removeListener('set', this.handleBraidSet);\n    this.braidClient.removeListener('close', this.handleBraidClose);\n    this.braidClient.removeListener('closeRequested', this.handleBraidCloseRequested);\n    this.braidClient.removeListener('reconnect', this.handleBraidReconnect);\n    this.braidClient.stopPublishing(this.publishName);\n    this.braidClient.removeServerEventListener(this.name);\n    this.braidClient.unsubscribe(this.name);\n  }\n}\n\nconst publish = (braidClient:BraidClient, abortSignal: AbortSignal, roomId:string, type:string, value:Object, options?: { timeoutDuration?: number, CustomError?: Class<RequestError> } = {}) => {\n  const name = `signal/${roomId}`;\n  const publishName = `signal/${roomId}/${Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(36)}`;\n  const timeoutDuration = typeof options.timeoutDuration === 'number' ? options.timeoutDuration : 5000;\n  const CustomError = typeof options.CustomError === 'function' ? options.CustomError : RequestError;\n  const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n  return new Promise((resolve, reject) => {\n    const cleanup = () => {\n      clearTimeout(timeout);\n      abortSignal.removeEventListener('abort', handleAbort);\n      braidClient.removeServerEventListener(name);\n      braidClient.stopPublishing(publishName);\n    };\n    const handleAbort = () => {\n      cleanup();\n      reject(new AbortError(`Publish request aborted before ${type} request completed`));\n    };\n    const timeout = setTimeout(() => {\n      cleanup();\n      reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n    }, timeoutDuration);\n    const handleMessage = (message:{ requestId?: number, type:string, value:Object }) => {\n      if (typeof message !== 'object') {\n        return;\n      }\n      const { requestId: responseId, type: responseType, value: responseValue } = message;\n      if (responseType !== RESPONSE) {\n        return;\n      }\n      if (responseId !== requestId) {\n        return;\n      }\n      const { success, code, text } = responseValue;\n      cleanup();\n      if (success) {\n        resolve({ code, text });\n        return;\n      }\n      reject(new CustomError(text, code));\n    };\n    abortSignal.addEventListener('abort', handleAbort);\n    Promise.all([\n      braidClient.startPublishing(publishName),\n      braidClient.addServerEventListener(name, handleMessage),\n    ]).then(() => {\n      braidClient.publish(publishName, { requestId, type, value });\n    }).catch((error) => {\n      cleanup();\n      reject(error);\n    });\n  });\n};\n\nBond.declineInviteToSession = (braidClient: BraidClient, abortSignal:AbortSignal, data: { roomId: string }) => {\n  const { roomId } = data;\n  return publish(braidClient, abortSignal, roomId, DECLINE_INVITE_TO_SESSION, data, { CustomError: DeclineInviteToSessionError });\n};\n\nBond.getLocalRoomId = async (braidClient: BraidClient, _roomId:string | false, userId:string, abortSignal: AbortSignal, options?: Options = {}) => {\n  const bond = new Bond(braidClient, AUTOMATIC_DISCOVERY_ROOM_ID, userId, Object.assign({}, options, { localConnectionsOnly: true }));\n  let roomId = _roomId; // eslint-disable-line no-undef\n  const localKey = bond.clientId.toString(36);\n  const logger = options.logger || braidClient.logger;\n  const negotiatedRoomId = await new Promise((resolve, reject) => {\n    const handleSession = () => {\n      bond.data.set(localKey, roomId);\n    };\n    const handleConnect = ({ clientId, socketHash }:Socket) => {\n      const socket = bond.socketMap.get(socketHash);\n      if (typeof socket === 'undefined') {\n        return;\n      }\n      const { sessionId } = socket;\n      if (typeof sessionId !== 'string') {\n        return;\n      }\n      if (clientId > bond.clientId) {\n        bond.joinSession(sessionId).catch((error) => {\n          logger.error('Unable to join session during automatic linking');\n          logger.errorStack(error);\n        });\n      }\n    };\n    const handleSessionJoin = ({ clientId, sessionId }:Socket) => {\n      if (typeof sessionId === 'string' && bond.sessionId === sessionId) {\n        return;\n      }\n      if (!bond.peerMap.has(clientId)) {\n        return;\n      }\n      if (typeof sessionId !== 'string') {\n        return;\n      }\n      if (clientId > bond.clientId) {\n        bond.joinSession(sessionId).catch((error) => {\n          logger.error('Unable to join session during automatic linking');\n          logger.errorStack(error);\n        });\n      }\n    };\n    const handleSet = (key:string, remoteRoomId:string | false) => {\n      if (key === localKey) {\n        return;\n      }\n      const clientId = parseInt(key, 36);\n      if (!bond.peerMap.has(clientId)) {\n        return;\n      }\n      if (roomId === false && remoteRoomId === false && clientId < bond.clientId) {\n        roomId = globalThis.crypto.randomUUID(); // eslint-disable-line no-undef\n        bond.data.set(localKey, roomId);\n        return;\n      } else if (typeof roomId === 'string' && typeof remoteRoomId === 'string' && roomId !== remoteRoomId && clientId > bond.clientId) {\n        roomId = remoteRoomId;\n        bond.data.set(localKey, remoteRoomId);\n      } else if (roomId === false && typeof remoteRoomId === 'string') {\n        roomId = remoteRoomId;\n        bond.data.set(localKey, remoteRoomId);\n      } else if (typeof roomId !== 'string' || roomId !== remoteRoomId) {\n        return;\n      }\n      abortSignal.removeEventListener('abort', handleAbort);\n      bond.removeListener('close', handleClose);\n      bond.removeListener('connect', handleConnect);\n      bond.removeListener('sessionJoin', handleSessionJoin);\n      bond.removeListener('session', handleSession);\n      bond.data.removeListener('set', handleSet);\n      resolve(roomId);\n    };\n    const handleClose = () => {\n      abortSignal.removeEventListener('abort', handleAbort);\n      bond.removeListener('close', handleClose);\n      bond.removeListener('connect', handleConnect);\n      bond.removeListener('sessionJoin', handleSessionJoin);\n      bond.removeListener('session', handleSession);\n      bond.data.removeListener('set', handleSet);\n      reject(new ClientClosedError('Client closed before local room ID was discovered'));\n    };\n    const handleAbort = async () => {\n      abortSignal.removeEventListener('abort', handleAbort);\n      bond.removeListener('close', handleClose);\n      bond.removeListener('connect', handleConnect);\n      bond.removeListener('sessionJoin', handleSessionJoin);\n      bond.removeListener('session', handleSession);\n      bond.data.removeListener('set', handleSet);\n      try {\n        const queue = bond.queueMap.get(SESSION_QUEUE);\n        if (typeof queue !== 'undefined') {\n          await queue.onIdle();\n        }\n        await bond.close();\n      } catch (error) {\n        logger.error('Unable to close before throwing abort error');\n        logger.errorStack(error);\n      }\n      reject(new AbortError('Local room ID discovery aborted'));\n    };\n    abortSignal.addEventListener('abort', handleAbort);\n    bond.data.addListener('set', handleSet);\n    bond.addListener('close', handleClose);\n    bond.addListener('connect', handleConnect);\n    bond.addListener('sessionJoin', handleSessionJoin);\n    bond.addListener('session', handleSession);\n    bond.startSession(globalThis.crypto.randomUUID()); // eslint-disable-line no-undef\n  });\n  await bond.close();\n  return negotiatedRoomId;\n};\n\n"],"mappings":"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"}