{"version":3,"sources":["../../src/index.js"],"names":["getSocketMap","values","Map","map","x","socketHash","socketId","serverId","userId","clientId","sessionId","getSessionId","getPeerIds","Set","getSessionMap","socketMap","socket","sessionClientMap","get","set","Bond","braidClient","roomId","options","active","Math","floor","random","Number","MAX_SAFE_INTEGER","localConnectionsOnly","name","publishName","toString","logger","peerOptions","userIds","peerMap","peerReconnectMap","queueMap","sessionMap","inviteDeclineHandlerMap","requestCallbackMap","signalQueueMap","peerDisconnectTimeoutMap","sessionJoinHandlerMap","sessionJoinRequestMap","data","ObservedRemoveMap","bufferPublishing","sessionClientOffsetMap","preApprovedSessionUserIdSet","peerAddTrackHandlerMap","addListener","handleSessionClientJoin","bind","_ready","init","ready","joinSession","socketData","has","info","clearTimeout","delete","addToQueue","connectToPeer","setTimeout","disconnectFromPeer","sessionClientIds","size","leaveSessionAfterLastClientTimeout","leaveSession","error","errorStack","clear","handleBraidSet","key","oldSessionId","newSessionId","oldSocketMap","newSocketMap","oldUserIds","newUserIds","oldSessionMap","newSessionMap","oldLocalSessionSocketMap","newLocalSessionSocketMap","emit","peerUserId","oldSessionSocketMap","newSessionSocketMap","handleBraidClose","reset","handleBraidCloseRequested","close","handleBraidReconnect","isReconnecting","startedSessionId","joinedSessionId","handleInitialized","startSession","catch","removeListener","handleClose","handleError","keys","promise","Promise","resolve","reject","handleValue","Error","value","all","subscribe","addServerEventListener","handleMessage","startPublishing","queueId","func","queue","add","newQueue","PQueue","concurrency","on","type","timeoutDuration","CustomError","RequestError","requestId","timeout","ClientClosedError","RequestTimeoutError","handleResponse","success","code","text","publish","peer","connected","reconnectCount","reconnectDelay","round","handleSocketLeave","oldSocketHash","existingPeer","Object","assign","initiator","config","iceServers","SimplePeer","addPeerListeners","cleanup","handleSignal","handleStream","handlePeerError","handlePeerClose","handlePeerReconnect","SIGNAL","SignalError","stream","getTracks","forEach","track","stop","dispatchEvent","Event","warn","handleConnect","candidate","address","split","sdp","replace","signalQueue","Array","isArray","length","shift","signal","getConnectedPeer","addTrackHandler","event","MediaStreamTrackEvent","addTrack","addEventListener","addStream","removeEventListener","removeStream","destroy","onIdle","queueMicrotask","REMOVE_FROM_SESSION","RemoveFromSessionError","SESSION_QUEUE","CANCEL_INVITE_TO_SESSION","CancelInviteToSessionError","sessionJoinHandler","hasSessionId","globalThis","crypto","randomUUID","didCancel","handleCancelInviteBeforePublish","cancelledSessionId","cancelledUserId","INVITE_TO_SESSION","InviteToSessionError","InvitationCancelledError","handleSessionJoin","handleLeave","handleSession","handleCancelInvite","InvitationTimeoutError","isOnlySocketForUserId","InvitedUserLeftError","handleDecline","InvitationDeclinedError","previousStartedSessionId","START_SESSION","StartSessionError","wrappedSessionJoinHandler","previousJoinedSessionId","JOIN_SESSION","JoinSessionError","ABORT_SESSION_JOIN_REQUEST","AbortSessionJoinError","LEAVE_SESSION","LeaveSessionError","message","JSON","stringify","RESPONSE","callback","push","destroyed","destroying","DECLINE_INVITE_TO_SESSION","requestHash","inviteDeclineHandler","existing","abort","SESSION_JOIN_REQUEST","abortController","AbortController","response","abortSignal","aborted","SESSION_JOIN_RESPONSE","SessionJoinResponseError","_peer","handleSessionClientLeave","handlePeer","newClientId","_p","oldClientId","interval","offset","handlePeerData","handleDataPublish","clearInterval","sendToPeer","ObservedRemoveDump","unpacked","send","packed","Ping","Pong","timestamp","Date","now","wallclock","performance","process","isConnectedToClient","handleAbort","setInterval","dump","DeclineInviteToSessionError","stopPublishing","removeServerEventListener","unsubscribe","EventEmitter","AbortError","responseId","responseType","responseValue","then","declineInviteToSession","getLocalRoomId","_roomId","bond","AUTOMATIC_DISCOVERY_ROOM_ID","localKey","negotiatedRoomId","handleSet","remoteRoomId","parseInt"],"mappings":";;;;;;;AAEA;;AACA;;AAEA;;AACA;;AACA;;AAIA;;AAgBA;;AAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAAmD;AACtE,MAAI,OAAOA,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAO,IAAIC,GAAJ,EAAP;AACD;;AACD,SAAO,IAAIA,GAAJ,CAAQD,MAAM,CAACE,GAAP,CAAW,UAACC,CAAD,EAAO;AAC/B,QAAMC,UAAU,aAAMD,CAAC,CAAC,CAAD,CAAP,cAAcA,CAAC,CAAC,CAAD,CAAf,CAAhB;AACA,WAAO,CAACC,UAAD,EAAa;AAAEA,MAAAA,UAAU,EAAVA,UAAF;AAAcC,MAAAA,QAAQ,EAAEF,CAAC,CAAC,CAAD,CAAzB;AAA8BG,MAAAA,QAAQ,EAAEH,CAAC,CAAC,CAAD,CAAzC;AAA8CI,MAAAA,MAAM,EAAEJ,CAAC,CAAC,CAAD,CAAvD;AAA4DK,MAAAA,QAAQ,EAAEL,CAAC,CAAC,CAAD,CAAvE;AAA4EM,MAAAA,SAAS,EAAEN,CAAC,CAAC,CAAD;AAAxF,KAAb,CAAP;AACD,GAHc,CAAR,CAAP;AAID,CARD;;AAUA,IAAMO,YAAY,GAAG,SAAfA,YAAe,CAACV,MAAD,EAA4BQ,QAA5B,EAAiE;AACpF,MAAI,OAAOR,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAO,KAAP;AACD;;AAHmF,6CAIpEA,MAJoE;AAAA;;AAAA;AAIpF,wDAAwB;AAAA,UAAbG,CAAa;;AACtB,UAAIA,CAAC,CAAC,CAAD,CAAD,KAASK,QAAb,EAAuB;AACrB,eAAOL,CAAC,CAAC,CAAD,CAAD,IAAQ,KAAf;AACD;AACF;AARmF;AAAA;AAAA;AAAA;AAAA;;AASpF,SAAO,KAAP;AACD,CAVD;;AAYA,IAAMQ,UAAU,GAAG,SAAbA,UAAa,CAACX,MAAD,EAA2C;AAC5D,MAAI,OAAOA,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAO,IAAIY,GAAJ,EAAP;AACD;;AACD,SAAO,IAAIA,GAAJ,CAAQZ,MAAM,CAACE,GAAP,CAAW,UAACC,CAAD;AAAA,WAAOA,CAAC,CAAC,CAAD,CAAR;AAAA,GAAX,CAAR,CAAP;AACD,CALD;;AAOA,IAAMU,aAAa,GAAG,SAAhBA,aAAgB,CAACC,SAAD,EAA4E;AAChG,MAAMZ,GAAG,GAAG,IAAID,GAAJ,EAAZ;;AADgG,8CAE3Ea,SAAS,CAACd,MAAV,EAF2E;AAAA;;AAAA;AAEhG,2DAAyC;AAAA,UAA9Be,MAA8B;AACvC,UAAQP,QAAR,GAAgCO,MAAhC,CAAQP,QAAR;AAAA,UAAkBC,SAAlB,GAAgCM,MAAhC,CAAkBN,SAAlB;AACA,UAAMO,gBAAgB,GAAGd,GAAG,CAACe,GAAJ,CAAQR,SAAR,CAAzB;;AACA,UAAI,OAAOO,gBAAP,KAA4B,WAAhC,EAA6C;AAC3Cd,QAAAA,GAAG,CAACgB,GAAJ,CAAQT,SAAR,EAAmB,IAAIR,GAAJ,CAAQ,CAAC,CAACO,QAAD,EAAWO,MAAX,CAAD,CAAR,CAAnB;AACD,OAFD,MAEO;AACLC,QAAAA,gBAAgB,CAACE,GAAjB,CAAqBV,QAArB,EAA+BO,MAA/B;AACD;AACF;AAV+F;AAAA;AAAA;AAAA;AAAA;;AAWhG,SAAOb,GAAP;AACD,CAZD;;IAcaiB,I;;;;;AAyCX,gBAAYC,WAAZ,EAAsCC,MAAtC,EAAqDd,MAArD,EAA4F;AAAA;;AAAA,QAAxBe,OAAwB,uEAAJ,EAAI;;AAAA;;AAC1F;AACA,UAAKC,MAAL,GAAc,IAAd;AACA,UAAKf,QAAL,GAAgBgB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBC,MAAM,CAACC,gBAAlC,CAAhB;AACA,UAAKrB,MAAL,GAAcA,MAAd;AACA,UAAKc,MAAL,GAAcA,MAAd;AACA,UAAKZ,SAAL,GAAiB,KAAjB;AACA,UAAKoB,oBAAL,GAA4B,CAAC,CAACP,OAAO,CAACO,oBAAtC;AACA,QAAMC,IAAI,oBAAa,MAAKT,MAAlB,CAAV;AACA,UAAKS,IAAL,GAAYA,IAAZ;AACA,UAAKC,WAAL,oBAA6B,MAAKV,MAAlC,cAA4C,MAAKb,QAAL,CAAcwB,QAAd,CAAuB,EAAvB,CAA5C;AACA,UAAKZ,WAAL,GAAmBA,WAAnB;AACA,UAAKa,MAAL,GAAcX,OAAO,CAACW,MAAR,IAAkBb,WAAW,CAACa,MAA5C;AACA,UAAKC,WAAL,GAAmBZ,OAAO,CAACY,WAA3B;AACA,UAAKpB,SAAL,GAAiB,IAAIb,GAAJ,EAAjB;AACA,UAAKkC,OAAL,GAAe,IAAIvB,GAAJ,EAAf;AACA,UAAKwB,OAAL,GAAe,IAAInC,GAAJ,EAAf;AACA,UAAKoC,gBAAL,GAAwB,IAAIpC,GAAJ,EAAxB;AACA,UAAKqC,QAAL,GAAgB,IAAIrC,GAAJ,EAAhB;AACA,UAAKsC,UAAL,GAAkB,IAAItC,GAAJ,EAAlB;AACA,UAAKuC,uBAAL,GAA+B,IAAIvC,GAAJ,EAA/B;AACA,UAAKwC,kBAAL,GAA0B,IAAIxC,GAAJ,EAA1B;AACA,UAAKyC,cAAL,GAAsB,IAAIzC,GAAJ,EAAtB;AACA,UAAK0C,wBAAL,GAAgC,IAAI1C,GAAJ,EAAhC;AACA,UAAK2C,qBAAL,GAA6B,IAAI3C,GAAJ,EAA7B;AACA,UAAK4C,qBAAL,GAA6B,IAAI5C,GAAJ,EAA7B;AACA,UAAK6C,IAAL,GAAY,IAAIC,YAAJ,CAAsB,EAAtB,EAA0B;AAAEC,MAAAA,gBAAgB,EAAE;AAApB,KAA1B,CAAZ;AACA,UAAKC,sBAAL,GAA8B,IAAIhD,GAAJ,EAA9B;AACA,UAAKiD,2BAAL,GAAmC,IAAItC,GAAJ,EAAnC;AACA,UAAKuC,sBAAL,GAA8B,IAAIlD,GAAJ,EAA9B;;AACA,UAAKmD,WAAL,CAAiB,mBAAjB,EAAsC,MAAKC,uBAAL,CAA6BC,IAA7B,+BAAtC;;AACA,UAAKC,MAAL,GAAc,MAAKC,IAAL,EAAd,CA/B0F,CA+B/D;;AAC3B,QAAI,OAAOlC,OAAO,CAACb,SAAf,KAA6B,QAAjC,EAA2C;AACzC,YAAKgD,KAAL,GAAa,MAAKC,WAAL,CAAiBpC,OAAO,CAACb,SAAzB,CAAb;AACD,KAFD,MAEO;AACL,YAAKgD,KAAL,GAAa,MAAKF,MAAlB,CADK,CACqB;AAC3B;;AACD,UAAKH,WAAL,CAAiB,YAAjB,EAA+B,UAACO,UAAD,EAAuB;AACpD,UAAQnD,QAAR,GAAqBmD,UAArB,CAAQnD,QAAR;;AACA,UAAIA,QAAQ,KAAK,MAAKA,QAAtB,EAAgC;AAC9B;AACD;;AACD,UAAI,MAAKmC,wBAAL,CAA8BiB,GAA9B,CAAkCpD,QAAlC,CAAJ,EAAiD;AAC/C,cAAKyB,MAAL,CAAY4B,IAAZ,2BAAoCrD,QAApC;;AACAsD,QAAAA,YAAY,CAAC,MAAKnB,wBAAL,CAA8B1B,GAA9B,CAAkCT,QAAlC,CAAD,CAAZ;;AACA,cAAKmC,wBAAL,CAA8BoB,MAA9B,CAAqCvD,QAArC;AACD;;AACD,YAAKwD,UAAL,CAAgBxD,QAAhB,EAA0B;AAAA,eAAM,MAAKyD,aAAL,CAAmBN,UAAnB,CAAN;AAAA,OAA1B;AACD,KAXD;;AAYA,UAAKP,WAAL,CAAiB,aAAjB,EAAgC,UAACO,UAAD,EAAuB;AACrD,UAAQnD,QAAR,GAAqBmD,UAArB,CAAQnD,QAAR;;AACA,UAAIA,QAAQ,KAAK,MAAKA,QAAtB,EAAgC;AAC9B;AACD;;AACDsD,MAAAA,YAAY,CAAC,MAAKnB,wBAAL,CAA8B1B,GAA9B,CAAkCT,QAAlC,CAAD,CAAZ;;AACA,UAAI,MAAKe,MAAT,EAAiB;AACf,cAAKoB,wBAAL,CAA8BzB,GAA9B,CAAkCV,QAAlC,EAA4C0D,UAAU,CAAC,YAAM;AAC3D,gBAAKvB,wBAAL,CAA8BoB,MAA9B,CAAqCvD,QAArC;;AACA,gBAAKwD,UAAL,CAAgBxD,QAAhB,EAA0B;AAAA,mBAAM,MAAK2D,kBAAL,CAAwBR,UAAxB,CAAN;AAAA,WAA1B;AACD,SAHqD,EAGnD,KAHmD,CAAtD;AAID,OALD,MAKO;AACL,cAAKK,UAAL,CAAgBxD,QAAhB,EAA0B;AAAA,iBAAM,MAAK2D,kBAAL,CAAwBR,UAAxB,CAAN;AAAA,SAA1B;AACD;AACF,KAdD;;AAeA,UAAKP,WAAL,CAAiB,mBAAjB,EAAsC,YAAM;AAC1C,UAAMgB,gBAAgB,GAAG,MAAKA,gBAA9B;;AACA,UAAIA,gBAAgB,CAACC,IAAjB,GAAwB,CAA5B,EAA+B;AAC7B;AACD;;AACDP,MAAAA,YAAY,CAAC,MAAKQ,kCAAN,CAAZ;AACD,KAND;;AAOA,UAAKlB,WAAL,CAAiB,oBAAjB,iCAAuC,aAAY;AACjD,UAAMgB,gBAAgB,GAAG,MAAKA,gBAA9B;;AACA,UAAIA,gBAAgB,CAACC,IAAjB,GAAwB,CAA5B,EAA+B;AAC7B;AACD;;AACD,YAAKC,kCAAL,GAA0CJ,UAAU,iCAAC,aAAY;AAC/D,YAAI;AACF,gBAAM,MAAKK,YAAL,EAAN;AACD,SAFD,CAEE,OAAOC,KAAP,EAAc;AACd,gBAAKvC,MAAL,CAAYuC,KAAZ,CAAkB,gEAAlB;;AACA,gBAAKvC,MAAL,CAAYwC,UAAZ,CAAuBD,KAAvB;AACD;AACF,OAPmD,GAOjD,IAPiD,CAApD;AAQD,KAbD;;AAeA,UAAKpB,WAAL,CAAiB,SAAjB,EAA4B,YAAM;AAChC,YAAKN,IAAL,CAAU4B,KAAV;;AACA,YAAKzB,sBAAL,CAA4ByB,KAA5B;AACD,KAHD;;AAKA,UAAKC,cAAL,GAAsB,UAACC,GAAD,EAAa5E,MAAb,EAA0C;AAC9D,UAAI4E,GAAG,KAAK9C,IAAZ,EAAkB;AAChB;AACD;;AACD,YAAKP,MAAL,GAAc,IAAd;AACA,UAAMsD,YAAY,GAAG,MAAKpE,SAA1B;AACA,UAAMqE,YAAY,GAAGpE,YAAY,CAACV,MAAD,EAAS,MAAKQ,QAAd,CAAjC;AACA,UAAMuE,YAAY,GAAG,MAAKjE,SAA1B;AACA,UAAMkE,YAAY,GAAGjF,YAAY,CAACC,MAAD,CAAjC;AACA,UAAMiF,UAAU,GAAG,MAAK9C,OAAxB;AACA,UAAM+C,UAAU,GAAGvE,UAAU,CAACX,MAAD,CAA7B;AACA,UAAMmF,aAAa,GAAG,MAAK5C,UAA3B;AACA,UAAM6C,aAAa,GAAGvE,aAAa,CAACmE,YAAD,CAAnC;AACA,UAAMK,wBAAwB,GAAG,OAAOR,YAAP,KAAwB,QAAxB,GAAmCM,aAAa,CAAClE,GAAd,CAAkB4D,YAAlB,KAAmC,IAAI5E,GAAJ,EAAtE,GAAkF,IAAIA,GAAJ,EAAnH;AACA,UAAMqF,wBAAwB,GAAG,OAAOR,YAAP,KAAwB,QAAxB,GAAmCM,aAAa,CAACnE,GAAd,CAAkB6D,YAAlB,KAAmC,IAAI7E,GAAJ,EAAtE,GAAkF,IAAIA,GAAJ,EAAnH;AACA,YAAKQ,SAAL,GAAiBqE,YAAjB;AACA,YAAK3C,OAAL,GAAe+C,UAAf;AACA,YAAKpE,SAAL,GAAiBkE,YAAjB;AACA,YAAKzC,UAAL,GAAkB6C,aAAlB;;AACA,UAAIN,YAAY,KAAKD,YAArB,EAAmC;AACjC,cAAKU,IAAL,CAAU,SAAV,EAAqBT,YAArB;AACD;;AArB6D,kDAsBvBC,YAtBuB;AAAA;;AAAA;AAsB9D,+DAAqD;AAAA;AAAA,cAAzC3E,UAAyC;AAAA,cAA7BuD,UAA6B;;AACnD,cAAI,CAACqB,YAAY,CAACpB,GAAb,CAAiBxD,UAAjB,CAAL,EAAmC;AACjC,kBAAKmF,IAAL,CAAU,aAAV,EAAyB5B,UAAzB;AACD;AACF;AA1B6D;AAAA;AAAA;AAAA;AAAA;;AAAA,kDA2BvBqB,YA3BuB;AAAA;;AAAA;AA2B9D,+DAAqD;AAAA;AAAA,cAAzC5E,WAAyC;AAAA,cAA7BuD,WAA6B;;AACnD,cAAI,CAACoB,YAAY,CAACnB,GAAb,CAAiBxD,WAAjB,CAAL,EAAmC;AACjC,kBAAKmF,IAAL,CAAU,YAAV,EAAwB5B,WAAxB;AACD;AACF;AA/B6D;AAAA;AAAA;AAAA;AAAA;;AAAA,kDAgCrCsB,UAhCqC;AAAA;;AAAA;AAgC9D,+DAAqC;AAAA,cAA1BO,UAA0B;;AACnC,cAAI,CAACN,UAAU,CAACtB,GAAX,CAAe4B,UAAf,CAAL,EAAiC;AAC/B,kBAAKD,IAAL,CAAU,OAAV,EAAmBC,UAAnB;AACD;AACF;AApC6D;AAAA;AAAA;AAAA;AAAA;;AAAA,kDAqCrCN,UArCqC;AAAA;;AAAA;AAqC9D,+DAAqC;AAAA,cAA1BM,WAA0B;;AACnC,cAAI,CAACP,UAAU,CAACrB,GAAX,CAAe4B,WAAf,CAAL,EAAiC;AAC/B,kBAAKD,IAAL,CAAU,MAAV,EAAkBC,WAAlB;AACD;AACF;AAzC6D;AAAA;AAAA;AAAA;AAAA;;AAAA,kDA0CzBH,wBA1CyB;AAAA;;AAAA;AA0C9D,+DAA+D;AAAA;AAAA,cAAnD7E,QAAmD;AAAA,cAAzCmD,YAAyC;;AAC7D,cAAInD,QAAQ,KAAK,MAAKA,QAAtB,EAAgC;AAC9B;AACD;;AACD,cAAI,CAAC8E,wBAAwB,CAAC1B,GAAzB,CAA6BpD,QAA7B,CAAL,EAA6C;AAC3C,kBAAK+E,IAAL,CAAU,oBAAV,EAAgC/E,QAAhC,EAA0CmD,YAA1C;AACD;AACF;AAjD6D;AAAA;AAAA;AAAA;AAAA;;AAAA,kDAkDzB2B,wBAlDyB;AAAA;;AAAA;AAkD9D,+DAA+D;AAAA;AAAA,cAAnD9E,SAAmD;AAAA,cAAzCmD,YAAyC;;AAC7D,cAAInD,SAAQ,KAAK,MAAKA,QAAtB,EAAgC;AAC9B;AACD;;AACD,cAAI,CAAC6E,wBAAwB,CAACzB,GAAzB,CAA6BpD,SAA7B,CAAL,EAA6C;AAC3C,kBAAK+E,IAAL,CAAU,mBAAV,EAA+B/E,SAA/B,EAAyCmD,YAAzC;AACD;AACF;AAzD6D;AAAA;AAAA;AAAA;AAAA;;AAAA,kDA0DfwB,aA1De;AAAA;;AAAA;AA0D9D,+DAA8D;AAAA;AAAA,cAAlD1E,SAAkD;AAAA,cAAvCgF,mBAAuC;;AAC5D,cAAMC,mBAAmB,GAAGN,aAAa,CAACnE,GAAd,CAAkBR,SAAlB,CAA5B;;AACA,cAAI,OAAOiF,mBAAP,KAA+B,WAAnC,EAAgD;AAAA,yDACrBD,mBAAmB,CAACzF,MAApB,EADqB;AAAA;;AAAA;AAC9C,wEAAuD;AAAA,oBAA5C2D,YAA4C;;AACrD,sBAAK4B,IAAL,CAAU,cAAV,EAA0B5B,YAA1B;AACD;AAH6C;AAAA;AAAA;AAAA;AAAA;AAI/C,WAJD,MAIO;AAAA,yDACkC8B,mBADlC;AAAA;;AAAA;AACL,wEAA4D;AAAA;AAAA,oBAAhDrF,YAAgD;AAAA,oBAApCuD,YAAoC;;AAC1D,oBAAI,CAAC+B,mBAAmB,CAAC9B,GAApB,CAAwBxD,YAAxB,CAAL,EAA0C;AACxC,wBAAKmF,IAAL,CAAU,cAAV,EAA0B5B,YAA1B;AACD;AACF;AALI;AAAA;AAAA;AAAA;AAAA;AAMN;AACF;AAvE6D;AAAA;AAAA;AAAA;AAAA;;AAAA,mDAwEfyB,aAxEe;AAAA;;AAAA;AAwE9D,kEAA8D;AAAA;AAAA,cAAlD3E,UAAkD;AAAA,cAAvCiF,oBAAuC;;AAC5D,cAAMD,oBAAmB,GAAGN,aAAa,CAAClE,GAAd,CAAkBR,UAAlB,CAA5B;;AACA,cAAI,OAAOgF,oBAAP,KAA+B,WAAnC,EAAgD;AAAA,yDACrBC,oBAAmB,CAAC1F,MAApB,EADqB;AAAA;;AAAA;AAC9C,wEAAuD;AAAA,oBAA5C2D,YAA4C;;AACrD,sBAAK4B,IAAL,CAAU,aAAV,EAAyB5B,YAAzB;AACD;AAH6C;AAAA;AAAA;AAAA;AAAA;AAI/C,WAJD,MAIO;AAAA,yDACkC+B,oBADlC;AAAA;;AAAA;AACL,wEAA4D;AAAA;AAAA,oBAAhDtF,YAAgD;AAAA,oBAApCuD,YAAoC;;AAC1D,oBAAI,CAAC8B,oBAAmB,CAAC7B,GAApB,CAAwBxD,YAAxB,CAAL,EAA0C;AACxC,wBAAKmF,IAAL,CAAU,aAAV,EAAyB5B,YAAzB;AACD;AACF;AALI;AAAA;AAAA;AAAA;AAAA;AAMN;AACF;AArF6D;AAAA;AAAA;AAAA;AAAA;AAsF/D,KAtFD;;AAuFA,UAAKgC,gBAAL,GAAwB,YAAM;AAC5B,YAAKC,KAAL;AACD,KAFD;;AAGA,UAAKC,yBAAL,GAAiC,YAAM;AACrC,YAAKC,KAAL;AACD,KAFD;;AAGA,UAAKC,oBAAL,GAA4B,UAACC,cAAD,EAA6B;AACvD,UAAI,CAACA,cAAL,EAAqB;AACnB;AACD;;AACD,UAAMC,gBAAgB,GAAG,MAAKA,gBAA9B;AACA,UAAMC,eAAe,GAAG,MAAKA,eAA7B;;AACA,UAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9B,YAAI,OAAOF,gBAAP,KAA4B,QAAhC,EAA0C;AACxC,gBAAKhE,MAAL,CAAY4B,IAAZ,8BAAuCoC,gBAAvC;;AACA,gBAAKG,YAAL,CAAkBH,gBAAlB,EAAoCI,KAApC,CAA0C,UAAC7B,KAAD,EAAW;AACnD,kBAAKvC,MAAL,CAAYuC,KAAZ,qCAA+CyB,gBAA/C;;AACA,kBAAKhE,MAAL,CAAYwC,UAAZ,CAAuBD,KAAvB;AACD,WAHD;AAID;;AACD,YAAI,OAAO0B,eAAP,KAA2B,QAA/B,EAAyC;AACvC,gBAAKjE,MAAL,CAAY4B,IAAZ,6BAAsCqC,eAAtC;;AACA,gBAAKxC,WAAL,CAAiBwC,eAAjB,EAAkCG,KAAlC,CAAwC,UAAC7B,KAAD,EAAW;AACjD,kBAAKvC,MAAL,CAAYuC,KAAZ,oCAA8C0B,eAA9C;;AACA,kBAAKjE,MAAL,CAAYwC,UAAZ,CAAuBD,KAAvB;AACD,WAHD;AAID;;AACD,cAAKpD,WAAL,CAAiBkF,cAAjB,CAAgC,aAAhC,EAA+CH,iBAA/C;;AACA,cAAK/E,WAAL,CAAiBkF,cAAjB,CAAgC,OAAhC,EAAyCC,WAAzC;;AACA,cAAKnF,WAAL,CAAiBkF,cAAjB,CAAgC,OAAhC,EAAyCE,WAAzC;AACD,OAlBD;;AAmBA,UAAMD,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,cAAKnF,WAAL,CAAiBkF,cAAjB,CAAgC,aAAhC,EAA+CH,iBAA/C;;AACA,cAAK/E,WAAL,CAAiBkF,cAAjB,CAAgC,OAAhC,EAAyCC,WAAzC;;AACA,cAAKnF,WAAL,CAAiBkF,cAAjB,CAAgC,OAAhC,EAAyCE,WAAzC;AACD,OAJD;;AAKA,UAAMA,WAAW,GAAG,SAAdA,WAAc,CAAChC,KAAD,EAAiB;AACnC,YAAI,OAAOyB,gBAAP,KAA4B,QAAhC,EAA0C;AACxC,gBAAKhE,MAAL,CAAYuC,KAAZ,qCAA+CyB,gBAA/C;;AACA,gBAAKhE,MAAL,CAAYwC,UAAZ,CAAuBD,KAAvB;AACD;;AACD,cAAKpD,WAAL,CAAiBkF,cAAjB,CAAgC,aAAhC,EAA+CH,iBAA/C;;AACA,cAAK/E,WAAL,CAAiBkF,cAAjB,CAAgC,OAAhC,EAAyCC,WAAzC;;AACA,cAAKnF,WAAL,CAAiBkF,cAAjB,CAAgC,OAAhC,EAAyCE,WAAzC;AACD,OARD;;AASA,YAAKpF,WAAL,CAAiBgC,WAAjB,CAA6B,aAA7B,EAA4C+C,iBAA5C;;AACA,YAAK/E,WAAL,CAAiBgC,WAAjB,CAA6B,OAA7B,EAAsCmD,WAAtC;;AACA,YAAKnF,WAAL,CAAiBgC,WAAjB,CAA6B,OAA7B,EAAsCoD,WAAtC;AACD,KA1CD;;AA2CA,UAAKpF,WAAL,CAAiB0B,IAAjB,CAAsBM,WAAtB,CAAkC,KAAlC,EAAyC,MAAKuB,cAA9C;;AACA,UAAKvD,WAAL,CAAiBgC,WAAjB,CAA6B,OAA7B,EAAsC,MAAKuC,gBAA3C;;AACA,UAAKvE,WAAL,CAAiBgC,WAAjB,CAA6B,gBAA7B,EAA+C,MAAKyC,yBAApD;;AACA,UAAKzE,WAAL,CAAiBgC,WAAjB,CAA6B,WAA7B,EAA0C,MAAK2C,oBAA/C;;AAtO0F;AAuO3F;;;;SAED,eAA2C;AACzC,UAAMtF,SAAS,GAAG,KAAKA,SAAvB;;AACA,UAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjC,eAAO,IAAIR,GAAJ,EAAP;AACD;;AACD,UAAMe,gBAAgB,GAAG,KAAKuB,UAAL,CAAgBtB,GAAhB,CAAoBR,SAApB,CAAzB;;AACA,UAAI,OAAOO,gBAAP,KAA4B,WAAhC,EAA6C;AAC3C,eAAO,IAAIf,GAAJ,EAAP;AACD;;AACD,aAAOe,gBAAP;AACD;;;SAED,eAAmC;AACjC,aAAO,IAAIJ,GAAJ,CAAQ,KAAKI,gBAAL,CAAsByF,IAAtB,EAAR,CAAP;AACD;;;;oCAED,aAAa;AAAA;;AACX,YAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/C,cAAMN,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,YAAA,MAAI,CAACD,cAAL,CAAoB,OAApB,EAA6BC,WAA7B;;AACA,YAAA,MAAI,CAACnF,WAAL,CAAiB0B,IAAjB,CAAsBwD,cAAtB,CAAqC,KAArC,EAA4CQ,WAA5C;;AACA,YAAA,MAAI,CAAC1F,WAAL,CAAiBkF,cAAjB,CAAgC,OAAhC,EAAyCE,WAAzC;;AACAK,YAAAA,MAAM,CAAC,IAAIE,KAAJ,CAAU,wCAAV,CAAD,CAAN;AACD,WALD;;AAMA,cAAMD,WAAW,GAAG,SAAdA,WAAc,CAAClC,GAAD,EAAaoC,KAAb,EAA2B;AAC7C,gBAAIpC,GAAG,KAAK,MAAI,CAAC9C,IAAjB,EAAuB;AACrB;AACD;;AACD,gBAAI,OAAOkF,KAAP,KAAiB,WAArB,EAAkC;AAChC;AACD;;AACD,YAAA,MAAI,CAACV,cAAL,CAAoB,OAApB,EAA6BC,WAA7B;;AACA,YAAA,MAAI,CAACnF,WAAL,CAAiB0B,IAAjB,CAAsBwD,cAAtB,CAAqC,KAArC,EAA4CQ,WAA5C;;AACA,YAAA,MAAI,CAAC1F,WAAL,CAAiBkF,cAAjB,CAAgC,OAAhC,EAAyCE,WAAzC;;AACAI,YAAAA,OAAO;AACR,WAXD;;AAYA,cAAMJ,WAAW,GAAG,SAAdA,WAAc,CAAChC,KAAD,EAAiB;AACnC,YAAA,MAAI,CAAC8B,cAAL,CAAoB,OAApB,EAA6BC,WAA7B;;AACA,YAAA,MAAI,CAACnF,WAAL,CAAiB0B,IAAjB,CAAsBwD,cAAtB,CAAqC,KAArC,EAA4CQ,WAA5C;;AACA,YAAA,MAAI,CAAC1F,WAAL,CAAiBkF,cAAjB,CAAgC,OAAhC,EAAyCE,WAAzC;;AACAK,YAAAA,MAAM,CAACrC,KAAD,CAAN;AACD,WALD;;AAMA,UAAA,MAAI,CAACpB,WAAL,CAAiB,OAAjB,EAA0BmD,WAA1B;;AACA,UAAA,MAAI,CAACnF,WAAL,CAAiB0B,IAAjB,CAAsBM,WAAtB,CAAkC,KAAlC,EAAyC0D,WAAzC;;AACA,UAAA,MAAI,CAAC1F,WAAL,CAAiBgC,WAAjB,CAA6B,OAA7B,EAAsCoD,WAAtC;;AACAM,UAAAA,WAAW,CAAC,MAAI,CAAChF,IAAN,EAAY,MAAI,CAACV,WAAL,CAAiB0B,IAAjB,CAAsB7B,GAAtB,CAA0B,MAAI,CAACa,IAA/B,CAAZ,CAAX;AACD,SA7Be,CAAhB;;AA8BA,YAAI;AACF,gBAAM6E,OAAO,CAACM,GAAR,CAAY,CAChB,KAAK7F,WAAL,CAAiB8F,SAAjB,CAA2B,KAAKpF,IAAhC,CADgB,EAEhB,KAAKV,WAAL,CAAiB+F,sBAAjB,CAAwC,KAAKrF,IAA7C,EAAmD,KAAKsF,aAAL,CAAmB9D,IAAnB,CAAwB,IAAxB,CAAnD,CAFgB,CAAZ,CAAN;;AAIA,cAAI,CAAC,KAAK/B,MAAV,EAAkB;AAChB;AACD;;AACD,gBAAMmF,OAAN;;AACA,cAAI,CAAC,KAAKnF,MAAV,EAAkB;AAChB;AACD;;AACD,gBAAM,KAAKH,WAAL,CAAiBiG,eAAjB,CAAiC,KAAKtF,WAAtC,CAAN;AACD,SAbD,CAaE,OAAOyC,KAAP,EAAc;AACd,eAAKpD,WAAL,CAAiBa,MAAjB,CAAwBuC,KAAxB,0BAAgD,KAAKnD,MAArD;AACA,gBAAMmD,KAAN;AACD;AACF,O;;;;;;;;;;WAED,oBAAW8C,OAAX,EAAoCC,IAApC,EAA2D;AAAA;;AACzD,UAAMC,KAAK,GAAG,KAAKlF,QAAL,CAAcrB,GAAd,CAAkBqG,OAAlB,CAAd;;AACA,UAAI,OAAOE,KAAP,KAAiB,WAArB,EAAkC;AAChC,eAAOA,KAAK,CAACC,GAAN,CAAUF,IAAV,CAAP;AACD;;AACD,UAAMG,QAAQ,GAAG,IAAIC,eAAJ,CAAW;AAAEC,QAAAA,WAAW,EAAE;AAAf,OAAX,CAAjB;AACA,UAAMlB,OAAO,GAAGgB,QAAQ,CAACD,GAAT,CAAaF,IAAb,CAAhB;AACA,WAAKjF,QAAL,CAAcpB,GAAd,CAAkBoG,OAAlB,EAA2BI,QAA3B;AACAA,MAAAA,QAAQ,CAACG,EAAT,CAAY,MAAZ,EAAoB,YAAM;AACxB,QAAA,MAAI,CAACvF,QAAL,CAAcyB,MAAd,CAAqBuD,OAArB;AACD,OAFD;AAGA,aAAOZ,OAAP;AACD;;;;uCAED,WAAcoB,IAAd,EAA2Bd,KAA3B,EAA+J;AAAA;;AAAA,YAAtH1F,OAAsH,uEAA1C,EAA0C;AAC7J,cAAM,KAAKiC,MAAX,CAD6J,CAC1I;;AACnB,YAAMwE,eAAe,GAAG,OAAOzG,OAAO,CAACyG,eAAf,KAAmC,QAAnC,GAA8CzG,OAAO,CAACyG,eAAtD,GAAwE,IAAhG;AACA,YAAMC,WAAW,GAAG,OAAO1G,OAAO,CAAC0G,WAAf,KAA+B,UAA/B,GAA4C1G,OAAO,CAAC0G,WAApD,GAAkEC,oBAAtF;AACA,YAAMC,SAAS,GAAG1G,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBC,MAAM,CAACC,gBAAlC,CAAlB;AACA,eAAO,IAAI+E,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,cAAMN,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,YAAA,MAAI,CAAC9D,kBAAL,CAAwBsB,MAAxB,CAA+BmE,SAA/B;;AACApE,YAAAA,YAAY,CAACqE,OAAD,CAAZ;;AACA,YAAA,MAAI,CAAC7B,cAAL,CAAoB,OAApB,EAA6BC,WAA7B;;AACAM,YAAAA,MAAM,CAAC,IAAIuB,yBAAJ,gCAA8CN,IAA9C,wBAAD,CAAN;AACD,WALD;;AAMA,cAAMK,OAAO,GAAGjE,UAAU,CAAC,YAAM;AAC/B,YAAA,MAAI,CAACzB,kBAAL,CAAwBsB,MAAxB,CAA+BmE,SAA/B;;AACA,YAAA,MAAI,CAAC5B,cAAL,CAAoB,OAApB,EAA6BC,WAA7B;;AACAM,YAAAA,MAAM,CAAC,IAAIwB,2BAAJ,WAA2BP,IAA3B,wCAA6DC,eAA7D,QAAD,CAAN;AACD,WAJyB,EAIvBA,eAJuB,CAA1B;;AAKA,cAAMO,cAAc,GAAG,SAAjBA,cAAiB,CAACC,OAAD,EAAkBC,IAAlB,EAAgCC,IAAhC,EAAgD;AACrE,YAAA,MAAI,CAAChG,kBAAL,CAAwBsB,MAAxB,CAA+BmE,SAA/B;;AACApE,YAAAA,YAAY,CAACqE,OAAD,CAAZ;;AACA,YAAA,MAAI,CAAC7B,cAAL,CAAoB,OAApB,EAA6BC,WAA7B;;AACA,gBAAIgC,OAAJ,EAAa;AACX3B,cAAAA,OAAO,CAAC;AAAE4B,gBAAAA,IAAI,EAAJA,IAAF;AAAQC,gBAAAA,IAAI,EAAJA;AAAR,eAAD,CAAP;AACA;AACD;;AACD5B,YAAAA,MAAM,CAAC,IAAImB,WAAJ,CAAgBS,IAAhB,EAAsBD,IAAtB,CAAD,CAAN;AACD,WATD;;AAUA,UAAA,MAAI,CAACpF,WAAL,CAAiB,OAAjB,EAA0BmD,WAA1B;;AACA,UAAA,MAAI,CAAC9D,kBAAL,CAAwBvB,GAAxB,CAA4BgH,SAA5B,EAAuCI,cAAvC;;AACA,UAAA,MAAI,CAAClH,WAAL,CAAiBsH,OAAjB,CAAyB,MAAI,CAAC3G,WAA9B,EAA2C;AAAEmG,YAAAA,SAAS,EAATA,SAAF;AAAaJ,YAAAA,IAAI,EAAJA,IAAb;AAAmBd,YAAAA,KAAK,EAALA;AAAnB,WAA3C;AACD,SAzBM,CAAP;AA0BD,O;;;;;;;;;;WAED,6BAAoBxG,QAApB,EAAqC;AACnC,UAAMmI,IAAI,GAAG,KAAKvG,OAAL,CAAanB,GAAb,CAAiBT,QAAjB,CAAb;;AACA,UAAI,OAAOmI,IAAP,KAAgB,WAApB,EAAiC;AAC/B,eAAO,KAAP;AACD;;AACD,aAAO,CAAC,CAACA,IAAI,CAACC,SAAd;AACD;;;;6CAED,WAAoB7H,MAApB,EAAmC;AAAA;;AACjC,YAAQR,MAAR,GAA6DQ,MAA7D,CAAQR,MAAR;AAAA,YAAgBD,QAAhB,GAA6DS,MAA7D,CAAgBT,QAAhB;AAAA,YAA0BD,QAA1B,GAA6DU,MAA7D,CAA0BV,QAA1B;AAAA,YAAoCG,QAApC,GAA6DO,MAA7D,CAAoCP,QAApC;AAAA,YAA8CJ,UAA9C,GAA6DW,MAA7D,CAA8CX,UAA9C;AACA,YAAMyI,cAAc,GAAG,KAAKxG,gBAAL,CAAsBpB,GAAtB,CAA0BT,QAA1B,KAAuC,CAA9D;AACA,YAAMsI,cAAc,GAAGD,cAAc,GAAG,CAAjB,GAAqB,KAArB,GAA6B,QAAQA,cAAc,GAAGA,cAAzB,CAApD;;AACA,YAAIC,cAAc,GAAG,CAArB,EAAwB;AACtB,eAAK7G,MAAL,CAAY4B,IAAZ,+BAAwCrC,IAAI,CAACuH,KAAL,CAAWD,cAAc,GAAG,IAA5B,CAAxC,cAA6EA,cAAc,KAAK,IAAnB,GAA0B,QAA1B,GAAqC,SAAlH,yBAA0ID,cAA1I;AACA,gBAAM,IAAIlC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC7B,gBAAMuB,OAAO,GAAGjE,UAAU,CAAC,YAAM;AAC/B,cAAA,MAAI,CAACoC,cAAL,CAAoB,OAApB,EAA6BC,WAA7B;;AACA,cAAA,MAAI,CAACD,cAAL,CAAoB,aAApB,EAAmC0C,iBAAnC;;AACApC,cAAAA,OAAO;AACR,aAJyB,EAIvBkC,cAJuB,CAA1B;;AAKA,gBAAMvC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBzC,cAAAA,YAAY,CAACqE,OAAD,CAAZ;;AACA,cAAA,MAAI,CAAC7B,cAAL,CAAoB,OAApB,EAA6BC,WAA7B;;AACA,cAAA,MAAI,CAACD,cAAL,CAAoB,aAApB,EAAmC0C,iBAAnC;;AACApC,cAAAA,OAAO;AACR,aALD;;AAMA,gBAAMoC,iBAAiB,GAAG,SAApBA,iBAAoB,QAA0C;AAAA,kBAA3BC,aAA2B,SAAvC7I,UAAuC;;AAClE,kBAAIA,UAAU,KAAK6I,aAAnB,EAAkC;AAChC;AACD;;AACDnF,cAAAA,YAAY,CAACqE,OAAD,CAAZ;;AACA,cAAA,MAAI,CAAC7B,cAAL,CAAoB,OAApB,EAA6BC,WAA7B;;AACA,cAAA,MAAI,CAACD,cAAL,CAAoB,aAApB,EAAmC0C,iBAAnC;;AACApC,cAAAA,OAAO;AACR,aARD;;AASA,YAAA,MAAI,CAACxD,WAAL,CAAiB,OAAjB,EAA0BmD,WAA1B;;AACA,YAAA,MAAI,CAACnD,WAAL,CAAiB,aAAjB,EAAgC4F,iBAAhC;AACD,WAvBK,CAAN;;AAwBA,cAAI,CAAC,KAAKlI,SAAL,CAAe8C,GAAf,CAAmBxD,UAAnB,CAAL,EAAqC;AACnC;AACD;AACF;;AACD,YAAM8I,YAAY,GAAG,KAAK9G,OAAL,CAAanB,GAAb,CAAiBT,QAAjB,CAArB;AACA,YAAMc,OAAO,GAAG6H,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB;AAAEC,UAAAA,SAAS,EAAE7I,QAAQ,GAAG,KAAKA;AAA7B,SAAlB,EAA2D,KAAK0B,WAAhE,CAAhB;;AACA,YAAI,KAAKL,oBAAT,EAA+B;AAC7BP,UAAAA,OAAO,CAACgI,MAAR,GAAiB;AACfC,YAAAA,UAAU,EAAE;AADG,WAAjB;AAGD;;AACD,YAAMZ,IAAI,GAAGO,YAAY,IAAI,IAAIM,mBAAJ,CAAelI,OAAf,CAA7B;AACA,aAAKc,OAAL,CAAalB,GAAb,CAAiBV,QAAjB,EAA2BmI,IAA3B;AACA,aAAKtG,gBAAL,CAAsBnB,GAAtB,CAA0BV,QAA1B,EAAoCqI,cAAc,GAAG,CAArD;AACA,aAAKtD,IAAL,CAAU,MAAV,EAAkB;AAAE/E,UAAAA,QAAQ,EAARA,QAAF;AAAYmI,UAAAA,IAAI,EAAJA;AAAZ,SAAlB;;AACA,YAAMc,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7B,UAAA,MAAI,CAACpH,gBAAL,CAAsBnB,GAAtB,CAA0BV,QAA1B,EAAoC,CAApC;;AACA,cAAMkJ,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBf,YAAAA,IAAI,CAACrC,cAAL,CAAoB,QAApB,EAA8BqD,YAA9B;AACAhB,YAAAA,IAAI,CAACrC,cAAL,CAAoB,QAApB,EAA8BsD,YAA9B;AACAjB,YAAAA,IAAI,CAACrC,cAAL,CAAoB,OAApB,EAA6BuD,eAA7B;AACAlB,YAAAA,IAAI,CAACrC,cAAL,CAAoB,OAApB,EAA6BwD,eAA7B;AACAnB,YAAAA,IAAI,CAACrC,cAAL,CAAoB,eAApB,EAAqCyD,mBAArC;AACD,WAND;;AAOA,cAAMJ,YAAY;AAAA,0CAAG,WAAO7G,IAAP,EAAuB;AAC1C,kBAAI;AACF,sBAAM,MAAI,CAAC4F,OAAL,CAAasB,iBAAb,EAAqB;AAAE1J,kBAAAA,QAAQ,EAARA,QAAF;AAAYD,kBAAAA,QAAQ,EAARA,QAAZ;AAAsByC,kBAAAA,IAAI,EAAJA;AAAtB,iBAArB,EAAmD;AAAEkF,kBAAAA,WAAW,EAAEiC;AAAf,iBAAnD,CAAN;AACD,eAFD,CAEE,OAAOzF,KAAP,EAAc;AACd,gBAAA,MAAI,CAACvC,MAAL,CAAYuC,KAAZ,iCAA2CjE,MAA3C,qBAA4DC,QAA5D;;AACA,gBAAA,MAAI,CAACyB,MAAL,CAAYwC,UAAZ,CAAuBD,KAAvB;AACD;AACF,aAPiB;;AAAA,4BAAZmF,YAAY;AAAA;AAAA;AAAA,aAAlB;;AAQA,cAAMC,YAAY,GAAG,SAAfA,YAAe,CAACM,MAAD,EAAwB;AAC3C,gBAAI,CAAC,MAAI,CAAC9F,gBAAL,CAAsBR,GAAtB,CAA0BpD,QAA1B,CAAL,EAA0C;AACxC,cAAA,MAAI,CAACyB,MAAL,CAAYuC,KAAZ,+DAAyEjE,MAAzE,qBAA0FC,QAA1F;;AACA0J,cAAAA,MAAM,CAACC,SAAP,GAAmBC,OAAnB,CAA2B,UAACC,KAAD,EAAW;AACpCA,gBAAAA,KAAK,CAACC,IAAN;AACAD,gBAAAA,KAAK,CAACE,aAAN,CAAoB,IAAIC,KAAJ,CAAU,MAAV,CAApB;AACD,eAHD;AAIA;AACD;;AACD,YAAA,MAAI,CAACjF,IAAL,CAAU,QAAV,EAAoB;AAAE2E,cAAAA,MAAM,EAANA,MAAF;AAAU3J,cAAAA,MAAM,EAANA,MAAV;AAAkBD,cAAAA,QAAQ,EAARA,QAAlB;AAA4BD,cAAAA,QAAQ,EAARA,QAA5B;AAAsCG,cAAAA,QAAQ,EAARA;AAAtC,aAApB;AACD,WAVD;;AAWA,cAAMsJ,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,YAAA,MAAI,CAAC7H,MAAL,CAAY4B,IAAZ,kCAA2CtD,MAA3C,qBAA4DC,QAA5D;;AACAkJ,YAAAA,OAAO;;AACP,YAAA,MAAI,CAACnE,IAAL,CAAU,YAAV,EAAwB;AAAEhF,cAAAA,MAAM,EAANA,MAAF;AAAUD,cAAAA,QAAQ,EAARA,QAAV;AAAoBD,cAAAA,QAAQ,EAARA,QAApB;AAA8BG,cAAAA,QAAQ,EAARA;AAA9B,aAAxB;;AACA,gBAAI,MAAI,CAAC4B,OAAL,CAAawB,GAAb,CAAiBpD,QAAjB,CAAJ,EAAgC;AAC9B,cAAA,MAAI,CAAC4B,OAAL,CAAa2B,MAAb,CAAoBvD,QAApB;;AACA,cAAA,MAAI,CAACyD,aAAL,CAAmBlD,MAAnB;;AACA,cAAA,MAAI,CAACkB,MAAL,CAAYwI,IAAZ,gCAAyClK,MAAzC,qBAA0DC,QAA1D;AACD;AACF,WATD;;AAUA,cAAMqJ,eAAe,GAAG,SAAlBA,eAAkB,CAACrF,KAAD,EAAiB;AACvC,YAAA,MAAI,CAACvC,MAAL,CAAYuC,KAAZ,uCAAiDjE,MAAjD,qBAAkEC,QAAlE;;AACA,YAAA,MAAI,CAACyB,MAAL,CAAYwC,UAAZ,CAAuBD,KAAvB;;AACA,YAAA,MAAI,CAACe,IAAL,CAAU,WAAV,EAAuB;AAAEhF,cAAAA,MAAM,EAANA,MAAF;AAAUD,cAAAA,QAAQ,EAARA,QAAV;AAAoBD,cAAAA,QAAQ,EAARA,QAApB;AAA8BG,cAAAA,QAAQ,EAARA,QAA9B;AAAwCgE,cAAAA,KAAK,EAALA;AAAxC,aAAvB;AACD,WAJD;;AAKA,cAAMuF,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChC,YAAA,MAAI,CAAC9H,MAAL,CAAY4B,IAAZ,+BAAwCtD,MAAxC,qBAAyDC,QAAzD;;AACAkJ,YAAAA,OAAO;AACR,WAHD;;AAIAf,UAAAA,IAAI,CAACvF,WAAL,CAAiB,QAAjB,EAA2BuG,YAA3B;AACAhB,UAAAA,IAAI,CAACvF,WAAL,CAAiB,QAAjB,EAA2BwG,YAA3B;AACAjB,UAAAA,IAAI,CAACvF,WAAL,CAAiB,OAAjB,EAA0B0G,eAA1B;AACAnB,UAAAA,IAAI,CAACvF,WAAL,CAAiB,OAAjB,EAA0ByG,eAA1B;AACAlB,UAAAA,IAAI,CAACvF,WAAL,CAAiB,eAAjB,EAAkC2G,mBAAlC;AACD,SApDD;;AAqDA,YAAIpB,IAAI,CAACC,SAAT,EAAoB;AAClBD,UAAAA,IAAI,CAACpD,IAAL,CAAU,eAAV;AACAkE,UAAAA,gBAAgB;AAChB,eAAKlE,IAAL,CAAU,SAAV,EAAqB;AAAEhF,YAAAA,MAAM,EAANA,MAAF;AAAUC,YAAAA,QAAQ,EAARA,QAAV;AAAoBF,YAAAA,QAAQ,EAARA,QAApB;AAA8BD,YAAAA,QAAQ,EAARA,QAA9B;AAAwCD,YAAAA,UAAU,EAAVA,UAAxC;AAAoDuI,YAAAA,IAAI,EAAJA;AAApD,WAArB;AACA;AACD;;AACD,cAAM,IAAIhC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC7B,cAAM8C,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB5F,YAAAA,YAAY,CAACqE,OAAD,CAAZ;AACAQ,YAAAA,IAAI,CAACrC,cAAL,CAAoB,OAApB,EAA6BuD,eAA7B;AACAlB,YAAAA,IAAI,CAACrC,cAAL,CAAoB,OAApB,EAA6BwD,eAA7B;AACAnB,YAAAA,IAAI,CAACrC,cAAL,CAAoB,SAApB,EAA+BoE,aAA/B;AACA/B,YAAAA,IAAI,CAACrC,cAAL,CAAoB,QAApB,EAA8BqD,YAA9B;;AACA,YAAA,MAAI,CAACrD,cAAL,CAAoB,OAApB,EAA6BC,WAA7B;;AACA,YAAA,MAAI,CAACD,cAAL,CAAoB,aAApB,EAAmC0C,iBAAnC;AACD,WARD;;AASA,cAAMb,OAAO,GAAGjE,UAAU,CAAC,YAAM;AAC/BwF,YAAAA,OAAO;AACP9C,YAAAA,OAAO;AACR,WAHyB,EAGvB,IAHuB,CAA1B;;AAIA,cAAM8D,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1BhB,YAAAA,OAAO;AACPD,YAAAA,gBAAgB;;AAChB,YAAA,MAAI,CAAClE,IAAL,CAAU,SAAV,EAAqB;AAAEhF,cAAAA,MAAM,EAANA,MAAF;AAAUC,cAAAA,QAAQ,EAARA,QAAV;AAAoBF,cAAAA,QAAQ,EAARA,QAApB;AAA8BD,cAAAA,QAAQ,EAARA,QAA9B;AAAwCD,cAAAA,UAAU,EAAVA,UAAxC;AAAoDuI,cAAAA,IAAI,EAAJA;AAApD,aAArB;;AACA/B,YAAAA,OAAO;AACR,WALD;;AAMA,cAAM+C,YAAY;AAAA,0CAAG,WAAO7G,IAAP,EAAuB;AAC1C,kBAAI,MAAI,CAACjB,oBAAT,EAA+B;AAC7B,oBAAIiB,IAAI,CAACgF,IAAL,KAAc,WAAlB,EAA+B;AAC7B,sBAAqB6C,SAArB,GAAqC7H,IAArC,CAAQ6H,SAAR,CAAqBA,SAArB;AACA,sBAAMC,OAAO,GAAGD,SAAS,CAACE,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAhB;;AACA,sBAAID,OAAO,KAAK,WAAZ,IAA2BA,OAAO,KAAK,KAA3C,EAAkD;AAChD;AACD;AACF,iBAND,MAMO,IAAI9H,IAAI,CAACgF,IAAL,KAAc,QAAd,IAA0BhF,IAAI,CAACgF,IAAL,KAAc,OAA5C,EAAqD;AAC1DhF,kBAAAA,IAAI,CAACgI,GAAL,GAAWhI,IAAI,CAACgI,GAAL,CAASC,OAAT,CAAiB,+EAAjB,EAAkG,EAAlG,CAAX,CAD0D,CACwD;AACnH;AACF;;AACD,kBAAI;AACF,sBAAM,MAAI,CAACrC,OAAL,CAAasB,iBAAb,EAAqB;AAAE1J,kBAAAA,QAAQ,EAARA,QAAF;AAAYD,kBAAAA,QAAQ,EAARA,QAAZ;AAAsByC,kBAAAA,IAAI,EAAJA;AAAtB,iBAArB,EAAmD;AAAEkF,kBAAAA,WAAW,EAAEiC;AAAf,iBAAnD,CAAN;AACD,eAFD,CAEE,OAAOzF,KAAP,EAAc;AACd,oBAAIA,KAAK,YAAYyF,mBAAjB,IAAgCzF,KAAK,CAACgE,IAAN,KAAe,GAAnD,EAAwD;AACtD,kBAAA,MAAI,CAACvG,MAAL,CAAYuC,KAAZ,iCAA2CjE,MAA3C,sBAA6DC,QAA7D;;AACAkJ,kBAAAA,OAAO;AACP9C,kBAAAA,OAAO;AACR,iBAJD,MAIO;AACL,kBAAA,MAAI,CAAC3E,MAAL,CAAYuC,KAAZ,iCAA2CjE,MAA3C,sBAA6DC,QAA7D;;AACA,kBAAA,MAAI,CAACyB,MAAL,CAAYwC,UAAZ,CAAuBD,KAAvB;AACD;AACF;AACF,aAxBiB;;AAAA,4BAAZmF,YAAY;AAAA;AAAA;AAAA,aAAlB;;AAyBA,cAAMpD,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBmD,YAAAA,OAAO;AACP9C,YAAAA,OAAO;AACR,WAHD;;AAIA,cAAMkD,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,YAAA,MAAI,CAAC7H,MAAL,CAAY4B,IAAZ,8BAAuCtD,MAAvC,qBAAwDC,QAAxD;;AACAkJ,YAAAA,OAAO;;AACP,gBAAI,MAAI,CAACtH,OAAL,CAAawB,GAAb,CAAiBpD,QAAjB,CAAJ,EAAgC;AAC9B,cAAA,MAAI,CAAC4B,OAAL,CAAa2B,MAAb,CAAoBvD,QAApB;;AACA,cAAA,MAAI,CAACyD,aAAL,CAAmBlD,MAAnB;;AACA,cAAA,MAAI,CAACkB,MAAL,CAAYwI,IAAZ,gCAAyClK,MAAzC,qBAA0DC,QAA1D;AACD;;AACDoG,YAAAA,OAAO;AACR,WATD;;AAUA,cAAMiD,eAAe,GAAG,SAAlBA,eAAkB,CAACrF,KAAD,EAAiB;AACvCkF,YAAAA,OAAO;;AACP,YAAA,MAAI,CAACzH,MAAL,CAAYuC,KAAZ,+BAAyCjE,MAAzC;;AACA,YAAA,MAAI,CAAC0B,MAAL,CAAYwC,UAAZ,CAAuBD,KAAvB;;AACA,YAAA,MAAI,CAACe,IAAL,CAAU,WAAV,EAAuB;AAAEhF,cAAAA,MAAM,EAANA,MAAF;AAAUD,cAAAA,QAAQ,EAARA,QAAV;AAAoBD,cAAAA,QAAQ,EAARA,QAApB;AAA8BG,cAAAA,QAAQ,EAARA,QAA9B;AAAwCgE,cAAAA,KAAK,EAALA;AAAxC,aAAvB;;AACA,YAAA,MAAI,CAACe,IAAL,CAAU,OAAV,EAAmBf,KAAnB;;AACAoC,YAAAA,OAAO;AACR,WAPD;;AAQA,cAAMoC,iBAAiB,GAAG,SAApBA,iBAAoB,QAA0C;AAAA,gBAA3BC,aAA2B,SAAvC7I,UAAuC;;AAClE,gBAAIA,UAAU,KAAK6I,aAAnB,EAAkC;AAChC;AACD;;AACDS,YAAAA,OAAO;;AACP,YAAA,MAAI,CAACzH,MAAL,CAAYwI,IAAZ,qCAA8ClK,MAA9C,qBAA+DC,QAA/D;;AACAoG,YAAAA,OAAO;AACR,WAPD;;AAQA+B,UAAAA,IAAI,CAACvF,WAAL,CAAiB,OAAjB,EAA0ByG,eAA1B;AACAlB,UAAAA,IAAI,CAACvF,WAAL,CAAiB,OAAjB,EAA0B0G,eAA1B;AACAnB,UAAAA,IAAI,CAACvF,WAAL,CAAiB,SAAjB,EAA4BsH,aAA5B;AACA/B,UAAAA,IAAI,CAACvF,WAAL,CAAiB,QAAjB,EAA2BuG,YAA3B;;AACA,UAAA,MAAI,CAACvG,WAAL,CAAiB,OAAjB,EAA0BmD,WAA1B;;AACA,UAAA,MAAI,CAACnD,WAAL,CAAiB,aAAjB,EAAgC4F,iBAAhC;;AACA,cAAMgC,WAAW,GAAG,MAAI,CAACtI,cAAL,CAAoBzB,GAApB,CAAwBT,QAAxB,CAApB;;AACA,cAAIyK,KAAK,CAACC,OAAN,CAAcF,WAAd,CAAJ,EAAgC;AAC9B,mBAAOA,WAAW,CAACG,MAAZ,GAAqB,CAA5B,EAA+B;AAC7B,kBAAMrI,IAAI,GAAGkI,WAAW,CAACI,KAAZ,EAAb;AACAzC,cAAAA,IAAI,CAAC0C,MAAL,CAAYvI,IAAZ;AACD;AACF;AACF,SAxFK,CAAN;AAyFD,O;;;;;;;;;;;yCAED,WAAgBtC,QAAhB,EAAiC0J,MAAjC,EAAqD;AACnD,YAAMvB,IAAI,SAAS,KAAK2C,gBAAL,CAAsB9K,QAAtB,CAAnB;;AACA,YAAM+K,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAiB;AACvC,cAAIA,KAAK,YAAYC,qBAArB,EAA4C;AAC1C9C,YAAAA,IAAI,CAAC+C,QAAL,CAAcF,KAAK,CAACnB,KAApB;AACD;AACF,SAJD;;AAKA,aAAKlH,sBAAL,CAA4BjC,GAA5B,CAAgCgJ,MAAhC,EAAwCqB,eAAxC;AACArB,QAAAA,MAAM,CAACyB,gBAAP,CAAwB,UAAxB,EAAoCJ,eAApC;AACA5C,QAAAA,IAAI,CAACiD,SAAL,CAAe1B,MAAf;AACD,O;;;;;;;;;;;4CAED,WAAmB1J,QAAnB,EAAoC0J,MAApC,EAAwD;AACtD,YAAMvB,IAAI,SAAS,KAAK2C,gBAAL,CAAsB9K,QAAtB,CAAnB;AACA,YAAM+K,eAAe,GAAG,KAAKpI,sBAAL,CAA4BlC,GAA5B,CAAgCiJ,MAAhC,CAAxB;;AACA,YAAI,OAAOqB,eAAP,KAA2B,UAA/B,EAA2C;AACzCrB,UAAAA,MAAM,CAAC2B,mBAAP,CAA2B,UAA3B,EAAuCN,eAAvC;AACD;;AACD5C,QAAAA,IAAI,CAACmD,YAAL,CAAkB5B,MAAlB;AACD,O;;;;;;;;;;;kDAED,kBAA8C;AAAA,YAAnB1J,QAAmB,SAAnBA,QAAmB;AAC5C,YAAMmI,IAAI,GAAG,KAAKvG,OAAL,CAAanB,GAAb,CAAiBT,QAAjB,CAAb;;AACA,YAAI,OAAOmI,IAAP,KAAgB,WAApB,EAAiC;AAC/B;AACD;;AACD,aAAKvG,OAAL,CAAa2B,MAAb,CAAoBvD,QAApB;AACAmI,QAAAA,IAAI,CAACoD,OAAL;AACD,O;;;;;;;;;;;sCAED,aAAe;AACb,eAAO,KAAKzJ,QAAL,CAAc+B,IAAd,GAAqB,CAA5B,EAA+B;AAAA,uDACT,KAAK/B,QAAL,CAActC,MAAd,EADS;AAAA;;AAAA;AAC7B,sEAA4C;AAAA,kBAAjCwH,KAAiC;AAC1C,oBAAMA,KAAK,CAACwE,MAAN,EAAN;AACD,aAH4B,CAI7B;;AAJ6B;AAAA;AAAA;AAAA;AAAA;;AAK7B,gBAAM,IAAIrF,OAAJ,CAAY,UAACC,OAAD;AAAA,mBAAaqF,cAAc,CAACrF,OAAD,CAA3B;AAAA,WAAZ,CAAN;AACD;AACF,O;;;;;;;;;;WAED,2BAAkB;AAChB,UAAI,CAAC,KAAKnG,SAAV,EAAqB;AACnB,eAAO,KAAP;AACD;;AACD,aAAO,KAAKwF,gBAAL,KAA0B,KAAKxF,SAAtC;AACD;;;;iDAED,WAAwBD,QAAxB,EAAyC;AACvC,YAAMC,SAAS,GAAG,KAAKA,SAAvB;;AACA,YAAIA,SAAS,KAAK,KAAlB,EAAyB;AACvB,eAAKwB,MAAL,CAAYwI,IAAZ,mCAA4CjK,QAA5C;AACA;AACD;;AACD,YAAMQ,gBAAgB,GAAG,KAAKA,gBAA9B;AACA,YAAMD,MAAM,GAAGC,gBAAgB,CAACC,GAAjB,CAAqBT,QAArB,CAAf;;AACA,YAAI,OAAOO,MAAP,KAAkB,WAAtB,EAAmC;AACjC,eAAKkB,MAAL,CAAYwI,IAAZ,mCAA4CjK,QAA5C,qCAA+EC,SAA/E;AACA;AACD;;AACD,YAAQF,MAAR,GAAuCQ,MAAvC,CAAQR,MAAR;AAAA,YAAgBF,QAAhB,GAAuCU,MAAvC,CAAgBV,QAAhB;AAAA,YAA0BC,QAA1B,GAAuCS,MAAvC,CAA0BT,QAA1B;;AACA,YAAI,KAAKC,MAAL,KAAgBA,MAApB,EAA4B;AAC1B,eAAK2C,2BAAL,CAAiCa,MAAjC,CAAwCxD,MAAxC;AACD;;AACD,cAAM,KAAKmI,OAAL,CAAawD,8BAAb,EAAkC;AAAE3L,UAAAA,MAAM,EAANA,MAAF;AAAUF,UAAAA,QAAQ,EAARA,QAAV;AAAoBC,UAAAA,QAAQ,EAARA;AAApB,SAAlC,EAAkE;AAAE0H,UAAAA,WAAW,EAAEmE;AAAf,SAAlE,CAAN;AACD,O;;;;;;;;;;;qDAED,WAA4B5L,MAA5B,EAA2C;AACzC,YAAMiH,KAAK,GAAG,KAAKlF,QAAL,CAAcrB,GAAd,CAAkBmL,wBAAlB,CAAd;;AACA,YAAI,OAAO5E,KAAP,KAAiB,WAArB,EAAkC;AAChC,gBAAMA,KAAK,CAACwE,MAAN,EAAN;AACD;;AACD,YAAMvL,SAAS,GAAG,KAAKA,SAAvB,CALyC,CAKP;;AAClC,YAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjC,eAAKyC,2BAAL,CAAiCa,MAAjC,CAAwCxD,MAAxC;AACA,eAAKgF,IAAL,CAAU,cAAV,EAA0B;AAAE9E,YAAAA,SAAS,EAATA,SAAF;AAAaF,YAAAA,MAAM,EAANA;AAAb,WAA1B;AACA,gBAAM,KAAKmI,OAAL,CAAa2D,mCAAb,EAAuC;AAAE5L,YAAAA,SAAS,EAATA,SAAF;AAAaF,YAAAA,MAAM,EAANA;AAAb,WAAvC,EAA8D;AAAEyH,YAAAA,WAAW,EAAEsE;AAAf,WAA9D,CAAN;AACD,SAJD,MAIO;AACL,eAAKrK,MAAL,CAAYwI,IAAZ,2CAAoDlK,MAApD;AACD;AACF,O;;;;;;;;;;;+CAED,WAAsBA,MAAtB,EAAwI;AAAA;;AAAA,YAAnGe,OAAmG,uEAAJ,EAAI;AACtI,YAAQwB,IAAR,GAA8DxB,OAA9D,CAAQwB,IAAR;AAAA,oCAA8DxB,OAA9D,CAAcyG,eAAd;AAAA,YAAcA,eAAd,sCAAgC,KAAhC;AAAA,YAAuCwE,kBAAvC,GAA8DjL,OAA9D,CAAuCiL,kBAAvC;AACA,YAAM/E,KAAK,GAAG,KAAKlF,QAAL,CAAcrB,GAAd,CAAkBmL,wBAAlB,CAAd;;AACA,YAAI,OAAO5E,KAAP,KAAiB,WAArB,EAAkC;AAChC,gBAAMA,KAAK,CAACwE,MAAN,EAAN;AACD;;AACD,YAAMQ,YAAY,GAAG,KAAK/L,SAAL,KAAmB,QAAxC,CANsI,CAOtI;;AACA,YAAMA,SAAS,GAAG,KAAKA,SAAL,IAAkBgM,UAAU,CAACC,MAAX,CAAkBC,UAAlB,EAApC,CARsI,CAQlE;;AACpE,YAAIC,SAAS,GAAG,KAAhB;;AACA,YAAMC,+BAA+B,GAAG,SAAlCA,+BAAkC,QAAoG;AAAA,cAAtFC,kBAAsF,SAAjGrM,SAAiG;AAAA,cAA1DsM,eAA0D,SAAlExM,MAAkE;;AAC1I,cAAIuM,kBAAkB,KAAKrM,SAA3B,EAAsC;AACpC;AACD;;AACD,cAAIsM,eAAe,KAAKxM,MAAxB,EAAgC;AAC9B;AACD;;AACDqM,UAAAA,SAAS,GAAG,IAAZ;AACD,SARD;;AASA,YAAMrI,YAAY;AAAA,wCAAG,aAAY;AAC/B,gBAAIiI,YAAJ,EAAkB;AAChB;AACD;;AACD,gBAAI;AACF,oBAAM,MAAI,CAACjI,YAAL,EAAN;AACD,aAFD,CAEE,OAAOC,KAAP,EAAc;AACd,cAAA,MAAI,CAACvC,MAAL,CAAYuC,KAAZ,CAAkB,yBAAlB;;AACA,cAAA,MAAI,CAACvC,MAAL,CAAYwC,UAAZ,CAAuBD,KAAvB;AACD;AACF,WAViB;;AAAA,0BAAZD,YAAY;AAAA;AAAA;AAAA,WAAlB;;AAWA,aAAKnB,WAAL,CAAiB,cAAjB,EAAiCyJ,+BAAjC;;AACA,YAAI;AACF,cAAIL,YAAJ,EAAkB;AAChB,iBAAKtJ,2BAAL,CAAiCuE,GAAjC,CAAqClH,MAArC;AACA,kBAAM,KAAKmI,OAAL,CAAasE,4BAAb,EAAgC;AAAEzM,cAAAA,MAAM,EAANA,MAAF;AAAUE,cAAAA,SAAS,EAATA,SAAV;AAAqBqC,cAAAA,IAAI,EAAJA;AAArB,aAAhC,EAA6D;AAAEkF,cAAAA,WAAW,EAAEiF;AAAf,aAA7D,CAAN;AACD,WAHD,MAGO;AACL,kBAAM,KAAK7G,YAAL,CAAkB3F,SAAlB,EAA6B8L,kBAA7B,CAAN;AACA,iBAAKrJ,2BAAL,CAAiCuE,GAAjC,CAAqClH,MAArC;AACA,kBAAM,KAAKmI,OAAL,CAAasE,4BAAb,EAAgC;AAAEzM,cAAAA,MAAM,EAANA,MAAF;AAAUE,cAAAA,SAAS,EAATA,SAAV;AAAqBqC,cAAAA,IAAI,EAAJA;AAArB,aAAhC,EAA6D;AAAEkF,cAAAA,WAAW,EAAEiF;AAAf,aAA7D,CAAN;AACD;AACF,SATD,CASE,OAAOzI,KAAP,EAAc;AACd,gBAAMA,KAAN;AACD,SAXD,SAWU;AACR,eAAK8B,cAAL,CAAoB,cAApB,EAAoCuG,+BAApC;AACD;;AACD,YAAID,SAAJ,EAAe;AACb,gBAAMrI,YAAY,EAAlB;AACA,gBAAM,IAAI2I,gCAAJ,8BAAmD3M,MAAnD,oBAAN;AACD;;AACD,cAAM,IAAIoG,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrC,cAAM6C,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB5F,YAAAA,YAAY,CAACqE,OAAD,CAAZ;;AACA,YAAA,MAAI,CAAC7B,cAAL,CAAoB,aAApB,EAAmC6G,iBAAnC;;AACA,YAAA,MAAI,CAAC7G,cAAL,CAAoB,OAApB,EAA6BC,WAA7B;;AACA,YAAA,MAAI,CAACD,cAAL,CAAoB,OAApB,EAA6B8G,WAA7B;;AACA,YAAA,MAAI,CAAC9G,cAAL,CAAoB,SAApB,EAA+B+G,aAA/B;;AACA,YAAA,MAAI,CAAC/G,cAAL,CAAoB,aAApB,EAAmC0C,iBAAnC;;AACA,YAAA,MAAI,CAAC1C,cAAL,CAAoB,cAApB,EAAoCgH,kBAApC;;AACA,YAAA,MAAI,CAAC9K,uBAAL,CAA6BuB,MAA7B,WAAuCxD,MAAvC,cAAiDE,SAAjD;AACD,WATD;;AAUA,cAAM0H,OAAO,GAAGjE,UAAU,iCAAC,aAAY;AACrCwF,YAAAA,OAAO;AACP,kBAAMnF,YAAY,EAAlB;AACAsC,YAAAA,MAAM,CAAC,IAAI0G,8BAAJ,sCAAyD/L,IAAI,CAACuH,KAAL,CAAWhB,eAAe,GAAG,GAA7B,IAAoC,EAA7F,cAAD,CAAN;AACD,WAJyB,GAIvBA,eAJuB,CAA1B;;AAKA,cAAMuF,kBAAkB;AAAA,2CAAG,mBAA0G;AAAA,kBAAtFR,kBAAsF,UAAjGrM,SAAiG;AAAA,kBAA1DsM,eAA0D,UAAlExM,MAAkE;;AACnI,kBAAIuM,kBAAkB,KAAKrM,SAA3B,EAAsC;AACpC;AACD;;AACD,kBAAIsM,eAAe,KAAKxM,MAAxB,EAAgC;AAC9B;AACD;;AACDmJ,cAAAA,OAAO;AACP,oBAAMnF,YAAY,EAAlB;AACAsC,cAAAA,MAAM,CAAC,IAAIqG,gCAAJ,8BAAmD3M,MAAnD,oBAAD,CAAN;AACD,aAVuB;;AAAA,4BAAlB+M,kBAAkB;AAAA;AAAA;AAAA,aAAxB;;AAWA,cAAMH,iBAAiB,GAAG,SAApBA,iBAAoB,CAACpM,MAAD,EAAoB;AAC5C,gBAAIA,MAAM,CAACN,SAAP,KAAqBA,SAAzB,EAAoC;AAClC;AACD;;AACD,gBAAIM,MAAM,CAACR,MAAP,KAAkBA,MAAtB,EAA8B;AAC5B;AACD;;AACDmJ,YAAAA,OAAO;AACP9C,YAAAA,OAAO;AACR,WATD,CA3BqC,CAqCrC;;;AACA,cAAMoC,iBAAiB;AAAA,2CAAG,WAAOjI,MAAP,EAA0B;AAClD,kBAAIA,MAAM,CAACR,MAAP,KAAkB,MAAI,CAACA,MAA3B,EAAmC;AACjC;AACD;;AACD,kBAAIiN,qBAAqB,GAAG,IAA5B;;AAJkD,2DAKzB,MAAI,CAAC1M,SAAL,CAAed,MAAf,EALyB;AAAA;;AAAA;AAKlD,0EAAkD;AAAA,sBAAvC2D,UAAuC;;AAChD,sBAAIA,UAAU,CAACpD,MAAX,KAAsB,MAAI,CAACA,MAA/B,EAAuC;AACrC;AACD;;AACD,sBAAIoD,UAAU,CAACnD,QAAX,KAAwB,MAAI,CAACA,QAAjC,EAA2C;AACzC;AACD;;AACDgN,kBAAAA,qBAAqB,GAAG,KAAxB;AACD;AAbiD;AAAA;AAAA;AAAA;AAAA;;AAclD,kBAAIA,qBAAJ,EAA2B;AACzB9D,gBAAAA,OAAO;AACP,sBAAMnF,YAAY,EAAlB;AACAsC,gBAAAA,MAAM,CAAC,IAAI4G,4BAAJ,gBAAiClN,MAAjC,2CAAD,CAAN;AACD;AACF,aAnBsB;;AAAA,4BAAjByI,iBAAiB;AAAA;AAAA;AAAA,aAAvB;;AAoBA,cAAMqE,aAAa,GAAG,SAAhBA,aAAgB,CAACvI,YAAD,EAAiC;AACrD,gBAAIA,YAAY,KAAKrE,SAArB,EAAgC;AAC9B;AACD;;AACDiJ,YAAAA,OAAO;AACP9C,YAAAA,OAAO;AACR,WAND;;AAOA,cAAML,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBmD,YAAAA,OAAO;AACP7C,YAAAA,MAAM,CAAC,IAAIuB,yBAAJ,CAAsB,sBAAtB,CAAD,CAAN;AACD,WAHD;;AAIA,cAAMsF,aAAa;AAAA,2CAAG,aAAY;AAChChE,cAAAA,OAAO;AACP,oBAAMnF,YAAY,EAAlB;AACAsC,cAAAA,MAAM,CAAC,IAAI8G,+BAAJ,CAA4B,qBAA5B,CAAD,CAAN;AACD,aAJkB;;AAAA,4BAAbD,aAAa;AAAA;AAAA;AAAA,aAAnB;;AAKA,cAAMN,WAAW;AAAA,2CAAG,WAAO5H,UAAP,EAA6B;AAC/C,kBAAIjF,MAAM,KAAKiF,UAAf,EAA2B;AACzB;AACD;;AACDkE,cAAAA,OAAO;AACP,oBAAMnF,YAAY,EAAlB;AACAsC,cAAAA,MAAM,CAAC,IAAI4G,4BAAJ,gBAAiClN,MAAjC,2CAAD,CAAN;AACD,aAPgB;;AAAA,4BAAX6M,WAAW;AAAA;AAAA;AAAA,aAAjB;;AAQA,UAAA,MAAI,CAAC5K,uBAAL,CAA6BtB,GAA7B,WAAoCX,MAApC,cAA8CE,SAAS,IAAI,EAA3D,GAAiEiN,aAAjE;;AACA,UAAA,MAAI,CAACtK,WAAL,CAAiB,aAAjB,EAAgC+J,iBAAhC;;AACA,UAAA,MAAI,CAAC/J,WAAL,CAAiB,OAAjB,EAA0BmD,WAA1B;;AACA,UAAA,MAAI,CAACnD,WAAL,CAAiB,OAAjB,EAA0BgK,WAA1B;;AACA,UAAA,MAAI,CAAChK,WAAL,CAAiB,SAAjB,EAA4BiK,aAA5B;;AACA,cAAI,MAAI,CAAC9M,MAAL,KAAgBA,MAApB,EAA4B;AAC1B,YAAA,MAAI,CAAC6C,WAAL,CAAiB,aAAjB,EAAgC4F,iBAAhC;AACD;;AACD,UAAA,MAAI,CAAC5F,WAAL,CAAiB,cAAjB,EAAiCkK,kBAAjC;AACD,SA3FK,CAAN;AA4FD,O;;;;;;;;;;;4CAED,WAAmB7M,SAAnB,EAAqC8L,kBAArC,EAA8E;AAAA;;AAC5E,aAAKrJ,2BAAL,CAAiCwB,KAAjC;AACA,YAAMkJ,wBAAwB,GAAG,KAAK3H,gBAAtC;AACA,aAAKA,gBAAL,GAAwBxF,SAAxB;;AACA,YAAI;AACF,gBAAM,KAAKuD,UAAL,CAAgBoI,wBAAhB,EAA+B;AAAA,mBAAM,MAAI,CAAC1D,OAAL,CAAamF,wBAAb,EAA4B;AAAEpN,cAAAA,SAAS,EAATA;AAAF,aAA5B,EAA2C;AAAEuH,cAAAA,WAAW,EAAE8F;AAAf,aAA3C,CAAN;AAAA,WAA/B,CAAN;AACD,SAFD,CAEE,OAAOtJ,KAAP,EAAc;AACd,eAAKyB,gBAAL,GAAwB2H,wBAAxB;AACA,gBAAMpJ,KAAN;AACD;;AACD,eAAO,KAAK0B,eAAZ;;AACA,YAAI,OAAOqG,kBAAP,KAA8B,UAAlC,EAA8C;AAC5C,cAAMwB,yBAAyB;AAAA,2CAAG,WAAO/N,MAAP,EAAkB;AAClD,kBAAI,MAAI,CAACkD,2BAAL,CAAiCU,GAAjC,CAAqC5D,MAAM,CAACO,MAA5C,CAAJ,EAAyD;AACvD,uBAAO,CAAC,IAAD,EAAO,GAAP,EAAY,YAAZ,CAAP;AACD;;AACD,kBAAI,MAAI,CAACA,MAAL,KAAgBP,MAAM,CAACO,MAA3B,EAAmC;AACjC,uBAAO,CAAC,IAAD,EAAO,GAAP,EAAY,YAAZ,CAAP;AACD;;AACD,kBAAI,OAAOgM,kBAAP,KAA8B,UAAlC,EAA8C;AAC5C,uBAAOA,kBAAkB,CAACvM,MAAD,CAAzB;AACD;;AACD,qBAAO,CAAC,IAAD,EAAO,GAAP,EAAY,YAAZ,CAAP;AACD,aAX8B;;AAAA,4BAAzB+N,yBAAyB;AAAA;AAAA;AAAA,aAA/B;;AAYA,eAAKnL,qBAAL,CAA2B1B,GAA3B,CAA+BT,SAA/B,EAA0CsN,yBAA1C;AACD,SAdD,MAcO;AACL,eAAKnL,qBAAL,CAA2B1B,GAA3B,CAA+BT,SAA/B,EAA0C;AAAA,mBAAM,CAAC,IAAD,EAAO,GAAP,EAAY,YAAZ,CAAN;AAAA,WAA1C;AACD;AACF,O;;;;;;;;;;WAED,0BAAiB;AACf,UAAI,CAAC,KAAKA,SAAV,EAAqB;AACnB,eAAO,KAAP;AACD;;AACD,aAAO,KAAKyF,eAAL,KAAyB,KAAKzF,SAArC;AACD;;;;2CAED,WAAkBA,SAAlB,EAAsE;AAAA;;AAAA,YAAlCsH,eAAkC,uEAAP,KAAO;AACpE,YAAMiG,uBAAuB,GAAG,KAAK9H,eAArC;AACA,aAAKA,eAAL,GAAuBzF,SAAvB;;AACA,YAAI;AACF,gBAAM,KAAKuD,UAAL,CAAgBoI,wBAAhB,EAA+B;AAAA,mBAAM,MAAI,CAAC1D,OAAL,CAAauF,uBAAb,EAA2B;AAAExN,cAAAA,SAAS,EAATA,SAAF;AAAasH,cAAAA,eAAe,EAAfA;AAAb,aAA3B,EAA2D;AAAEC,cAAAA,WAAW,EAAEkG,wBAAf;AAAiCnG,cAAAA,eAAe,EAAEA,eAAe,GAAG;AAApE,aAA3D,CAAN;AAAA,WAA/B,CAAN;AACD,SAFD,CAEE,OAAOvD,KAAP,EAAc;AACd,eAAK0B,eAAL,GAAuB8H,uBAAvB;AACA,gBAAMxJ,KAAN;AACD;;AACD,YAAMyB,gBAAgB,GAAG,KAAKA,gBAA9B;AACA,eAAO,KAAKA,gBAAZ;;AACA,YAAI,OAAOA,gBAAP,KAA4B,QAAhC,EAA0C;AACxC,eAAKrD,qBAAL,CAA2BmB,MAA3B,CAAkCkC,gBAAlC;AACD;AACF,O;;;;;;;;;;;gDAED,aAAyB;AACvB,cAAM,KAAKyC,OAAL,CAAayF,qCAAb,EAAyC,EAAzC,EAA8C;AAAEnG,UAAAA,WAAW,EAAEoG;AAAf,SAA9C,CAAN;AACD,O;;;;;;;;;;;4CAED,aAAqB;AAAA;;AACnB,YAAI;AACF,gBAAM,KAAKpK,UAAL,CAAgBoI,wBAAhB,EAA+B;AAAA,mBAAM,MAAI,CAAC1D,OAAL,CAAa2F,wBAAb,EAA4B,EAA5B,EAAgC;AAAErG,cAAAA,WAAW,EAAEsG;AAAf,aAAhC,CAAN;AAAA,WAA/B,CAAN;AACA,cAAMrI,gBAAgB,GAAG,KAAKA,gBAA9B;AACA,iBAAO,KAAKA,gBAAZ;AACA,iBAAO,KAAKC,eAAZ;;AACA,cAAI,OAAOD,gBAAP,KAA4B,QAAhC,EAA0C;AACxC,iBAAKrD,qBAAL,CAA2BmB,MAA3B,CAAkCkC,gBAAlC;AACD;AACF,SARD,CAQE,OAAOzB,KAAP,EAAc;AACd,cAAIA,KAAK,YAAY4D,yBAArB,EAAwC;AACtC;AACD;;AACD,gBAAM5D,KAAN;AACD;AACF,O;;;;;;;;;;;6CAED,WAAoB+J,OAApB,EAA+E;AAAA;;AAC7E,YAAI,QAAOA,OAAP,MAAmB,QAAvB,EAAiC;AAC/B,eAAKtM,MAAL,CAAYuC,KAAZ,CAAkB,wBAAlB;AACA,eAAKvC,MAAL,CAAYuC,KAAZ,CAAkBgK,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACA;AACD;;AACD,YAAQrG,SAAR,GAAmCqG,OAAnC,CAAQrG,SAAR;AAAA,YAAmBJ,IAAnB,GAAmCyG,OAAnC,CAAmBzG,IAAnB;AAAA,YAAyBd,KAAzB,GAAmCuH,OAAnC,CAAyBvH,KAAzB;;AACA,YAAI,OAAOc,IAAP,KAAgB,QAApB,EAA8B;AAC5B,eAAK7F,MAAL,CAAYuC,KAAZ,CAAkB,kEAAlB;AACA,eAAKvC,MAAL,CAAYuC,KAAZ,CAAkBgK,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACA;AACD;;AACD,YAAI,QAAOvH,KAAP,MAAiB,QAArB,EAA+B;AAC7B,eAAK/E,MAAL,CAAYuC,KAAZ,CAAkB,mEAAlB;AACA,eAAKvC,MAAL,CAAYuC,KAAZ,CAAkBgK,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACA;AACD;;AACD,YAAIzG,IAAI,KAAK4G,mBAAT,IAAqB,OAAOxG,SAAP,KAAqB,QAA9C,EAAwD;AACtD,cAAMyG,QAAQ,GAAG,KAAKlM,kBAAL,CAAwBxB,GAAxB,CAA4BiH,SAA5B,CAAjB;;AACA,cAAI,OAAOyG,QAAP,KAAoB,UAAxB,EAAoC;AAClC,iBAAK1M,MAAL,CAAYuC,KAAZ,gCAA0C0D,SAA1C;AACA;AACD;;AACD,cAAQK,OAAR,GAAgCvB,KAAhC,CAAQuB,OAAR;AAAA,cAAiBC,IAAjB,GAAgCxB,KAAhC,CAAiBwB,IAAjB;AAAA,cAAuBC,IAAvB,GAAgCzB,KAAhC,CAAuByB,IAAvB;;AACA,cAAI,OAAOF,OAAP,KAAmB,SAAvB,EAAkC;AAChC,iBAAKtG,MAAL,CAAYuC,KAAZ,CAAkB,8DAAlB;AACA,iBAAKvC,MAAL,CAAYuC,KAAZ,CAAkBgK,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACAI,YAAAA,QAAQ,CAAC,KAAD,EAAQ,GAAR,EAAa,8DAAb,CAAR;AACA;AACD;;AACD,cAAI,OAAOnG,IAAP,KAAgB,QAApB,EAA8B;AAC5B,iBAAKvG,MAAL,CAAYuC,KAAZ,CAAkB,2DAAlB;AACA,iBAAKvC,MAAL,CAAYuC,KAAZ,CAAkBgK,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACAI,YAAAA,QAAQ,CAAC,KAAD,EAAQ,GAAR,EAAa,2DAAb,CAAR;AACA;AACD;;AACD,cAAI,OAAOlG,IAAP,KAAgB,QAApB,EAA8B;AAC5B,iBAAKxG,MAAL,CAAYuC,KAAZ,CAAkB,2DAAlB;AACA,iBAAKvC,MAAL,CAAYuC,KAAZ,CAAkBgK,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACAI,YAAAA,QAAQ,CAAC,KAAD,EAAQ,GAAR,EAAa,2DAAb,CAAR;AACA;AACD;;AACDA,UAAAA,QAAQ,CAACpG,OAAD,EAAUC,IAAV,EAAgBC,IAAhB,CAAR;AACA;AACD;;AACD,gBAAQX,IAAR;AACE,eAAKkC,iBAAL;AACE,gBAAI;AACF,kBACExJ,QADF,GAKIwG,KALJ,CACExG,QADF;AAAA,kBAEEF,QAFF,GAKI0G,KALJ,CAEE1G,QAFF;AAAA,kBAGED,QAHF,GAKI2G,KALJ,CAGE3G,QAHF;AAAA,kBAIEyC,IAJF,GAKIkE,KALJ,CAIElE,IAJF;;AAMA,kBAAI,OAAOxC,QAAP,KAAoB,QAAxB,EAAkC;AAChC,qBAAK2B,MAAL,CAAYuC,KAAZ,CAAkB,+CAAlB;AACA,qBAAKvC,MAAL,CAAYuC,KAAZ,CAAkBgK,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACA;AACD;;AACD,kBAAI,OAAOlO,QAAP,KAAoB,QAAxB,EAAkC;AAChC,qBAAK4B,MAAL,CAAYuC,KAAZ,CAAkB,+CAAlB;AACA,qBAAKvC,MAAL,CAAYuC,KAAZ,CAAkBgK,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACA;AACD;;AACD,kBAAI,QAAOzL,IAAP,MAAgB,QAApB,EAA8B;AAC5B,qBAAKb,MAAL,CAAYuC,KAAZ,CAAkB,mDAAlB;AACA,qBAAKvC,MAAL,CAAYuC,KAAZ,CAAkBgK,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACA;AACD;;AACD,kBAAM5F,IAAI,GAAG,KAAKvG,OAAL,CAAanB,GAAb,CAAiBT,QAAjB,CAAb;;AACA,kBAAI,OAAOmI,IAAP,KAAgB,WAApB,EAAiC;AAC/B,oBAAMqC,WAAW,GAAG,KAAKtI,cAAL,CAAoBzB,GAApB,CAAwBT,QAAxB,CAApB;;AACA,oBAAIyK,KAAK,CAACC,OAAN,CAAcF,WAAd,CAAJ,EAAgC;AAC9BA,kBAAAA,WAAW,CAAC4D,IAAZ,CAAiB9L,IAAjB;AACA;AACD;;AACD,qBAAKJ,cAAL,CAAoBxB,GAApB,CAAwBV,QAAxB,EAAkC,CAACsC,IAAD,CAAlC;AACA;AACD;;AACD,kBAAI6F,IAAI,CAACkG,SAAL,IAAkBlG,IAAI,CAACmG,UAA3B,EAAuC;AACrC;AACD;;AACDnG,cAAAA,IAAI,CAAC0C,MAAL,CAAYvI,IAAZ;AACD,aApCD,CAoCE,OAAO0B,KAAP,EAAc;AACd,mBAAKvC,MAAL,CAAYuC,KAAZ,CAAkB,kCAAlB;AACA,mBAAKvC,MAAL,CAAYwC,UAAZ,CAAuBD,KAAvB;AACD;;AACD;;AACF,eAAKuK,oCAAL;AACE,gBAAI;AACF,kBACExO,MADF,GAGIyG,KAHJ,CACEzG,MADF;AAAA,kBAEEE,SAFF,GAGIuG,KAHJ,CAEEvG,SAFF;;AAIA,kBAAI,OAAOF,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,qBAAK0B,MAAL,CAAYuC,KAAZ,CAAkB,qDAAlB;AACA,qBAAKvC,MAAL,CAAYuC,KAAZ,CAAkBgK,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACA;AACD;;AACD,kBAAI,OAAO9N,SAAP,KAAqB,QAAzB,EAAmC;AACjC,qBAAKwB,MAAL,CAAYuC,KAAZ,CAAkB,wDAAlB;AACA,qBAAKvC,MAAL,CAAYuC,KAAZ,CAAkBgK,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACA;AACD;;AACD,kBAAMS,WAAW,aAAMzO,MAAN,cAAgBE,SAAhB,CAAjB;AACA,kBAAMwO,oBAAoB,GAAG,KAAKzM,uBAAL,CAA6BvB,GAA7B,CAAiC+N,WAAjC,CAA7B;;AACA,kBAAI,OAAOC,oBAAP,KAAgC,UAApC,EAAgD;AAC9CA,gBAAAA,oBAAoB;AACrB;AACF,aApBD,CAoBE,OAAOzK,KAAP,EAAc;AACd,mBAAKvC,MAAL,CAAYuC,KAAZ,CAAkB,0CAAlB;AACA,mBAAKvC,MAAL,CAAYwC,UAAZ,CAAuBD,KAAvB;AACD;;AACD;;AACF,eAAK2J,qCAAL;AACE,gBAAI;AACF,kBACE5N,OADF,GAGIyG,KAHJ,CACEzG,MADF;AAAA,kBAEEE,WAFF,GAGIuG,KAHJ,CAEEvG,SAFF;;AAIA,kBAAI,OAAOF,OAAP,KAAkB,QAAtB,EAAgC;AAC9B,qBAAK0B,MAAL,CAAYuC,KAAZ,CAAkB,yDAAlB;AACA,qBAAKvC,MAAL,CAAYuC,KAAZ,CAAkBgK,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACA;AACD;;AACD,kBAAI,OAAO9N,WAAP,KAAqB,QAAzB,EAAmC;AACjC,qBAAKwB,MAAL,CAAYuC,KAAZ,CAAkB,4DAAlB;AACA,qBAAKvC,MAAL,CAAYuC,KAAZ,CAAkBgK,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACA;AACD;;AACD,kBAAMS,YAAW,aAAMzO,OAAN,cAAgBE,WAAhB,CAAjB;;AACA,kBAAMyO,QAAQ,GAAG,KAAKrM,qBAAL,CAA2B5B,GAA3B,CAA+B+N,YAA/B,CAAjB;;AACA,kBAAI,CAAC/D,KAAK,CAACC,OAAN,CAAcgE,QAAd,CAAL,EAA8B;AAC5B,qBAAKjN,MAAL,CAAYwI,IAAZ,yDAAkElK,OAAlE,0BAAwFE,WAAxF;AACA;AACD;;AACD,mBAAKwB,MAAL,CAAYwI,IAAZ,kDAA2DlK,OAA3D,0BAAiFE,WAAjF;AACAyO,cAAAA,QAAQ,CAAC,CAAD,CAAR,CAAYC,KAAZ;AACD,aAvBD,CAuBE,OAAO3K,KAAP,EAAc;AACd,mBAAKvC,MAAL,CAAYuC,KAAZ,CAAkB,8CAAlB;AACA,mBAAKvC,MAAL,CAAYwC,UAAZ,CAAuBD,KAAvB;AACD;;AACD;;AACF,eAAK4K,+BAAL;AACE,gBAAI;AACF,kBACE7O,QADF,GAGIyG,KAHJ,CACEzG,MADF;AAAA,kBAEEE,WAFF,GAGIuG,KAHJ,CAEEvG,SAFF;;AAIA,kBAAI,OAAOF,QAAP,KAAkB,QAAtB,EAAgC;AAC9B,qBAAK0B,MAAL,CAAYuC,KAAZ,CAAkB,mDAAlB;AACA,qBAAKvC,MAAL,CAAYuC,KAAZ,CAAkBgK,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACA;AACD;;AACD,kBAAI,OAAO9N,WAAP,KAAqB,QAAzB,EAAmC;AACjC,qBAAKwB,MAAL,CAAYuC,KAAZ,CAAkB,sDAAlB;AACA,qBAAKvC,MAAL,CAAYuC,KAAZ,CAAkBgK,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAlB;AACA;AACD;;AACD,kBAAMS,aAAW,aAAMzO,QAAN,cAAgBE,WAAhB,CAAjB;;AACA,kBAAMyO,SAAQ,GAAG,KAAKrM,qBAAL,CAA2B5B,GAA3B,CAA+B+N,aAA/B,CAAjB;;AACA,kBAAI/D,KAAK,CAACC,OAAN,CAAcgE,SAAd,CAAJ,EAA6B;AAC3B,qBAAKjN,MAAL,CAAYwI,IAAZ,yCAAkDlK,QAAlD,0BAAwEE,WAAxE;AACA,sBAAMyO,SAAQ,CAAC,CAAD,CAAd;AACA;AACD;;AACD,kBAAM3C,kBAAkB,GAAG,KAAK3J,qBAAL,CAA2B3B,GAA3B,CAA+BR,WAA/B,CAA3B;;AACA,kBAAI,OAAO8L,kBAAP,KAA8B,UAAlC,EAA8C;AAC5C,qBAAKtK,MAAL,CAAYuC,KAAZ,+BAAyC/D,WAAzC;AACA;AACD;;AACD,kBAAM4O,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACAD,cAAAA,eAAe,CAAChE,MAAhB,CAAuBM,gBAAvB,CAAwC,OAAxC,EAAiD,YAAM;AACrD,gBAAA,OAAI,CAAC9I,qBAAL,CAA2BkB,MAA3B,CAAkCiL,aAAlC;AACD,eAFD;;AAGA,kBAAMtI,OAAO,GAAG,kBAAC,aAAY;AAC3B,oBAAI6I,QAAQ,GAAG,CAAC,KAAD,EAAQ,GAAR,EAAa,gCAAb,CAAf;;AACA,oBAAI;AACFA,kBAAAA,QAAQ,SAAShD,kBAAkB,CAAC;AAAEhM,oBAAAA,MAAM,EAANA,QAAF;AAAUE,oBAAAA,SAAS,EAATA,WAAV;AAAqB+O,oBAAAA,WAAW,EAAEH,eAAe,CAAChE;AAAlD,mBAAD,CAAnC;AACD,iBAFD,CAEE,OAAO7G,KAAP,EAAc;AACd,kBAAA,OAAI,CAACvC,MAAL,CAAYuC,KAAZ,8DAAwEjE,QAAxE,0BAA8FE,WAA9F;;AACA,kBAAA,OAAI,CAACwB,MAAL,CAAYwC,UAAZ,CAAuBD,KAAvB;AACD;;AACD,oBAAI6K,eAAe,CAAChE,MAAhB,CAAuBoE,OAA3B,EAAoC;AAClC,kBAAA,OAAI,CAACxN,MAAL,CAAYwI,IAAZ,yCAAkDlK,QAAlD,0BAAwEE,WAAxE;;AACA;AACD;;AACD,oBAAI;AACF,wBAAM,OAAI,CAACiI,OAAL,CAAagH,gCAAb,EAAoC;AACxCnP,oBAAAA,MAAM,EAANA,QADwC;AAExCE,oBAAAA,SAAS,EAATA,WAFwC;AAGxC8H,oBAAAA,OAAO,EAAEgH,QAAQ,CAAC,CAAD,CAHuB;AAIxC/G,oBAAAA,IAAI,EAAE+G,QAAQ,CAAC,CAAD,CAJ0B;AAKxC9G,oBAAAA,IAAI,EAAE8G,QAAQ,CAAC,CAAD;AAL0B,mBAApC,EAMH;AAAEvH,oBAAAA,WAAW,EAAE2H;AAAf,mBANG,CAAN;AAOD,iBARD,CAQE,OAAOnL,KAAP,EAAc;AACd,kBAAA,OAAI,CAACvC,MAAL,CAAYuC,KAAZ,yDAAmEjE,QAAnE,0BAAyFE,WAAzF;;AACA,kBAAA,OAAI,CAACwB,MAAL,CAAYwC,UAAZ,CAAuBD,KAAvB;AACD;;AACD,gBAAA,OAAI,CAAC3B,qBAAL,CAA2BkB,MAA3B,CAAkCiL,aAAlC;AACD,eAzBe,GAAhB;;AA0BA,mBAAKnM,qBAAL,CAA2B3B,GAA3B,CAA+B8N,aAA/B,EAA4C,CAACtI,OAAD,EAAU2I,eAAV,CAA5C;AACA,oBAAM3I,OAAN;AACD,aA3DD,CA2DE,OAAOlC,KAAP,EAAc;AACd,mBAAKvC,MAAL,CAAYuC,KAAZ,CAAkB,wCAAlB;AACA,mBAAKvC,MAAL,CAAYwC,UAAZ,CAAuBD,KAAvB;AACD;;AACD;;AACF;AACE,iBAAKvC,MAAL,CAAYwI,IAAZ,gCAAyC3C,IAAzC;AApKJ;AAsKD,O;;;;;;;;;;;gDAED,WAAuBtH,QAAvB,EAAwC;AAAA;;AACtC,YAAMmI,IAAI,GAAG,KAAKvG,OAAL,CAAanB,GAAb,CAAiBT,QAAjB,CAAb;;AACA,YAAI,OAAOmI,IAAP,KAAgB,WAAhB,IAA+BA,IAAI,CAACC,SAAxC,EAAmD;AACjD,iBAAOD,IAAP;AACD;;AACD,eAAO,IAAIhC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,cAAI+I,KAAJ,CADsC,CAC3B;;;AACX,cAAMlG,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB,YAAA,OAAI,CAACpD,cAAL,CAAoB,oBAApB,EAA0CuJ,wBAA1C;;AACA,YAAA,OAAI,CAACvJ,cAAL,CAAoB,SAApB,EAA+BoE,aAA/B;;AACA,YAAA,OAAI,CAACpE,cAAL,CAAoB,MAApB,EAA4BwJ,UAA5B;;AACA,gBAAI,OAAOF,KAAP,KAAiB,WAArB,EAAkC;AAChCA,cAAAA,KAAK,CAACtJ,cAAN,CAAqB,OAArB,EAA8BwD,eAA9B;;AACA8F,cAAAA,KAAK,CAACtJ,cAAN,CAAqB,OAArB,EAA8BuD,eAA9B;AACD;AACF,WARD;;AASA,cAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5BJ,YAAAA,OAAO;AACP7C,YAAAA,MAAM,CAAC,IAAIE,KAAJ,gBAAkBvG,QAAlB,+CAAD,CAAN;AACD,WAHD;;AAIA,cAAMqJ,eAAe,GAAG,SAAlBA,eAAkB,CAACrF,KAAD,EAAiB;AACvCkF,YAAAA,OAAO;AACP7C,YAAAA,MAAM,CAACrC,KAAD,CAAN;AACD,WAHD;;AAIA,cAAMsL,UAAU,GAAG,SAAbA,UAAa,SAAyC;AAAA,gBAA5BC,WAA4B,UAAtCvP,QAAsC;AAAA,gBAATwP,EAAS,UAAfrH,IAAe;;AAC1D,gBAAIoH,WAAW,KAAKvP,QAApB,EAA8B;AAC5B;AACD;;AACDoP,YAAAA,KAAK,GAAGI,EAAR;;AACAA,YAAAA,EAAE,CAAC5M,WAAH,CAAe,OAAf,EAAwB0G,eAAxB;;AACAkG,YAAAA,EAAE,CAAC5M,WAAH,CAAe,OAAf,EAAwByG,eAAxB;AACD,WAPD;;AAQA,cAAMa,aAAa,GAAG,SAAhBA,aAAgB,SAAyC;AAAA,gBAA5BqF,WAA4B,UAAtCvP,QAAsC;AAAA,gBAATwP,EAAS,UAAfrH,IAAe;;AAC7D,gBAAIoH,WAAW,KAAKvP,QAApB,EAA8B;AAC5B;AACD;;AACDkJ,YAAAA,OAAO;AACP9C,YAAAA,OAAO,CAACoJ,EAAD,CAAP;AACD,WAND;;AAOA,cAAMH,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACI,WAAD,EAAwB;AACvD,gBAAIzP,QAAQ,KAAKyP,WAAjB,EAA8B;AAC5B;AACD;;AACDvG,YAAAA,OAAO;AACP7C,YAAAA,MAAM,CAAC,IAAIE,KAAJ,kBAAoBvG,QAApB,6CAAD,CAAN;AACD,WAND;;AAOA,UAAA,OAAI,CAAC4C,WAAL,CAAiB,oBAAjB,EAAuCyM,wBAAvC;;AACA,UAAA,OAAI,CAACzM,WAAL,CAAiB,SAAjB,EAA4BsH,aAA5B;;AACA,UAAA,OAAI,CAACtH,WAAL,CAAiB,MAAjB,EAAyB0M,UAAzB;AACD,SA5CM,CAAP;AA6CD,O;;;;;;;;;;;uDAED,WAA8BtP,QAA9B,EAA+C;AAAA;;AAC7C,YAAI0P,QAAJ;;AACA,YAAIN,KAAJ,CAF6C,CAElC;;;AACX,YAAIO,MAAM,GAAG,CAAb;AACA,YAAMd,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACA,YAAME,WAAW,GAAGH,eAAe,CAAChE,MAApC;;AACA,YAAM3B,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB2F,UAAAA,eAAe,CAACF,KAAhB;;AACA,UAAA,OAAI,CAAC7I,cAAL,CAAoB,oBAApB,EAA0CuJ,wBAA1C;;AACA,cAAI,OAAOD,KAAP,KAAiB,WAArB,EAAkC;AAChCA,YAAAA,KAAK,CAACtJ,cAAN,CAAqB,OAArB,EAA8BwD,eAA9B;;AACA8F,YAAAA,KAAK,CAACtJ,cAAN,CAAqB,MAArB,EAA6B8J,cAA7B;AACD;;AACD,UAAA,OAAI,CAACtN,IAAL,CAAUwD,cAAV,CAAyB,SAAzB,EAAoC+J,iBAApC;;AACAC,UAAAA,aAAa,CAACJ,QAAD,CAAb;AACD,SATD;;AAUA,YAAMpG,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5BJ,UAAAA,OAAO;;AACP,cAAI,OAAI,CAACtF,gBAAL,CAAsBR,GAAtB,CAA0BpD,QAA1B,CAAJ,EAAyC;AACvC,YAAA,OAAI,CAAC6C,uBAAL,CAA6B7C,QAA7B;AACD;AACF,SALD;;AAMA,YAAMqP,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACI,WAAD,EAAwB;AACvD,cAAIzP,QAAQ,KAAKyP,WAAjB,EAA8B;AAC5B;AACD;;AACDvG,UAAAA,OAAO;AACR,SALD;;AAMA,YAAM2G,iBAAiB,GAAG,SAApBA,iBAAoB,CAAC7I,KAAD,EAAgC;AACxD+I,UAAAA,UAAU,CAAC,IAAIC,+BAAJ,CAAuBhJ,KAAvB,CAAD,CAAV;AACD,SAFD;;AAGA,YAAM+I,UAAU,GAAG,SAAbA,UAAa,CAACE,QAAD,EAAmB;AACpC,cAAI,OAAO9H,IAAP,KAAgB,WAApB,EAAiC;AAC/B,kBAAM,IAAI5B,KAAJ,CAAU,qBAAV,CAAN;AACD;;AACD4B,UAAAA,IAAI,CAAC+H,IAAL,CAAU,oBAAKD,QAAL,CAAV;AACD,SALD;;AAMA,YAAML,cAAc,GAAG,SAAjBA,cAAiB,CAACO,MAAD,EAAmB;AACxC,cAAMpC,OAAO,GAAG,sBAAOoC,MAAP,CAAhB;;AACA,cAAIpC,OAAO,YAAYqC,iBAAvB,EAA6B;AAC3BL,YAAAA,UAAU,CAAC,IAAIM,iBAAJ,CAAStC,OAAO,CAACuC,SAAjB,EAA4BC,IAAI,CAACC,GAAL,EAA5B,CAAD,CAAV;AACD,WAFD,MAEO,IAAIzC,OAAO,YAAYsC,iBAAvB,EAA6B;AAClCV,YAAAA,MAAM,GAAIY,IAAI,CAACC,GAAL,KAAazC,OAAO,CAAC0C,SAAtB,GAAmC,CAACC,WAAW,CAACF,GAAZ,KAAoBzC,OAAO,CAACuC,SAA7B,IAA0C,CAAtF;;AACA,YAAA,OAAI,CAAC7N,sBAAL,CAA4B/B,GAA5B,CAAgCV,QAAhC,EAA0C2P,MAA1C;AACD,WAHM,MAGA,IAAI5B,OAAO,YAAYiC,+BAAvB,EAA2C;AAChD,YAAA,OAAI,CAAC1N,IAAL,CAAUqO,OAAV,CAAkB5C,OAAO,CAAC/G,KAA1B;AACD;AACF,SAVD;;AAWA,aAAKpE,WAAL,CAAiB,oBAAjB,EAAuCyM,wBAAvC;;AACA,YAAI,CAAC,KAAKuB,mBAAL,CAAyB5Q,QAAzB,CAAL,EAAyC;AACvC,gBAAM,IAAImG,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC7B,gBAAM8D,aAAa,GAAG,SAAhBA,aAAgB,SAA+B;AAAA,kBAAlBqF,WAAkB,UAA5BvP,QAA4B;;AACnD,kBAAIuP,WAAW,KAAKvP,QAApB,EAA8B;AAC5B;AACD;;AACD,cAAA,OAAI,CAAC8F,cAAL,CAAoB,SAApB,EAA+BoE,aAA/B;;AACA8E,cAAAA,WAAW,CAAC3D,mBAAZ,CAAgC,OAAhC,EAAyCwF,WAAzC;AACAzK,cAAAA,OAAO;AACR,aAPD;;AAQA,gBAAMyK,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,cAAA,OAAI,CAAC/K,cAAL,CAAoB,SAApB,EAA+BoE,aAA/B;;AACA8E,cAAAA,WAAW,CAAC3D,mBAAZ,CAAgC,OAAhC,EAAyCwF,WAAzC;AACAzK,cAAAA,OAAO;AACR,aAJD;;AAKA,YAAA,OAAI,CAACxD,WAAL,CAAiB,SAAjB,EAA4BsH,aAA5B;;AACA8E,YAAAA,WAAW,CAAC7D,gBAAZ,CAA6B,OAA7B,EAAsC0F,WAAtC;AACD,WAhBK,CAAN;;AAiBA,cAAI7B,WAAW,CAACC,OAAhB,EAAyB;AACvB;AACD;AACF;;AACD,YAAM9G,IAAI,GAAG,KAAKvG,OAAL,CAAanB,GAAb,CAAiBT,QAAjB,CAAb;AACAoP,QAAAA,KAAK,GAAGjH,IAAR;;AACA,YAAI,OAAOA,IAAP,KAAgB,WAApB,EAAiC;AAC/B,gBAAM,IAAI5B,KAAJ,CAAU,qBAAV,CAAN;AACD;;AACD4B,QAAAA,IAAI,CAACvF,WAAL,CAAiB,OAAjB,EAA0B0G,eAA1B;AACAnB,QAAAA,IAAI,CAACvF,WAAL,CAAiB,MAAjB,EAAyBgN,cAAzB;AACAF,QAAAA,QAAQ,GAAGoB,WAAW,CAAC,YAAM;AAC3B3I,UAAAA,IAAI,CAAC+H,IAAL,CAAU,oBAAK,IAAIE,iBAAJ,CAASM,WAAW,CAACF,GAAZ,EAAT,CAAL,CAAV;AACD,SAFqB,EAEnB,IAFmB,CAAtB;AAGArI,QAAAA,IAAI,CAAC+H,IAAL,CAAU,oBAAK,IAAIE,iBAAJ,CAASM,WAAW,CAACF,GAAZ,EAAT,CAAL,CAAV;AACA,aAAKlO,IAAL,CAAUM,WAAV,CAAsB,SAAtB,EAAiCiN,iBAAjC;AACAA,QAAAA,iBAAiB,CAAC,KAAKvN,IAAL,CAAUyO,IAAV,EAAD,CAAjB;AACD,O;;;;;;;;;;WAED,gCAAuBzO,IAAvB,EAAqC;AACnC,aAAO,KAAK4F,OAAL,CAAaqG,oCAAb,EAAwCjM,IAAxC,EAA8C;AAAEkF,QAAAA,WAAW,EAAEwJ;AAAf,OAA9C,CAAP;AACD;;;WAED,iBAAQ;AACN1N,MAAAA,YAAY,CAAC,KAAKQ,kCAAN,CAAZ;AACA,WAAKK,cAAL,CAAoB,KAAK7C,IAAzB,EAA+B,EAA/B;AACD;;;;qCAED,aAAc;AACZ,aAAK8D,KAAL;AACA,aAAKrE,MAAL,GAAc,KAAd;AACA,aAAKgE,IAAL,CAAU,OAAV;;AACA,YAAI;AACF,gBAAM,KAAKyG,MAAL,EAAN;AACD,SAFD,CAEE,OAAOxH,KAAP,EAAc;AACd,eAAKvC,MAAL,CAAYuC,KAAZ,CAAkB,6BAAlB;AACA,eAAKvC,MAAL,CAAYwC,UAAZ,CAAuBD,KAAvB;AACD;;AACD,aAAKpD,WAAL,CAAiB0B,IAAjB,CAAsBwD,cAAtB,CAAqC,KAArC,EAA4C,KAAK3B,cAAjD;AACA,aAAKvD,WAAL,CAAiBkF,cAAjB,CAAgC,OAAhC,EAAyC,KAAKX,gBAA9C;AACA,aAAKvE,WAAL,CAAiBkF,cAAjB,CAAgC,gBAAhC,EAAkD,KAAKT,yBAAvD;AACA,aAAKzE,WAAL,CAAiBkF,cAAjB,CAAgC,WAAhC,EAA6C,KAAKP,oBAAlD;AACA,aAAK3E,WAAL,CAAiBqQ,cAAjB,CAAgC,KAAK1P,WAArC;AACA,aAAKX,WAAL,CAAiBsQ,yBAAjB,CAA2C,KAAK5P,IAAhD;AACA,aAAKV,WAAL,CAAiBuQ,WAAjB,CAA6B,KAAK7P,IAAlC;AACD,O;;;;;;;;;;;EAjvCuB8P,e;;;;gBAAbzQ,I;;gBAAAA,I;;AAovCb,IAAMuH,OAAO,GAAG,SAAVA,OAAU,CAACtH,WAAD,EAA0BoO,WAA1B,EAAoDnO,MAApD,EAAmEyG,IAAnE,EAAgFd,KAAhF,EAAiL;AAAA,MAAnF1F,OAAmF,uEAAP,EAAO;AAC/L,MAAMQ,IAAI,oBAAaT,MAAb,CAAV;AACA,MAAMU,WAAW,oBAAaV,MAAb,cAAuBG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBC,MAAM,CAACC,gBAAlC,EAAoDI,QAApD,CAA6D,EAA7D,CAAvB,CAAjB;AACA,MAAM+F,eAAe,GAAG,OAAOzG,OAAO,CAACyG,eAAf,KAAmC,QAAnC,GAA8CzG,OAAO,CAACyG,eAAtD,GAAwE,IAAhG;AACA,MAAMC,WAAW,GAAG,OAAO1G,OAAO,CAAC0G,WAAf,KAA+B,UAA/B,GAA4C1G,OAAO,CAAC0G,WAApD,GAAkEC,oBAAtF;AACA,MAAMC,SAAS,GAAG1G,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBC,MAAM,CAACC,gBAAlC,CAAlB;AACA,SAAO,IAAI+E,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAM6C,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB5F,MAAAA,YAAY,CAACqE,OAAD,CAAZ;AACAqH,MAAAA,WAAW,CAAC3D,mBAAZ,CAAgC,OAAhC,EAAyCwF,WAAzC;AACAjQ,MAAAA,WAAW,CAACsQ,yBAAZ,CAAsC5P,IAAtC;AACAV,MAAAA,WAAW,CAACqQ,cAAZ,CAA2B1P,WAA3B;AACD,KALD;;AAMA,QAAMsP,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB3H,MAAAA,OAAO;AACP7C,MAAAA,MAAM,CAAC,IAAIgL,kBAAJ,0CAAiD/J,IAAjD,wBAAD,CAAN;AACD,KAHD;;AAIA,QAAMK,OAAO,GAAGjE,UAAU,CAAC,YAAM;AAC/BwF,MAAAA,OAAO;AACP7C,MAAAA,MAAM,CAAC,IAAIwB,2BAAJ,WAA2BP,IAA3B,wCAA6DC,eAA7D,QAAD,CAAN;AACD,KAHyB,EAGvBA,eAHuB,CAA1B;;AAIA,QAAMX,aAAa,GAAG,SAAhBA,aAAgB,CAACmH,OAAD,EAA+D;AACnF,UAAI,QAAOA,OAAP,MAAmB,QAAvB,EAAiC;AAC/B;AACD;;AACD,UAAmBuD,UAAnB,GAA4EvD,OAA5E,CAAQrG,SAAR;AAAA,UAAqC6J,YAArC,GAA4ExD,OAA5E,CAA+BzG,IAA/B;AAAA,UAA0DkK,aAA1D,GAA4EzD,OAA5E,CAAmDvH,KAAnD;;AACA,UAAI+K,YAAY,KAAKrD,mBAArB,EAA+B;AAC7B;AACD;;AACD,UAAIoD,UAAU,KAAK5J,SAAnB,EAA8B;AAC5B;AACD;;AACD,UAAQK,OAAR,GAAgCyJ,aAAhC,CAAQzJ,OAAR;AAAA,UAAiBC,IAAjB,GAAgCwJ,aAAhC,CAAiBxJ,IAAjB;AAAA,UAAuBC,IAAvB,GAAgCuJ,aAAhC,CAAuBvJ,IAAvB;AACAiB,MAAAA,OAAO;;AACP,UAAInB,OAAJ,EAAa;AACX3B,QAAAA,OAAO,CAAC;AAAE4B,UAAAA,IAAI,EAAJA,IAAF;AAAQC,UAAAA,IAAI,EAAJA;AAAR,SAAD,CAAP;AACA;AACD;;AACD5B,MAAAA,MAAM,CAAC,IAAImB,WAAJ,CAAgBS,IAAhB,EAAsBD,IAAtB,CAAD,CAAN;AACD,KAlBD;;AAmBAgH,IAAAA,WAAW,CAAC7D,gBAAZ,CAA6B,OAA7B,EAAsC0F,WAAtC;AACA1K,IAAAA,OAAO,CAACM,GAAR,CAAY,CACV7F,WAAW,CAACiG,eAAZ,CAA4BtF,WAA5B,CADU,EAEVX,WAAW,CAAC+F,sBAAZ,CAAmCrF,IAAnC,EAAyCsF,aAAzC,CAFU,CAAZ,EAGG6K,IAHH,CAGQ,YAAM;AACZ7Q,MAAAA,WAAW,CAACsH,OAAZ,CAAoB3G,WAApB,EAAiC;AAAEmG,QAAAA,SAAS,EAATA,SAAF;AAAaJ,QAAAA,IAAI,EAAJA,IAAb;AAAmBd,QAAAA,KAAK,EAALA;AAAnB,OAAjC;AACD,KALD,EAKGX,KALH,CAKS,UAAC7B,KAAD,EAAW;AAClBkF,MAAAA,OAAO;AACP7C,MAAAA,MAAM,CAACrC,KAAD,CAAN;AACD,KARD;AASD,GA5CM,CAAP;AA6CD,CAnDD;;AAqDArD,IAAI,CAAC+Q,sBAAL,GAA8B,UAAC9Q,WAAD,EAA2BoO,WAA3B,EAAoD1M,IAApD,EAAiF;AAC7G,MAAQzB,MAAR,GAAmByB,IAAnB,CAAQzB,MAAR;AACA,SAAOqH,OAAO,CAACtH,WAAD,EAAcoO,WAAd,EAA2BnO,MAA3B,EAAmC0N,oCAAnC,EAA8DjM,IAA9D,EAAoE;AAAEkF,IAAAA,WAAW,EAAEwJ;AAAf,GAApE,CAAd;AACD,CAHD;;AAKArQ,IAAI,CAACgR,cAAL;AAAA,iCAAsB,WAAO/Q,WAAP,EAAiCgR,OAAjC,EAAyD7R,MAAzD,EAAwEiP,WAAxE,EAA6H;AAAA,QAA3BlO,OAA2B,uEAAP,EAAO;AACjJ,QAAM+Q,IAAI,GAAG,IAAIlR,IAAJ,CAASC,WAAT,EAAsBkR,sCAAtB,EAAmD/R,MAAnD,EAA2D4I,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB9H,OAAlB,EAA2B;AAAEO,MAAAA,oBAAoB,EAAE;AAAxB,KAA3B,CAA3D,CAAb;AACA,QAAIR,MAAM,GAAG+Q,OAAb,CAFiJ,CAE3H;;AACtB,QAAMG,QAAQ,GAAGF,IAAI,CAAC7R,QAAL,CAAcwB,QAAd,CAAuB,EAAvB,CAAjB;AACA,QAAMC,MAAM,GAAGX,OAAO,CAACW,MAAR,IAAkBb,WAAW,CAACa,MAA7C;AACA,QAAMuQ,gBAAgB,SAAS,IAAI7L,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC9D,UAAMwG,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1BgF,QAAAA,IAAI,CAACvP,IAAL,CAAU5B,GAAV,CAAcqR,QAAd,EAAwBlR,MAAxB;AACD,OAFD;;AAGA,UAAMqJ,aAAa,GAAG,SAAhBA,aAAgB,SAAqC;AAAA,YAAlClK,QAAkC,UAAlCA,QAAkC;AAAA,YAAxBJ,UAAwB,UAAxBA,UAAwB;AACzD,YAAMW,MAAM,GAAGsR,IAAI,CAACvR,SAAL,CAAeG,GAAf,CAAmBb,UAAnB,CAAf;;AACA,YAAI,OAAOW,MAAP,KAAkB,WAAtB,EAAmC;AACjC;AACD;;AACD,YAAQN,SAAR,GAAsBM,MAAtB,CAAQN,SAAR;;AACA,YAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjC;AACD;;AACD,YAAID,QAAQ,GAAG6R,IAAI,CAAC7R,QAApB,EAA8B;AAC5B6R,UAAAA,IAAI,CAAC3O,WAAL,CAAiBjD,SAAjB,EAA4B4F,KAA5B,CAAkC,UAAC7B,KAAD,EAAW;AAC3CvC,YAAAA,MAAM,CAACuC,KAAP,CAAa,iDAAb;AACAvC,YAAAA,MAAM,CAACwC,UAAP,CAAkBD,KAAlB;AACD,WAHD;AAID;AACF,OAfD;;AAgBA,UAAM2I,iBAAiB,GAAG,SAApBA,iBAAoB,SAAoC;AAAA,YAAjC3M,QAAiC,UAAjCA,QAAiC;AAAA,YAAvBC,SAAuB,UAAvBA,SAAuB;;AAC5D,YAAI4R,IAAI,CAAC5R,SAAL,KAAmBA,SAAvB,EAAkC;AAChC;AACD;;AACD,YAAI,CAAC4R,IAAI,CAACjB,mBAAL,CAAyB5Q,QAAzB,CAAL,EAAyC;AACvC;AACD;;AACD,YAAI,OAAOC,SAAP,KAAqB,QAAzB,EAAmC;AACjC;AACD;;AACD,YAAID,QAAQ,GAAG6R,IAAI,CAAC7R,QAApB,EAA8B;AAC5B6R,UAAAA,IAAI,CAAC3O,WAAL,CAAiBjD,SAAjB,EAA4B4F,KAA5B,CAAkC,UAAC7B,KAAD,EAAW;AAC3CvC,YAAAA,MAAM,CAACuC,KAAP,CAAa,iDAAb;AACAvC,YAAAA,MAAM,CAACwC,UAAP,CAAkBD,KAAlB;AACD,WAHD;AAID;AACF,OAhBD;;AAiBA,UAAMiO,SAAS,GAAG,SAAZA,SAAY,CAAC7N,GAAD,EAAa8N,YAAb,EAA6C;AAC7D,YAAI9N,GAAG,KAAK2N,QAAZ,EAAsB;AACpB;AACD;;AACD,YAAM/R,QAAQ,GAAGmS,QAAQ,CAAC/N,GAAD,EAAM,EAAN,CAAzB;;AACA,YAAI,CAACyN,IAAI,CAACjB,mBAAL,CAAyB5Q,QAAzB,CAAD,IAAuCA,QAAQ,KAAK6R,IAAI,CAAC7R,QAA7D,EAAuE;AACrE;AACD;;AACD,YAAIa,MAAM,KAAK,KAAX,IAAoBqR,YAAY,KAAK,KAArC,IAA8ClS,QAAQ,GAAG6R,IAAI,CAAC7R,QAAlE,EAA4E;AAC1Ea,UAAAA,MAAM,GAAGoL,UAAU,CAACC,MAAX,CAAkBC,UAAlB,EAAT,CAD0E,CACjC;;AACzC0F,UAAAA,IAAI,CAACvP,IAAL,CAAU5B,GAAV,CAAcqR,QAAd,EAAwBlR,MAAxB;AACA;AACD,SAJD,MAIO,IAAI,OAAOA,MAAP,KAAkB,QAAlB,IAA8B,OAAOqR,YAAP,KAAwB,QAAtD,IAAkElS,QAAQ,GAAG6R,IAAI,CAAC7R,QAAtF,EAAgG;AACrGa,UAAAA,MAAM,GAAGqR,YAAT;AACAL,UAAAA,IAAI,CAACvP,IAAL,CAAU5B,GAAV,CAAcqR,QAAd,EAAwBG,YAAxB;AACD,SAHM,MAGA,IAAIrR,MAAM,KAAK,KAAX,IAAoB,OAAOqR,YAAP,KAAwB,QAAhD,EAA0D;AAC/DrR,UAAAA,MAAM,GAAGqR,YAAT;AACAL,UAAAA,IAAI,CAACvP,IAAL,CAAU5B,GAAV,CAAcqR,QAAd,EAAwBG,YAAxB;AACD,SAHM,MAGA,IAAI,OAAOrR,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,KAAKqR,YAA7C,EAA2D;AAChE;AACD;;AACDlD,QAAAA,WAAW,CAAC3D,mBAAZ,CAAgC,OAAhC,EAAyCwF,WAAzC;AACAgB,QAAAA,IAAI,CAAC/L,cAAL,CAAoB,OAApB,EAA6BC,WAA7B;AACA8L,QAAAA,IAAI,CAAC/L,cAAL,CAAoB,SAApB,EAA+BoE,aAA/B;AACA2H,QAAAA,IAAI,CAAC/L,cAAL,CAAoB,aAApB,EAAmC6G,iBAAnC;AACAkF,QAAAA,IAAI,CAAC/L,cAAL,CAAoB,SAApB,EAA+B+G,aAA/B;AACAgF,QAAAA,IAAI,CAACvP,IAAL,CAAUwD,cAAV,CAAyB,KAAzB,EAAgCmM,SAAhC;AACA7L,QAAAA,OAAO,CAACvF,MAAD,CAAP;AACD,OA5BD;;AA6BA,UAAMkF,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBiJ,QAAAA,WAAW,CAAC3D,mBAAZ,CAAgC,OAAhC,EAAyCwF,WAAzC;AACAgB,QAAAA,IAAI,CAAC/L,cAAL,CAAoB,OAApB,EAA6BC,WAA7B;AACA8L,QAAAA,IAAI,CAAC/L,cAAL,CAAoB,SAApB,EAA+BoE,aAA/B;AACA2H,QAAAA,IAAI,CAAC/L,cAAL,CAAoB,aAApB,EAAmC6G,iBAAnC;AACAkF,QAAAA,IAAI,CAAC/L,cAAL,CAAoB,SAApB,EAA+B+G,aAA/B;AACAgF,QAAAA,IAAI,CAACvP,IAAL,CAAUwD,cAAV,CAAyB,KAAzB,EAAgCmM,SAAhC;AACA5L,QAAAA,MAAM,CAAC,IAAIuB,yBAAJ,CAAsB,mDAAtB,CAAD,CAAN;AACD,OARD;;AASA,UAAMiJ,WAAW;AAAA,uCAAG,aAAY;AAC9B7B,UAAAA,WAAW,CAAC3D,mBAAZ,CAAgC,OAAhC,EAAyCwF,WAAzC;AACAgB,UAAAA,IAAI,CAAC/L,cAAL,CAAoB,OAApB,EAA6BC,WAA7B;AACA8L,UAAAA,IAAI,CAAC/L,cAAL,CAAoB,SAApB,EAA+BoE,aAA/B;AACA2H,UAAAA,IAAI,CAAC/L,cAAL,CAAoB,aAApB,EAAmC6G,iBAAnC;AACAkF,UAAAA,IAAI,CAAC/L,cAAL,CAAoB,SAApB,EAA+B+G,aAA/B;AACAgF,UAAAA,IAAI,CAACvP,IAAL,CAAUwD,cAAV,CAAyB,KAAzB,EAAgCmM,SAAhC;;AACA,cAAI;AACF,gBAAMjL,KAAK,GAAG6K,IAAI,CAAC/P,QAAL,CAAcrB,GAAd,CAAkBmL,wBAAlB,CAAd;;AACA,gBAAI,OAAO5E,KAAP,KAAiB,WAArB,EAAkC;AAChC,oBAAMA,KAAK,CAACwE,MAAN,EAAN;AACD;;AACD,kBAAMqG,IAAI,CAACvM,KAAL,EAAN;AACD,WAND,CAME,OAAOtB,KAAP,EAAc;AACdvC,YAAAA,MAAM,CAACuC,KAAP,CAAa,6CAAb;AACAvC,YAAAA,MAAM,CAACwC,UAAP,CAAkBD,KAAlB;AACD;;AACDqC,UAAAA,MAAM,CAAC,IAAIgL,kBAAJ,CAAe,iCAAf,CAAD,CAAN;AACD,SAlBgB;;AAAA,wBAAXR,WAAW;AAAA;AAAA;AAAA,SAAjB;;AAmBA7B,MAAAA,WAAW,CAAC7D,gBAAZ,CAA6B,OAA7B,EAAsC0F,WAAtC;AACAgB,MAAAA,IAAI,CAACvP,IAAL,CAAUM,WAAV,CAAsB,KAAtB,EAA6BqP,SAA7B;AACAJ,MAAAA,IAAI,CAACjP,WAAL,CAAiB,OAAjB,EAA0BmD,WAA1B;AACA8L,MAAAA,IAAI,CAACjP,WAAL,CAAiB,SAAjB,EAA4BsH,aAA5B;AACA2H,MAAAA,IAAI,CAACjP,WAAL,CAAiB,aAAjB,EAAgC+J,iBAAhC;AACAkF,MAAAA,IAAI,CAACjP,WAAL,CAAiB,SAAjB,EAA4BiK,aAA5B;AACAgF,MAAAA,IAAI,CAACjM,YAAL,CAAkBqG,UAAU,CAACC,MAAX,CAAkBC,UAAlB,EAAlB,EApG8D,CAoGX;AACpD,KArG8B,CAA/B;AAsGA,UAAM0F,IAAI,CAACvM,KAAL,EAAN;AACA,WAAO0M,gBAAP;AACD,GA7GD;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport ObservedRemoveMap from 'observed-remove/dist/map';\nimport type BraidClient from '@bunchtogether/braid-client';\nimport SimplePeer from 'simple-peer';\nimport PQueue from 'p-queue';\nimport {\n  pack,\n  unpack,\n} from 'msgpackr';\nimport {\n  SIGNAL,\n  START_SESSION,\n  LEAVE_SESSION,\n  JOIN_SESSION,\n  INVITE_TO_SESSION,\n  DECLINE_INVITE_TO_SESSION,\n  SESSION_QUEUE,\n  ABORT_SESSION_JOIN_REQUEST,\n  SESSION_JOIN_REQUEST,\n  SESSION_JOIN_RESPONSE,\n  REMOVE_FROM_SESSION,\n  CANCEL_INVITE_TO_SESSION,\n  RESPONSE,\n  AUTOMATIC_DISCOVERY_ROOM_ID,\n} from './constants';\nimport {\n  AbortError,\n  RequestError,\n  StartSessionError,\n  RequestTimeoutError,\n  JoinSessionError,\n  LeaveSessionError,\n  SignalError,\n  SessionJoinResponseError,\n  ClientClosedError,\n  InviteToSessionError,\n  InvitationDeclinedError,\n  InvitedUserLeftError,\n  InvitationTimeoutError,\n  DeclineInviteToSessionError,\n  RemoveFromSessionError,\n  CancelInviteToSessionError,\n  InvitationCancelledError,\n  AbortSessionJoinError,\n} from './errors';\nimport {\n  Ping,\n  Pong,\n  ObservedRemoveDump,\n} from './messagepack';\n\ntype Logger = {\n  debug: (string | number, ...any) => void,\n  info: (string | number, ...any) => void,\n  warn: (string | number, ...any) => void,\n  error: (string | number, ...any) => void,\n  errorStack: (error:Error | MediaError) => void,\n};\n\ntype Options = {\n  peerOptions?: Object,\n  logger?: Logger,\n  sessionId?: string,\n  localConnectionsOnly?: boolean\n}\n\nexport type SessionJoinHandler = ({ sessionId: string, userId: string, abortSignal: AbortSignal }) => [boolean, number, string] | Promise<[boolean, number, string]>;\nexport type Connection = [number, number, string, number, string | false];\nexport type Socket = { socketHash: string, socketId: number, serverId: number, userId: string, clientId: number, sessionId: string | false };\n\nconst getSocketMap = (values?:Array<Connection>):Map<string, Socket> => {\n  if (typeof values === 'undefined') {\n    return new Map();\n  }\n  return new Map(values.map((x) => {\n    const socketHash = `${x[0]}:${x[1]}`;\n    return [socketHash, { socketHash, socketId: x[0], serverId: x[1], userId: x[2], clientId: x[3], sessionId: x[4] }];\n  }));\n};\n\nconst getSessionId = (values?:Array<Connection>, clientId:number):(string | false) => {\n  if (typeof values === 'undefined') {\n    return false;\n  }\n  for (const x of values) {\n    if (x[3] === clientId) {\n      return x[4] || false;\n    }\n  }\n  return false;\n};\n\nconst getPeerIds = (values?:Array<Connection>):Set<string> => {\n  if (typeof values === 'undefined') {\n    return new Set();\n  }\n  return new Set(values.map((x) => x[2]));\n};\n\nconst getSessionMap = (socketMap:Map<string, Socket>):Map<string | false, Map<number, Socket>> => {\n  const map = new Map();\n  for (const socket of socketMap.values()) {\n    const { clientId, sessionId } = socket;\n    const sessionClientMap = map.get(sessionId);\n    if (typeof sessionClientMap === 'undefined') {\n      map.set(sessionId, new Map([[clientId, socket]]));\n    } else {\n      sessionClientMap.set(clientId, socket);\n    }\n  }\n  return map;\n};\n\nexport class Bond extends EventEmitter {\n  static declineInviteToSession: (BraidClient, AbortSignal, { roomId: string, userId: string, clientId: number, sessionId: string, data: Object }) => Promise<{ code:number, text:string }>;\n  static getLocalRoomId: (BraidClient, string | false, string, AbortSignal, Options) => Promise<string>;\n\n  declare roomId: string;\n  declare clientId: number;\n  declare userId: string;\n  declare name: string;\n  declare publishName: string;\n  declare braidClient: BraidClient;\n  declare logger: Logger;\n  declare _ready: Promise<void>;\n  declare ready: Promise<void>;\n  declare socketMap: Map<string, Socket>;\n  declare sessionMap: Map<string | false, Map<number, Socket>>;\n  declare userIds: Set<string>;\n  declare peerOptions: void | Object;\n  declare peerMap: Map<number, SimplePeer>;\n  declare peerReconnectMap: Map<number, number>;\n  declare queueMap: Map<string | number, PQueue>;\n  declare handleBraidSet: (string, any) => void;\n  declare handleBraidClose: () => void;\n  declare handleBraidCloseRequested: () => void;\n  declare handleBraidReconnect: (boolean) => void;\n  declare signalQueueMap: Map<number, Array<[string, Object]>>;\n  declare requestCallbackMap: Map<number, (boolean, number, string) => void | Promise<void>>;\n  declare inviteDeclineHandlerMap: Map<string, () => Promise<void>>;\n  declare sessionId: false | string;\n  declare startedSessionId: void | string;\n  declare joinedSessionId: void | string;\n  declare active: boolean;\n  declare peerDisconnectTimeoutMap: Map<number, TimeoutID>;\n  declare sessionJoinHandlerMap: Map<string, SessionJoinHandler>;\n  declare sessionJoinRequestMap: Map<string, [Promise<void>, AbortController]>;\n  declare data: ObservedRemoveMap<string | number, any>;\n  declare sessionClientOffsetMap: Map<number, number>;\n  declare leaveSessionAfterLastClientTimeout: void | TimeoutID;\n  declare preApprovedSessionUserIdSet: Set<string>;\n  declare peerAddTrackHandlerMap: Map<Object, (Event) => void>;\n  declare localConnectionsOnly: boolean;\n\n  constructor(braidClient: BraidClient, roomId:string, userId:string, options?: Options = {}) {\n    super();\n    this.active = true;\n    this.clientId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    this.userId = userId;\n    this.roomId = roomId;\n    this.sessionId = false;\n    this.localConnectionsOnly = !!options.localConnectionsOnly;\n    const name = `signal/${this.roomId}`;\n    this.name = name;\n    this.publishName = `signal/${this.roomId}/${this.clientId.toString(36)}`;\n    this.braidClient = braidClient;\n    this.logger = options.logger || braidClient.logger;\n    this.peerOptions = options.peerOptions;\n    this.socketMap = new Map();\n    this.userIds = new Set();\n    this.peerMap = new Map();\n    this.peerReconnectMap = new Map();\n    this.queueMap = new Map();\n    this.sessionMap = new Map();\n    this.inviteDeclineHandlerMap = new Map();\n    this.requestCallbackMap = new Map();\n    this.signalQueueMap = new Map();\n    this.peerDisconnectTimeoutMap = new Map();\n    this.sessionJoinHandlerMap = new Map();\n    this.sessionJoinRequestMap = new Map();\n    this.data = new ObservedRemoveMap([], { bufferPublishing: 0 });\n    this.sessionClientOffsetMap = new Map();\n    this.preApprovedSessionUserIdSet = new Set();\n    this.peerAddTrackHandlerMap = new Map();\n    this.addListener('sessionClientJoin', this.handleSessionClientJoin.bind(this));\n    this._ready = this.init(); // eslint-disable-line no-underscore-dangle\n    if (typeof options.sessionId === 'string') {\n      this.ready = this.joinSession(options.sessionId);\n    } else {\n      this.ready = this._ready; // eslint-disable-line no-underscore-dangle\n    }\n    this.addListener('socketJoin', (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (clientId === this.clientId) {\n        return;\n      }\n      if (this.peerDisconnectTimeoutMap.has(clientId)) {\n        this.logger.info(`Clearing client ${clientId} disconnect timeout after socket join`);\n        clearTimeout(this.peerDisconnectTimeoutMap.get(clientId));\n        this.peerDisconnectTimeoutMap.delete(clientId);\n      }\n      this.addToQueue(clientId, () => this.connectToPeer(socketData));\n    });\n    this.addListener('socketLeave', (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (clientId === this.clientId) {\n        return;\n      }\n      clearTimeout(this.peerDisconnectTimeoutMap.get(clientId));\n      if (this.active) {\n        this.peerDisconnectTimeoutMap.set(clientId, setTimeout(() => {\n          this.peerDisconnectTimeoutMap.delete(clientId);\n          this.addToQueue(clientId, () => this.disconnectFromPeer(socketData));\n        }, 15000));\n      } else {\n        this.addToQueue(clientId, () => this.disconnectFromPeer(socketData));\n      }\n    });\n    this.addListener('sessionClientJoin', () => {\n      const sessionClientIds = this.sessionClientIds;\n      if (sessionClientIds.size > 1) {\n        return;\n      }\n      clearTimeout(this.leaveSessionAfterLastClientTimeout);\n    });\n    this.addListener('sessionClientLeave', async () => {\n      const sessionClientIds = this.sessionClientIds;\n      if (sessionClientIds.size > 1) {\n        return;\n      }\n      this.leaveSessionAfterLastClientTimeout = setTimeout(async () => {\n        try {\n          await this.leaveSession();\n        } catch (error) {\n          this.logger.error('Unable to leave session after timeout when last session closed');\n          this.logger.errorStack(error);\n        }\n      }, 5000);\n    });\n\n    this.addListener('session', () => {\n      this.data.clear();\n      this.sessionClientOffsetMap.clear();\n    });\n\n    this.handleBraidSet = (key:string, values:Array<Connection>) => {\n      if (key !== name) {\n        return;\n      }\n      this.active = true;\n      const oldSessionId = this.sessionId;\n      const newSessionId = getSessionId(values, this.clientId);\n      const oldSocketMap = this.socketMap;\n      const newSocketMap = getSocketMap(values);\n      const oldUserIds = this.userIds;\n      const newUserIds = getPeerIds(values);\n      const oldSessionMap = this.sessionMap;\n      const newSessionMap = getSessionMap(newSocketMap);\n      const oldLocalSessionSocketMap = typeof oldSessionId === 'string' ? oldSessionMap.get(oldSessionId) || new Map() : new Map();\n      const newLocalSessionSocketMap = typeof newSessionId === 'string' ? newSessionMap.get(newSessionId) || new Map() : new Map();\n      this.sessionId = newSessionId;\n      this.userIds = newUserIds;\n      this.socketMap = newSocketMap;\n      this.sessionMap = newSessionMap;\n      if (newSessionId !== oldSessionId) {\n        this.emit('session', newSessionId);\n      }\n      for (const [socketHash, socketData] of oldSocketMap) {\n        if (!newSocketMap.has(socketHash)) {\n          this.emit('socketLeave', socketData);\n        }\n      }\n      for (const [socketHash, socketData] of newSocketMap) {\n        if (!oldSocketMap.has(socketHash)) {\n          this.emit('socketJoin', socketData);\n        }\n      }\n      for (const peerUserId of oldUserIds) {\n        if (!newUserIds.has(peerUserId)) {\n          this.emit('leave', peerUserId);\n        }\n      }\n      for (const peerUserId of newUserIds) {\n        if (!oldUserIds.has(peerUserId)) {\n          this.emit('join', peerUserId);\n        }\n      }\n      for (const [clientId, socketData] of oldLocalSessionSocketMap) {\n        if (clientId === this.clientId) {\n          continue;\n        }\n        if (!newLocalSessionSocketMap.has(clientId)) {\n          this.emit('sessionClientLeave', clientId, socketData);\n        }\n      }\n      for (const [clientId, socketData] of newLocalSessionSocketMap) {\n        if (clientId === this.clientId) {\n          continue;\n        }\n        if (!oldLocalSessionSocketMap.has(clientId)) {\n          this.emit('sessionClientJoin', clientId, socketData);\n        }\n      }\n      for (const [sessionId, oldSessionSocketMap] of oldSessionMap) {\n        const newSessionSocketMap = newSessionMap.get(sessionId);\n        if (typeof newSessionSocketMap === 'undefined') {\n          for (const socketData of oldSessionSocketMap.values()) {\n            this.emit('sessionLeave', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of oldSessionSocketMap) {\n            if (!newSessionSocketMap.has(socketHash)) {\n              this.emit('sessionLeave', socketData);\n            }\n          }\n        }\n      }\n      for (const [sessionId, newSessionSocketMap] of newSessionMap) {\n        const oldSessionSocketMap = oldSessionMap.get(sessionId);\n        if (typeof oldSessionSocketMap === 'undefined') {\n          for (const socketData of newSessionSocketMap.values()) {\n            this.emit('sessionJoin', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of newSessionSocketMap) {\n            if (!oldSessionSocketMap.has(socketHash)) {\n              this.emit('sessionJoin', socketData);\n            }\n          }\n        }\n      }\n    };\n    this.handleBraidClose = () => {\n      this.reset();\n    };\n    this.handleBraidCloseRequested = () => {\n      this.close();\n    };\n    this.handleBraidReconnect = (isReconnecting: boolean) => {\n      if (!isReconnecting) {\n        return;\n      }\n      const startedSessionId = this.startedSessionId;\n      const joinedSessionId = this.joinedSessionId;\n      const handleInitialized = () => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.info(`Restarting session ${startedSessionId}`);\n          this.startSession(startedSessionId).catch((error) => {\n            this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        if (typeof joinedSessionId === 'string') {\n          this.logger.info(`Rejoining session ${joinedSessionId}`);\n          this.joinSession(joinedSessionId).catch((error) => {\n            this.logger.error(`Unable to rejoin session ${joinedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleClose = () => {\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleError = (error:Error) => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n          this.logger.errorStack(error);\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      this.braidClient.addListener('initialized', handleInitialized);\n      this.braidClient.addListener('close', handleClose);\n      this.braidClient.addListener('error', handleError);\n    };\n    this.braidClient.data.addListener('set', this.handleBraidSet);\n    this.braidClient.addListener('close', this.handleBraidClose);\n    this.braidClient.addListener('closeRequested', this.handleBraidCloseRequested);\n    this.braidClient.addListener('reconnect', this.handleBraidReconnect);\n  }\n\n  get sessionClientMap():Map<number, Socket> {\n    const sessionId = this.sessionId;\n    if (typeof sessionId !== 'string') {\n      return new Map();\n    }\n    const sessionClientMap = this.sessionMap.get(sessionId);\n    if (typeof sessionClientMap === 'undefined') {\n      return new Map();\n    }\n    return sessionClientMap;\n  }\n\n  get sessionClientIds():Set<number> {\n    return new Set(this.sessionClientMap.keys());\n  }\n\n  async init() {\n    const promise = new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(new Error('Closed before initialization completed'));\n      };\n      const handleValue = (key:string, value:any) => {\n        if (key !== this.name) {\n          return;\n        }\n        if (typeof value === 'undefined') {\n          return;\n        }\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(error);\n      };\n      this.addListener('close', handleClose);\n      this.braidClient.data.addListener('set', handleValue);\n      this.braidClient.addListener('error', handleError);\n      handleValue(this.name, this.braidClient.data.get(this.name));\n    });\n    try {\n      await Promise.all([\n        this.braidClient.subscribe(this.name),\n        this.braidClient.addServerEventListener(this.name, this.handleMessage.bind(this)),\n      ]);\n      if (!this.active) {\n        return;\n      }\n      await promise;\n      if (!this.active) {\n        return;\n      }\n      await this.braidClient.startPublishing(this.publishName);\n    } catch (error) {\n      this.braidClient.logger.error(`Unable to join ${this.roomId}`);\n      throw error;\n    }\n  }\n\n  addToQueue(queueId:string | number, func:() => Promise<*>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      return queue.add(func);\n    }\n    const newQueue = new PQueue({ concurrency: 1 });\n    const promise = newQueue.add(func);\n    this.queueMap.set(queueId, newQueue);\n    newQueue.on('idle', () => {\n      this.queueMap.delete(queueId);\n    });\n    return promise;\n  }\n\n  async publish(type:string, value:Object, options?: { timeoutDuration?: number, CustomError?: Class<RequestError> } = {}):Promise<{ text:string, code:number }> {\n    await this._ready; // eslint-disable-line no-underscore-dangle\n    const timeoutDuration = typeof options.timeoutDuration === 'number' ? options.timeoutDuration : 5000;\n    const CustomError = typeof options.CustomError === 'function' ? options.CustomError : RequestError;\n    const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    return new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        reject(new ClientClosedError(`Client closed before ${type} request completed`));\n      };\n      const timeout = setTimeout(() => {\n        this.requestCallbackMap.delete(requestId);\n        this.removeListener('close', handleClose);\n        reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n      }, timeoutDuration);\n      const handleResponse = (success:boolean, code: number, text:string) => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        if (success) {\n          resolve({ code, text });\n          return;\n        }\n        reject(new CustomError(text, code));\n      };\n      this.addListener('close', handleClose);\n      this.requestCallbackMap.set(requestId, handleResponse);\n      this.braidClient.publish(this.publishName, { requestId, type, value });\n    });\n  }\n\n  isConnectedToClient(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return false;\n    }\n    return !!peer.connected;\n  }\n\n  async connectToPeer(socket:Socket) {\n    const { userId, serverId, socketId, clientId, socketHash } = socket;\n    const reconnectCount = this.peerReconnectMap.get(clientId) || 0;\n    const reconnectDelay = reconnectCount > 5 ? 30000 : 1000 * (reconnectCount * reconnectCount);\n    if (reconnectDelay > 0) {\n      this.logger.info(`Delaying connect by ${Math.round(reconnectDelay / 1000)} ${reconnectDelay === 1000 ? 'second' : 'seconds'} on attempt ${reconnectCount}`);\n      await new Promise((resolve) => {\n        const timeout = setTimeout(() => {\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        }, reconnectDelay);\n        const handleClose = () => {\n          clearTimeout(timeout);\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        };\n        const handleSocketLeave = ({ socketHash: oldSocketHash }:Socket) => {\n          if (socketHash !== oldSocketHash) {\n            return;\n          }\n          clearTimeout(timeout);\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        };\n        this.addListener('close', handleClose);\n        this.addListener('socketLeave', handleSocketLeave);\n      });\n      if (!this.socketMap.has(socketHash)) {\n        return;\n      }\n    }\n    const existingPeer = this.peerMap.get(clientId);\n    const options = Object.assign({}, { initiator: clientId > this.clientId }, this.peerOptions);\n    if (this.localConnectionsOnly) {\n      options.config = {\n        iceServers: [],\n      };\n    }\n    const peer = existingPeer || new SimplePeer(options);\n    this.peerMap.set(clientId, peer);\n    this.peerReconnectMap.set(clientId, reconnectCount + 1);\n    this.emit('peer', { clientId, peer });\n    const addPeerListeners = () => {\n      this.peerReconnectMap.set(clientId, 0);\n      const cleanup = () => {\n        peer.removeListener('signal', handleSignal);\n        peer.removeListener('stream', handleStream);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('peerReconnect', handlePeerReconnect);\n      };\n      const handleSignal = async (data:Object) => {\n        try {\n          await this.publish(SIGNAL, { serverId, socketId, data }, { CustomError: SignalError });\n        } catch (error) {\n          this.logger.error(`Unable to signal user ${userId} client ${clientId} closed`);\n          this.logger.errorStack(error);\n        }\n      };\n      const handleStream = (stream:MediaStream) => {\n        if (!this.sessionClientIds.has(clientId)) {\n          this.logger.error(`Received an unexpected stream from non-session user ${userId} client ${clientId}`);\n          stream.getTracks().forEach((track) => {\n            track.stop();\n            track.dispatchEvent(new Event('stop'));\n          });\n          return;\n        }\n        this.emit('stream', { stream, userId, serverId, socketId, clientId });\n      };\n      const handlePeerClose = () => {\n        this.logger.info(`Disconnected from user ${userId} client ${clientId}`);\n        cleanup();\n        this.emit('disconnect', { userId, serverId, socketId, clientId });\n        if (this.peerMap.has(clientId)) {\n          this.peerMap.delete(clientId);\n          this.connectToPeer(socket);\n          this.logger.warn(`Reconnecting to user ${userId} client ${clientId}`);\n        }\n      };\n      const handlePeerError = (error:Error) => {\n        this.logger.error(`Error in connection to user ${userId} client ${clientId}`);\n        this.logger.errorStack(error);\n        this.emit('peerError', { userId, serverId, socketId, clientId, error });\n      };\n      const handlePeerReconnect = () => {\n        this.logger.info(`Reconnected to user ${userId} client ${clientId}`);\n        cleanup();\n      };\n      peer.addListener('signal', handleSignal);\n      peer.addListener('stream', handleStream);\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('error', handlePeerError);\n      peer.addListener('peerReconnect', handlePeerReconnect);\n    };\n    if (peer.connected) {\n      peer.emit('peerReconnect');\n      addPeerListeners();\n      this.emit('connect', { userId, clientId, serverId, socketId, socketHash, peer });\n      return;\n    }\n    await new Promise((resolve) => {\n      const cleanup = () => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n      };\n      const timeout = setTimeout(() => {\n        cleanup();\n        resolve();\n      }, 5000);\n      const handleConnect = () => {\n        cleanup();\n        addPeerListeners();\n        this.emit('connect', { userId, clientId, serverId, socketId, socketHash, peer });\n        resolve();\n      };\n      const handleSignal = async (data:Object) => {\n        if (this.localConnectionsOnly) {\n          if (data.type === 'candidate') {\n            const { candidate: { candidate } } = data;\n            const address = candidate.split(' ')[4];\n            if (address !== '127.0.0.1' && address !== '::1') {\n              return;\n            }\n          } else if (data.type === 'answer' || data.type === 'offer') {\n            data.sdp = data.sdp.replace(/a=candidate[^\\s]+?\\s[^\\s]+?\\s[^\\s]+?\\s[^\\s]+?\\s(?!(127\\.0\\.0\\.1|::1)).*?\\r\\n/g, ''); // eslint-disable-line no-param-reassign\n          }\n        }\n        try {\n          await this.publish(SIGNAL, { serverId, socketId, data }, { CustomError: SignalError });\n        } catch (error) {\n          if (error instanceof SignalError && error.code === 404) {\n            this.logger.error(`Unable to signal user ${userId}, client ${clientId}, client does not exist`);\n            cleanup();\n            resolve();\n          } else {\n            this.logger.error(`Unable to signal user ${userId}, client ${clientId}`);\n            this.logger.errorStack(error);\n          }\n        }\n      };\n      const handleClose = () => {\n        cleanup();\n        resolve();\n      };\n      const handlePeerClose = () => {\n        this.logger.info(`Connection to user ${userId} client ${clientId} closed`);\n        cleanup();\n        if (this.peerMap.has(clientId)) {\n          this.peerMap.delete(clientId);\n          this.connectToPeer(socket);\n          this.logger.warn(`Reconnecting to user ${userId} client ${clientId}`);\n        }\n        resolve();\n      };\n      const handlePeerError = (error:Error) => {\n        cleanup();\n        this.logger.error(`Error connecting to ${userId}`);\n        this.logger.errorStack(error);\n        this.emit('peerError', { userId, serverId, socketId, clientId, error });\n        this.emit('error', error);\n        resolve();\n      };\n      const handleSocketLeave = ({ socketHash: oldSocketHash }:Socket) => {\n        if (socketHash !== oldSocketHash) {\n          return;\n        }\n        cleanup();\n        this.logger.warn(`Unable to connect to user ${userId} client ${clientId}, socket closed before connection was completed`);\n        resolve();\n      };\n      peer.addListener('error', handlePeerError);\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('connect', handleConnect);\n      peer.addListener('signal', handleSignal);\n      this.addListener('close', handleClose);\n      this.addListener('socketLeave', handleSocketLeave);\n      const signalQueue = this.signalQueueMap.get(clientId);\n      if (Array.isArray(signalQueue)) {\n        while (signalQueue.length > 0) {\n          const data = signalQueue.shift();\n          peer.signal(data);\n        }\n      }\n    });\n  }\n\n  async addStream(clientId:number, stream:MediaStream) {\n    const peer = await this.getConnectedPeer(clientId);\n    const addTrackHandler = (event:Event) => {\n      if (event instanceof MediaStreamTrackEvent) {\n        peer.addTrack(event.track);\n      }\n    };\n    this.peerAddTrackHandlerMap.set(stream, addTrackHandler);\n    stream.addEventListener('addtrack', addTrackHandler);\n    peer.addStream(stream);\n  }\n\n  async removeStream(clientId:number, stream:MediaStream) {\n    const peer = await this.getConnectedPeer(clientId);\n    const addTrackHandler = this.peerAddTrackHandlerMap.get(stream);\n    if (typeof addTrackHandler === 'function') {\n      stream.removeEventListener('addtrack', addTrackHandler);\n    }\n    peer.removeStream(stream);\n  }\n\n  async disconnectFromPeer({ clientId }:Socket) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return;\n    }\n    this.peerMap.delete(clientId);\n    peer.destroy();\n  }\n\n  async onIdle() {\n    while (this.queueMap.size > 0) {\n      for (const queue of this.queueMap.values()) {\n        await queue.onIdle();\n      }\n      // $FlowFixMe\n      await new Promise((resolve) => queueMicrotask(resolve));\n    }\n  }\n\n  didStartSession() {\n    if (!this.sessionId) {\n      return false;\n    }\n    return this.startedSessionId === this.sessionId;\n  }\n\n  async removeFromSession(clientId:number) {\n    const sessionId = this.sessionId;\n    if (sessionId === false) {\n      this.logger.warn(`Unable to remove client ${clientId} from session, not in a session`);\n      return;\n    }\n    const sessionClientMap = this.sessionClientMap;\n    const socket = sessionClientMap.get(clientId);\n    if (typeof socket === 'undefined') {\n      this.logger.warn(`Unable to remove client ${clientId}, client not in session ${sessionId}`);\n      return;\n    }\n    const { userId, socketId, serverId } = socket;\n    if (this.userId !== userId) {\n      this.preApprovedSessionUserIdSet.delete(userId);\n    }\n    await this.publish(REMOVE_FROM_SESSION, { userId, socketId, serverId }, { CustomError: RemoveFromSessionError });\n  }\n\n  async cancelInviteToSession(userId:string) {\n    const queue = this.queueMap.get(SESSION_QUEUE);\n    if (typeof queue !== 'undefined') {\n      await queue.onIdle();\n    }\n    const sessionId = this.sessionId; // eslint-disable-line no-undef\n    if (typeof sessionId === 'string') {\n      this.preApprovedSessionUserIdSet.delete(userId);\n      this.emit('cancelInvite', { sessionId, userId });\n      await this.publish(CANCEL_INVITE_TO_SESSION, { sessionId, userId }, { CustomError: CancelInviteToSessionError });\n    } else {\n      this.logger.warn(`Unable to cancel invite to user ${userId}, not in session`);\n    }\n  }\n\n  async inviteToSession(userId:string, options?:{ data?:Object, timeoutDuration?: number, sessionJoinHandler?: SessionJoinHandler } = {}) {\n    const { data, timeoutDuration = 30000, sessionJoinHandler } = options;\n    const queue = this.queueMap.get(SESSION_QUEUE);\n    if (typeof queue !== 'undefined') {\n      await queue.onIdle();\n    }\n    const hasSessionId = this.sessionId === 'string';\n    // $FlowFixMe\n    const sessionId = this.sessionId || globalThis.crypto.randomUUID(); // eslint-disable-line no-undef\n    let didCancel = false;\n    const handleCancelInviteBeforePublish = ({ sessionId: cancelledSessionId, userId: cancelledUserId }:{ sessionId:string, userId:string }) => {\n      if (cancelledSessionId !== sessionId) {\n        return;\n      }\n      if (cancelledUserId !== userId) {\n        return;\n      }\n      didCancel = true;\n    };\n    const leaveSession = async () => {\n      if (hasSessionId) {\n        return;\n      }\n      try {\n        await this.leaveSession();\n      } catch (error) {\n        this.logger.error('Unable to leave session');\n        this.logger.errorStack(error);\n      }\n    };\n    this.addListener('cancelInvite', handleCancelInviteBeforePublish);\n    try {\n      if (hasSessionId) {\n        this.preApprovedSessionUserIdSet.add(userId);\n        await this.publish(INVITE_TO_SESSION, { userId, sessionId, data }, { CustomError: InviteToSessionError });\n      } else {\n        await this.startSession(sessionId, sessionJoinHandler);\n        this.preApprovedSessionUserIdSet.add(userId);\n        await this.publish(INVITE_TO_SESSION, { userId, sessionId, data }, { CustomError: InviteToSessionError });\n      }\n    } catch (error) {\n      throw error;\n    } finally {\n      this.removeListener('cancelInvite', handleCancelInviteBeforePublish);\n    }\n    if (didCancel) {\n      await leaveSession();\n      throw new InvitationCancelledError(`Invitation to user ${userId} was cancelled`);\n    }\n    await new Promise((resolve, reject) => {\n      const cleanup = () => {\n        clearTimeout(timeout);\n        this.removeListener('sessionJoin', handleSessionJoin);\n        this.removeListener('close', handleClose);\n        this.removeListener('leave', handleLeave);\n        this.removeListener('session', handleSession);\n        this.removeListener('socketLeave', handleSocketLeave);\n        this.removeListener('cancelInvite', handleCancelInvite);\n        this.inviteDeclineHandlerMap.delete(`${userId}:${sessionId}`);\n      };\n      const timeout = setTimeout(async () => {\n        cleanup();\n        await leaveSession();\n        reject(new InvitationTimeoutError(`Invitation timed out after ${Math.round(timeoutDuration / 100) / 10} seconds`));\n      }, timeoutDuration);\n      const handleCancelInvite = async ({ sessionId: cancelledSessionId, userId: cancelledUserId }:{ sessionId:string, userId:string }) => {\n        if (cancelledSessionId !== sessionId) {\n          return;\n        }\n        if (cancelledUserId !== userId) {\n          return;\n        }\n        cleanup();\n        await leaveSession();\n        reject(new InvitationCancelledError(`Invitation to user ${userId} was cancelled`));\n      };\n      const handleSessionJoin = (socket: Socket) => {\n        if (socket.sessionId !== sessionId) {\n          return;\n        }\n        if (socket.userId !== userId) {\n          return;\n        }\n        cleanup();\n        resolve();\n      };\n      // Only listen for socket leave events if the user is inviting themselves\n      const handleSocketLeave = async (socket: Socket) => {\n        if (socket.userId !== this.userId) {\n          return;\n        }\n        let isOnlySocketForUserId = true;\n        for (const socketData of this.socketMap.values()) {\n          if (socketData.userId !== this.userId) {\n            continue;\n          }\n          if (socketData.clientId === this.clientId) {\n            continue;\n          }\n          isOnlySocketForUserId = false;\n        }\n        if (isOnlySocketForUserId) {\n          cleanup();\n          await leaveSession();\n          reject(new InvitedUserLeftError(`User ${userId} left before accepting the invitation`));\n        }\n      };\n      const handleSession = (newSessionId:string | false) => {\n        if (newSessionId === sessionId) {\n          return;\n        }\n        cleanup();\n        resolve();\n      };\n      const handleClose = () => {\n        cleanup();\n        reject(new ClientClosedError('Closed before invite'));\n      };\n      const handleDecline = async () => {\n        cleanup();\n        await leaveSession();\n        reject(new InvitationDeclinedError('Invitation declined'));\n      };\n      const handleLeave = async (peerUserId:string) => {\n        if (userId !== peerUserId) {\n          return;\n        }\n        cleanup();\n        await leaveSession();\n        reject(new InvitedUserLeftError(`User ${userId} left before accepting the invitation`));\n      };\n      this.inviteDeclineHandlerMap.set(`${userId}:${sessionId || ''}`, handleDecline);\n      this.addListener('sessionJoin', handleSessionJoin);\n      this.addListener('close', handleClose);\n      this.addListener('leave', handleLeave);\n      this.addListener('session', handleSession);\n      if (this.userId === userId) {\n        this.addListener('socketLeave', handleSocketLeave);\n      }\n      this.addListener('cancelInvite', handleCancelInvite);\n    });\n  }\n\n  async startSession(sessionId:string, sessionJoinHandler?: SessionJoinHandler) {\n    this.preApprovedSessionUserIdSet.clear();\n    const previousStartedSessionId = this.startedSessionId;\n    this.startedSessionId = sessionId;\n    try {\n      await this.addToQueue(SESSION_QUEUE, () => this.publish(START_SESSION, { sessionId }, { CustomError: StartSessionError }));\n    } catch (error) {\n      this.startedSessionId = previousStartedSessionId;\n      throw error;\n    }\n    delete this.joinedSessionId;\n    if (typeof sessionJoinHandler === 'function') {\n      const wrappedSessionJoinHandler = async (values) => {\n        if (this.preApprovedSessionUserIdSet.has(values.userId)) {\n          return [true, 200, 'Authorized'];\n        }\n        if (this.userId === values.userId) {\n          return [true, 200, 'Authorized'];\n        }\n        if (typeof sessionJoinHandler === 'function') {\n          return sessionJoinHandler(values);\n        }\n        return [true, 200, 'Authorized'];\n      };\n      this.sessionJoinHandlerMap.set(sessionId, wrappedSessionJoinHandler);\n    } else {\n      this.sessionJoinHandlerMap.set(sessionId, () => [true, 200, 'Authorized']);\n    }\n  }\n\n  didJoinSession() {\n    if (!this.sessionId) {\n      return false;\n    }\n    return this.joinedSessionId === this.sessionId;\n  }\n\n  async joinSession(sessionId:string, timeoutDuration?: number = 30000) {\n    const previousJoinedSessionId = this.joinedSessionId;\n    this.joinedSessionId = sessionId;\n    try {\n      await this.addToQueue(SESSION_QUEUE, () => this.publish(JOIN_SESSION, { sessionId, timeoutDuration }, { CustomError: JoinSessionError, timeoutDuration: timeoutDuration + 5000 }));\n    } catch (error) {\n      this.joinedSessionId = previousJoinedSessionId;\n      throw error;\n    }\n    const startedSessionId = this.startedSessionId;\n    delete this.startedSessionId;\n    if (typeof startedSessionId === 'string') {\n      this.sessionJoinHandlerMap.delete(startedSessionId);\n    }\n  }\n\n  async abortJoinSession() {\n    await this.publish(ABORT_SESSION_JOIN_REQUEST, { }, { CustomError: AbortSessionJoinError });\n  }\n\n  async leaveSession() {\n    try {\n      await this.addToQueue(SESSION_QUEUE, () => this.publish(LEAVE_SESSION, {}, { CustomError: LeaveSessionError }));\n      const startedSessionId = this.startedSessionId;\n      delete this.startedSessionId;\n      delete this.joinedSessionId;\n      if (typeof startedSessionId === 'string') {\n        this.sessionJoinHandlerMap.delete(startedSessionId);\n      }\n    } catch (error) {\n      if (error instanceof ClientClosedError) {\n        return;\n      }\n      throw error;\n    }\n  }\n\n  async handleMessage(message:{ requestId?: number, type:string, value:Object }) {\n    if (typeof message !== 'object') {\n      this.logger.error('Invalid message format');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    const { requestId, type, value } = message;\n    if (typeof type !== 'string') {\n      this.logger.error('Invalid message format, type property should be of type \"string\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (typeof value !== 'object') {\n      this.logger.error('Invalid message format, value property should be of type \"object\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (type === RESPONSE && typeof requestId === 'number') {\n      const callback = this.requestCallbackMap.get(requestId);\n      if (typeof callback !== 'function') {\n        this.logger.error(`Callback for request ${requestId} does not exist`);\n        return;\n      }\n      const { success, code, text } = value;\n      if (typeof success !== 'boolean') {\n        this.logger.error('Response message contained an invalid value success property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value success property');\n        return;\n      }\n      if (typeof code !== 'number') {\n        this.logger.error('Response message contained an invalid value code property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value code property');\n        return;\n      }\n      if (typeof text !== 'string') {\n        this.logger.error('Response message contained an invalid value text property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value text property');\n        return;\n      }\n      callback(success, code, text);\n      return;\n    }\n    switch (type) {\n      case SIGNAL:\n        try {\n          const {\n            clientId,\n            serverId,\n            socketId,\n            data,\n          } = value;\n          if (typeof serverId !== 'number') {\n            this.logger.error('Signal message contained an invalid server ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof socketId !== 'number') {\n            this.logger.error('Signal message contained an invalid socket ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof data !== 'object') {\n            this.logger.error('Signal message contained an invalid data property');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const peer = this.peerMap.get(clientId);\n          if (typeof peer === 'undefined') {\n            const signalQueue = this.signalQueueMap.get(clientId);\n            if (Array.isArray(signalQueue)) {\n              signalQueue.push(data);\n              return;\n            }\n            this.signalQueueMap.set(clientId, [data]);\n            return;\n          }\n          if (peer.destroyed || peer.destroying) {\n            return;\n          }\n          peer.signal(data);\n        } catch (error) {\n          this.logger.error('Unable to process signal message');\n          this.logger.errorStack(error);\n        }\n        break;\n      case DECLINE_INVITE_TO_SESSION:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Decline invite request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Decline invite request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const inviteDeclineHandler = this.inviteDeclineHandlerMap.get(requestHash);\n          if (typeof inviteDeclineHandler === 'function') {\n            inviteDeclineHandler();\n          }\n        } catch (error) {\n          this.logger.error('Unable to process decline invite request');\n          this.logger.errorStack(error);\n        }\n        break;\n      case ABORT_SESSION_JOIN_REQUEST:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Abort session join request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Abort session join request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const existing = this.sessionJoinRequestMap.get(requestHash);\n          if (!Array.isArray(existing)) {\n            this.logger.warn(`Unable to abort session join request for user ${userId} and session ${sessionId}, request does not exist`);\n            return;\n          }\n          this.logger.warn(`Aborting session join request for user ${userId} and session ${sessionId}`);\n          existing[1].abort();\n        } catch (error) {\n          this.logger.error('Unable to process session abort join request');\n          this.logger.errorStack(error);\n        }\n        break;\n      case SESSION_JOIN_REQUEST:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Session join request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Session join request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const existing = this.sessionJoinRequestMap.get(requestHash);\n          if (Array.isArray(existing)) {\n            this.logger.warn(`Session join request for user ${userId} and session ${sessionId} already exists`);\n            await existing[0];\n            return;\n          }\n          const sessionJoinHandler = this.sessionJoinHandlerMap.get(sessionId);\n          if (typeof sessionJoinHandler !== 'function') {\n            this.logger.error(`Handler for session ${sessionId} does not exist`);\n            return;\n          }\n          const abortController = new AbortController();\n          abortController.signal.addEventListener('abort', () => {\n            this.sessionJoinRequestMap.delete(requestHash);\n          });\n          const promise = (async () => {\n            let response = [false, 500, 'Error in sesssion join handler'];\n            try {\n              response = await sessionJoinHandler({ userId, sessionId, abortSignal: abortController.signal });\n            } catch (error) {\n              this.logger.error(`Unable to respond to session join request for user ${userId} and session ${sessionId}, error in session join handler`);\n              this.logger.errorStack(error);\n            }\n            if (abortController.signal.aborted) {\n              this.logger.warn(`Session join request for user ${userId} and session ${sessionId} was aborted`);\n              return;\n            }\n            try {\n              await this.publish(SESSION_JOIN_RESPONSE, {\n                userId,\n                sessionId,\n                success: response[0],\n                code: response[1],\n                text: response[2],\n              }, { CustomError: SessionJoinResponseError });\n            } catch (error) {\n              this.logger.error(`Unable to send session join response for user ${userId} and session ${sessionId}`);\n              this.logger.errorStack(error);\n            }\n            this.sessionJoinRequestMap.delete(requestHash);\n          })();\n          this.sessionJoinRequestMap.set(requestHash, [promise, abortController]);\n          await promise;\n        } catch (error) {\n          this.logger.error('Unable to process session join request');\n          this.logger.errorStack(error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown message type ${type}`);\n    }\n  }\n\n  async getConnectedPeer(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer !== 'undefined' && peer.connected) {\n      return peer;\n    }\n    return new Promise((resolve, reject) => {\n      let _peer; // eslint-disable-line no-underscore-dangle\n      const cleanup = () => {\n        this.removeListener('sessionClientLeave', handleSessionClientLeave);\n        this.removeListener('connect', handleConnect);\n        this.removeListener('peer', handlePeer);\n        if (typeof _peer !== 'undefined') {\n          _peer.removeListener('close', handlePeerClose);\n          _peer.removeListener('error', handlePeerError);\n        }\n      };\n      const handlePeerClose = () => {\n        cleanup();\n        reject(new Error(`Peer ${clientId} closed before connection was established`));\n      };\n      const handlePeerError = (error:Error) => {\n        cleanup();\n        reject(error);\n      };\n      const handlePeer = ({ clientId: newClientId, peer: _p }) => {\n        if (newClientId !== clientId) {\n          return;\n        }\n        _peer = _p;\n        _p.addListener('close', handlePeerClose);\n        _p.addListener('error', handlePeerError);\n      };\n      const handleConnect = ({ clientId: newClientId, peer: _p }) => {\n        if (newClientId !== clientId) {\n          return;\n        }\n        cleanup();\n        resolve(_p);\n      };\n      const handleSessionClientLeave = (oldClientId:number) => {\n        if (clientId !== oldClientId) {\n          return;\n        }\n        cleanup();\n        reject(new Error(`Client ${clientId} left before connection was established`));\n      };\n      this.addListener('sessionClientLeave', handleSessionClientLeave);\n      this.addListener('connect', handleConnect);\n      this.addListener('peer', handlePeer);\n    });\n  }\n\n  async handleSessionClientJoin(clientId:number) {\n    let interval;\n    let _peer; // eslint-disable-line no-underscore-dangle\n    let offset = 0;\n    const abortController = new AbortController();\n    const abortSignal = abortController.signal;\n    const cleanup = () => {\n      abortController.abort();\n      this.removeListener('sessionClientLeave', handleSessionClientLeave);\n      if (typeof _peer !== 'undefined') {\n        _peer.removeListener('close', handlePeerClose);\n        _peer.removeListener('data', handlePeerData);\n      }\n      this.data.removeListener('publish', handleDataPublish);\n      clearInterval(interval);\n    };\n    const handlePeerClose = () => {\n      cleanup();\n      if (this.sessionClientIds.has(clientId)) {\n        this.handleSessionClientJoin(clientId);\n      }\n    };\n    const handleSessionClientLeave = (oldClientId:number) => {\n      if (clientId !== oldClientId) {\n        return;\n      }\n      cleanup();\n    };\n    const handleDataPublish = (queue:[Array<*>, Array<*>]) => {\n      sendToPeer(new ObservedRemoveDump(queue));\n    };\n    const sendToPeer = (unpacked: any) => {\n      if (typeof peer === 'undefined') {\n        throw new Error('Peer does not exist');\n      }\n      peer.send(pack(unpacked));\n    };\n    const handlePeerData = (packed:Buffer) => {\n      const message = unpack(packed);\n      if (message instanceof Ping) {\n        sendToPeer(new Pong(message.timestamp, Date.now()));\n      } else if (message instanceof Pong) {\n        offset = (Date.now() - message.wallclock) - (performance.now() - message.timestamp) / 2;\n        this.sessionClientOffsetMap.set(clientId, offset);\n      } else if (message instanceof ObservedRemoveDump) {\n        this.data.process(message.queue);\n      }\n    };\n    this.addListener('sessionClientLeave', handleSessionClientLeave);\n    if (!this.isConnectedToClient(clientId)) {\n      await new Promise((resolve) => {\n        const handleConnect = ({ clientId: newClientId }) => {\n          if (newClientId !== clientId) {\n            return;\n          }\n          this.removeListener('connect', handleConnect);\n          abortSignal.removeEventListener('abort', handleAbort);\n          resolve();\n        };\n        const handleAbort = () => {\n          this.removeListener('connect', handleConnect);\n          abortSignal.removeEventListener('abort', handleAbort);\n          resolve();\n        };\n        this.addListener('connect', handleConnect);\n        abortSignal.addEventListener('abort', handleAbort);\n      });\n      if (abortSignal.aborted) {\n        return;\n      }\n    }\n    const peer = this.peerMap.get(clientId);\n    _peer = peer;\n    if (typeof peer === 'undefined') {\n      throw new Error('Peer does not exist');\n    }\n    peer.addListener('close', handlePeerClose);\n    peer.addListener('data', handlePeerData);\n    interval = setInterval(() => {\n      peer.send(pack(new Ping(performance.now())));\n    }, 1000);\n    peer.send(pack(new Ping(performance.now())));\n    this.data.addListener('publish', handleDataPublish);\n    handleDataPublish(this.data.dump());\n  }\n\n  declineInviteToSession(data: Object) {\n    return this.publish(DECLINE_INVITE_TO_SESSION, data, { CustomError: DeclineInviteToSessionError });\n  }\n\n  reset() {\n    clearTimeout(this.leaveSessionAfterLastClientTimeout);\n    this.handleBraidSet(this.name, []);\n  }\n\n  async close() {\n    this.reset();\n    this.active = false;\n    this.emit('close');\n    try {\n      await this.onIdle();\n    } catch (error) {\n      this.logger.error('Error in queue during close');\n      this.logger.errorStack(error);\n    }\n    this.braidClient.data.removeListener('set', this.handleBraidSet);\n    this.braidClient.removeListener('close', this.handleBraidClose);\n    this.braidClient.removeListener('closeRequested', this.handleBraidCloseRequested);\n    this.braidClient.removeListener('reconnect', this.handleBraidReconnect);\n    this.braidClient.stopPublishing(this.publishName);\n    this.braidClient.removeServerEventListener(this.name);\n    this.braidClient.unsubscribe(this.name);\n  }\n}\n\nconst publish = (braidClient:BraidClient, abortSignal: AbortSignal, roomId:string, type:string, value:Object, options?: { timeoutDuration?: number, CustomError?: Class<RequestError> } = {}) => {\n  const name = `signal/${roomId}`;\n  const publishName = `signal/${roomId}/${Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(36)}`;\n  const timeoutDuration = typeof options.timeoutDuration === 'number' ? options.timeoutDuration : 5000;\n  const CustomError = typeof options.CustomError === 'function' ? options.CustomError : RequestError;\n  const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n  return new Promise((resolve, reject) => {\n    const cleanup = () => {\n      clearTimeout(timeout);\n      abortSignal.removeEventListener('abort', handleAbort);\n      braidClient.removeServerEventListener(name);\n      braidClient.stopPublishing(publishName);\n    };\n    const handleAbort = () => {\n      cleanup();\n      reject(new AbortError(`Publish request aborted before ${type} request completed`));\n    };\n    const timeout = setTimeout(() => {\n      cleanup();\n      reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n    }, timeoutDuration);\n    const handleMessage = (message:{ requestId?: number, type:string, value:Object }) => {\n      if (typeof message !== 'object') {\n        return;\n      }\n      const { requestId: responseId, type: responseType, value: responseValue } = message;\n      if (responseType !== RESPONSE) {\n        return;\n      }\n      if (responseId !== requestId) {\n        return;\n      }\n      const { success, code, text } = responseValue;\n      cleanup();\n      if (success) {\n        resolve({ code, text });\n        return;\n      }\n      reject(new CustomError(text, code));\n    };\n    abortSignal.addEventListener('abort', handleAbort);\n    Promise.all([\n      braidClient.startPublishing(publishName),\n      braidClient.addServerEventListener(name, handleMessage),\n    ]).then(() => {\n      braidClient.publish(publishName, { requestId, type, value });\n    }).catch((error) => {\n      cleanup();\n      reject(error);\n    });\n  });\n};\n\nBond.declineInviteToSession = (braidClient: BraidClient, abortSignal:AbortSignal, data: { roomId: string }) => {\n  const { roomId } = data;\n  return publish(braidClient, abortSignal, roomId, DECLINE_INVITE_TO_SESSION, data, { CustomError: DeclineInviteToSessionError });\n};\n\nBond.getLocalRoomId = async (braidClient: BraidClient, _roomId:string | false, userId:string, abortSignal: AbortSignal, options?: Options = {}) => {\n  const bond = new Bond(braidClient, AUTOMATIC_DISCOVERY_ROOM_ID, userId, Object.assign({}, options, { localConnectionsOnly: true }));\n  let roomId = _roomId; // eslint-disable-line no-undef\n  const localKey = bond.clientId.toString(36);\n  const logger = options.logger || braidClient.logger;\n  const negotiatedRoomId = await new Promise((resolve, reject) => {\n    const handleSession = () => {\n      bond.data.set(localKey, roomId);\n    };\n    const handleConnect = ({ clientId, socketHash }:Socket) => {\n      const socket = bond.socketMap.get(socketHash);\n      if (typeof socket === 'undefined') {\n        return;\n      }\n      const { sessionId } = socket;\n      if (typeof sessionId !== 'string') {\n        return;\n      }\n      if (clientId > bond.clientId) {\n        bond.joinSession(sessionId).catch((error) => {\n          logger.error('Unable to join session during automatic linking');\n          logger.errorStack(error);\n        });\n      }\n    };\n    const handleSessionJoin = ({ clientId, sessionId }:Socket) => {\n      if (bond.sessionId === sessionId) {\n        return;\n      }\n      if (!bond.isConnectedToClient(clientId)) {\n        return;\n      }\n      if (typeof sessionId !== 'string') {\n        return;\n      }\n      if (clientId > bond.clientId) {\n        bond.joinSession(sessionId).catch((error) => {\n          logger.error('Unable to join session during automatic linking');\n          logger.errorStack(error);\n        });\n      }\n    };\n    const handleSet = (key:string, remoteRoomId:string | false) => {\n      if (key === localKey) {\n        return;\n      }\n      const clientId = parseInt(key, 36);\n      if (!bond.isConnectedToClient(clientId) && clientId !== bond.clientId) {\n        return;\n      }\n      if (roomId === false && remoteRoomId === false && clientId < bond.clientId) {\n        roomId = globalThis.crypto.randomUUID(); // eslint-disable-line no-undef\n        bond.data.set(localKey, roomId);\n        return;\n      } else if (typeof roomId === 'string' && typeof remoteRoomId === 'string' && clientId > bond.clientId) {\n        roomId = remoteRoomId;\n        bond.data.set(localKey, remoteRoomId);\n      } else if (roomId === false && typeof remoteRoomId === 'string') {\n        roomId = remoteRoomId;\n        bond.data.set(localKey, remoteRoomId);\n      } else if (typeof roomId !== 'string' || roomId !== remoteRoomId) {\n        return;\n      }\n      abortSignal.removeEventListener('abort', handleAbort);\n      bond.removeListener('close', handleClose);\n      bond.removeListener('connect', handleConnect);\n      bond.removeListener('sessionJoin', handleSessionJoin);\n      bond.removeListener('session', handleSession);\n      bond.data.removeListener('set', handleSet);\n      resolve(roomId);\n    };\n    const handleClose = () => {\n      abortSignal.removeEventListener('abort', handleAbort);\n      bond.removeListener('close', handleClose);\n      bond.removeListener('connect', handleConnect);\n      bond.removeListener('sessionJoin', handleSessionJoin);\n      bond.removeListener('session', handleSession);\n      bond.data.removeListener('set', handleSet);\n      reject(new ClientClosedError('Client closed before local room ID was discovered'));\n    };\n    const handleAbort = async () => {\n      abortSignal.removeEventListener('abort', handleAbort);\n      bond.removeListener('close', handleClose);\n      bond.removeListener('connect', handleConnect);\n      bond.removeListener('sessionJoin', handleSessionJoin);\n      bond.removeListener('session', handleSession);\n      bond.data.removeListener('set', handleSet);\n      try {\n        const queue = bond.queueMap.get(SESSION_QUEUE);\n        if (typeof queue !== 'undefined') {\n          await queue.onIdle();\n        }\n        await bond.close();\n      } catch (error) {\n        logger.error('Unable to close before throwing abort error');\n        logger.errorStack(error);\n      }\n      reject(new AbortError('Local room ID discovery aborted'));\n    };\n    abortSignal.addEventListener('abort', handleAbort);\n    bond.data.addListener('set', handleSet);\n    bond.addListener('close', handleClose);\n    bond.addListener('connect', handleConnect);\n    bond.addListener('sessionJoin', handleSessionJoin);\n    bond.addListener('session', handleSession);\n    bond.startSession(globalThis.crypto.randomUUID()); // eslint-disable-line no-undef\n  });\n  await bond.close();\n  return negotiatedRoomId;\n};\n\n"],"file":"index.js"}