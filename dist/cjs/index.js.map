{"version":3,"sources":["../../src/index.js"],"names":["getSocketMap","values","Map","map","x","socketHash","socketId","serverId","userId","clientId","sessionId","getSessionId","getPeerIds","Set","getSessionMap","socketMap","socket","sessionClientMap","get","set","Bond","braidClient","roomId","options","active","Math","floor","random","Number","MAX_SAFE_INTEGER","localConnectionsOnly","name","publishName","toString","logger","peerOptions","userIds","peerMap","peerReconnectMap","queueMap","sessionMap","inviteDeclineHandlerMap","requestCallbackMap","signalQueueMap","peerDisconnectTimeoutMap","sessionJoinHandlerMap","sessionJoinRequestMap","data","ObservedRemoveMap","bufferPublishing","sessionClientOffsetMap","preApprovedSessionUserIdSet","peerAddTrackHandlerMap","_ready","init","ready","joinSession","handleSessionClientJoin","sessionClientIds","size","clearTimeout","leaveSessionAfterLastClientTimeout","interval","_peer","offset","peerIsClosing","abortController","AbortController","abortSignal","signal","cleanup","abort","removeListener","handleSessionClientLeave","handlePeerClose","handlePeerData","handleDataPublish","clearInterval","has","oldClientId","queue","sendToPeer","ObservedRemoveDump","unpacked","peer","Error","connected","warn","send","packed","message","Ping","Pong","timestamp","Date","now","wallclock","performance","process","PeerEvent","emit","type","args","Close","info","code","delete","addListener","isConnectedToClient","Promise","resolve","handleConnect","newClientId","removeEventListener","handleAbort","addEventListener","aborted","setInterval","dump","handleSocketJoin","socketData","addToQueue","connectToPeer","handleSocketLeave","setTimeout","disconnectFromPeer","leaveSession","error","errorStack","handleSession","clear","handleBraidSet","key","oldSessionId","newSessionId","oldSocketMap","newSocketMap","oldUserIds","newUserIds","oldSessionMap","newSessionMap","oldLocalSessionSocketMap","newLocalSessionSocketMap","peerUserId","oldSessionSocketMap","newSessionSocketMap","handleBraidClose","reset","handleBraidCloseRequested","close","handleBraidReconnect","isReconnecting","startedSessionId","joinedSessionId","handleInitialized","startSession","catch","handleClose","handleError","keys","promise","reject","handleValue","value","all","subscribe","addServerEventListener","handleMessage","bind","startPublishing","queueId","func","add","newQueue","PQueue","concurrency","on","timeoutDuration","CustomError","RequestError","requestId","timeout","ClientClosedError","RequestTimeoutError","handleResponse","success","text","publish","reconnectCount","reconnectDelay","round","oldSocketHash","existingPeer","Object","assign","initiator","config","iceServers","SimplePeer","addPeerListeners","handleSignal","handleStream","handlePeerError","handlePeerReconnect","SIGNAL","SignalError","stream","getTracks","forEach","track","stop","dispatchEvent","Event","candidate","addressParts","split","join","sdp","replace","signalQueue","Array","isArray","length","shift","getConnectedPeer","addTrackHandler","event","MediaStreamTrackEvent","addTrack","addStream","removeStream","destroy","onIdle","queueMicrotask","REMOVE_FROM_SESSION","RemoveFromSessionError","SESSION_QUEUE","CANCEL_INVITE_TO_SESSION","CancelInviteToSessionError","sessionJoinHandler","hasSessionId","globalThis","crypto","randomUUID","didCancel","handleCancelInviteBeforePublish","cancelledSessionId","cancelledUserId","INVITE_TO_SESSION","InviteToSessionError","InvitationCancelledError","handleSessionJoin","handleLeave","handleCancelInvite","InvitationTimeoutError","isOnlySocketForUserId","InvitedUserLeftError","handleDecline","InvitationDeclinedError","previousStartedSessionId","START_SESSION","StartSessionError","wrappedSessionJoinHandler","previousJoinedSessionId","JOIN_SESSION","JoinSessionError","ABORT_SESSION_JOIN_REQUEST","AbortSessionJoinError","LEAVE_SESSION","LeaveSessionError","JSON","stringify","RESPONSE","callback","push","destroyed","destroying","DECLINE_INVITE_TO_SESSION","requestHash","inviteDeclineHandler","existing","SESSION_JOIN_REQUEST","response","SESSION_JOIN_RESPONSE","SessionJoinResponseError","handlePeer","_p","DeclineInviteToSessionError","stopPublishing","removeServerEventListener","unsubscribe","EventEmitter","AbortError","responseId","responseType","responseValue","then","declineInviteToSession","getLocalRoomId","_roomId","bond","AUTOMATIC_DISCOVERY_ROOM_ID","localKey","negotiatedRoomId","handleSet","remoteRoomId","parseInt"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport ObservedRemoveMap from 'observed-remove/dist/map';\nimport type BraidClient from '@bunchtogether/braid-client';\nimport SimplePeer from 'simple-peer';\nimport PQueue from 'p-queue';\nimport {\n  pack,\n  unpack,\n} from 'msgpackr';\nimport {\n  SIGNAL,\n  START_SESSION,\n  LEAVE_SESSION,\n  JOIN_SESSION,\n  INVITE_TO_SESSION,\n  DECLINE_INVITE_TO_SESSION,\n  SESSION_QUEUE,\n  ABORT_SESSION_JOIN_REQUEST,\n  SESSION_JOIN_REQUEST,\n  SESSION_JOIN_RESPONSE,\n  REMOVE_FROM_SESSION,\n  CANCEL_INVITE_TO_SESSION,\n  RESPONSE,\n  AUTOMATIC_DISCOVERY_ROOM_ID,\n} from './constants';\nimport {\n  AbortError,\n  RequestError,\n  StartSessionError,\n  RequestTimeoutError,\n  JoinSessionError,\n  LeaveSessionError,\n  SignalError,\n  SessionJoinResponseError,\n  ClientClosedError,\n  InviteToSessionError,\n  InvitationDeclinedError,\n  InvitedUserLeftError,\n  InvitationTimeoutError,\n  DeclineInviteToSessionError,\n  RemoveFromSessionError,\n  CancelInviteToSessionError,\n  InvitationCancelledError,\n  AbortSessionJoinError,\n} from './errors';\nimport {\n  Ping,\n  Pong,\n  ObservedRemoveDump,\n  PeerEvent,\n  Close,\n} from './messagepack';\n\ntype Logger = {\n  debug: (string | number, ...any) => void,\n  info: (string | number, ...any) => void,\n  warn: (string | number, ...any) => void,\n  error: (string | number, ...any) => void,\n  errorStack: (error:Error | MediaError) => void,\n};\n\ntype Options = {\n  peerOptions?: Object,\n  logger?: Logger,\n  sessionId?: string,\n  localConnectionsOnly?: boolean\n}\n\nexport type SessionJoinHandler = ({ sessionId: string, userId: string, abortSignal: AbortSignal }) => [boolean, number, string] | Promise<[boolean, number, string]>;\nexport type Connection = [number, number, string, number, string | false];\nexport type Socket = { socketHash: string, socketId: number, serverId: number, userId: string, clientId: number, sessionId: string | false };\n\nconst getSocketMap = (values?:Array<Connection>):Map<string, Socket> => {\n  if (typeof values === 'undefined') {\n    return new Map();\n  }\n  return new Map(values.map((x) => {\n    const socketHash = `${x[0]}:${x[1]}`;\n    return [socketHash, { socketHash, socketId: x[0], serverId: x[1], userId: x[2], clientId: x[3], sessionId: x[4] }];\n  }));\n};\n\nconst getSessionId = (values?:Array<Connection>, clientId:number):(string | false) => {\n  if (typeof values === 'undefined') {\n    return false;\n  }\n  for (const x of values) {\n    if (x[3] === clientId) {\n      return x[4] || false;\n    }\n  }\n  return false;\n};\n\nconst getPeerIds = (values?:Array<Connection>):Set<string> => {\n  if (typeof values === 'undefined') {\n    return new Set();\n  }\n  return new Set(values.map((x) => x[2]));\n};\n\nconst getSessionMap = (socketMap:Map<string, Socket>):Map<string | false, Map<number, Socket>> => {\n  const map = new Map();\n  for (const socket of socketMap.values()) {\n    const { clientId, sessionId } = socket;\n    const sessionClientMap = map.get(sessionId);\n    if (typeof sessionClientMap === 'undefined') {\n      map.set(sessionId, new Map([[clientId, socket]]));\n    } else {\n      sessionClientMap.set(clientId, socket);\n    }\n  }\n  return map;\n};\n\nexport class Bond extends EventEmitter {\n  static declineInviteToSession: (BraidClient, AbortSignal, { roomId: string, userId: string, clientId: number, sessionId: string, data: Object }) => Promise<{ code:number, text:string }>;\n  static getLocalRoomId: (BraidClient, string | false, string, AbortSignal, Options) => Promise<string>;\n\n  declare roomId: string;\n  declare clientId: number;\n  declare userId: string;\n  declare name: string;\n  declare publishName: string;\n  declare braidClient: BraidClient;\n  declare logger: Logger;\n  declare _ready: Promise<void>;\n  declare ready: Promise<void>;\n  declare socketMap: Map<string, Socket>;\n  declare sessionMap: Map<string | false, Map<number, Socket>>;\n  declare userIds: Set<string>;\n  declare peerOptions: void | Object;\n  declare peerMap: Map<number, SimplePeer>;\n  declare peerReconnectMap: Map<number, number>;\n  declare queueMap: Map<string | number, PQueue>;\n  declare handleSocketJoin: (Socket) => void;\n  declare handleSocketLeave: (Socket) => void;\n  declare handleSessionClientLeave: () => void;\n  declare handleSessionClientJoin: (number) => Promise<void>;\n  declare handleSession: () => void;\n  declare handleBraidSet: (string, any) => void;\n  declare handleBraidClose: () => void;\n  declare handleBraidCloseRequested: () => void;\n  declare handleBraidReconnect: (boolean) => void;\n  declare handlePeerData: (Buffer) => void;\n  declare signalQueueMap: Map<number, Array<[string, Object]>>;\n  declare requestCallbackMap: Map<number, (boolean, number, string) => void | Promise<void>>;\n  declare inviteDeclineHandlerMap: Map<string, () => Promise<void>>;\n  declare sessionId: false | string;\n  declare startedSessionId: void | string;\n  declare joinedSessionId: void | string;\n  declare active: boolean;\n  declare peerDisconnectTimeoutMap: Map<number, TimeoutID>;\n  declare sessionJoinHandlerMap: Map<string, SessionJoinHandler>;\n  declare sessionJoinRequestMap: Map<string, [Promise<void>, AbortController]>;\n  declare data: ObservedRemoveMap<string | number, any>;\n  declare sessionClientOffsetMap: Map<number, number>;\n  declare leaveSessionAfterLastClientTimeout: void | TimeoutID;\n  declare preApprovedSessionUserIdSet: Set<string>;\n  declare peerAddTrackHandlerMap: Map<Object, (Event) => void>;\n  declare localConnectionsOnly: boolean;\n\n  constructor(braidClient: BraidClient, roomId:string, userId:string, options?: Options = {}) {\n    super();\n    this.active = true;\n    this.clientId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    this.userId = userId;\n    this.roomId = roomId;\n    this.sessionId = false;\n    this.localConnectionsOnly = !!options.localConnectionsOnly;\n    const name = `signal/${this.roomId}`;\n    this.name = name;\n    this.publishName = `signal/${this.roomId}/${this.clientId.toString(36)}`;\n    this.braidClient = braidClient;\n    this.logger = options.logger || braidClient.logger;\n    this.peerOptions = options.peerOptions;\n    this.socketMap = new Map();\n    this.userIds = new Set();\n    this.peerMap = new Map();\n    this.peerReconnectMap = new Map();\n    this.queueMap = new Map();\n    this.sessionMap = new Map();\n    this.inviteDeclineHandlerMap = new Map();\n    this.requestCallbackMap = new Map();\n    this.signalQueueMap = new Map();\n    this.peerDisconnectTimeoutMap = new Map();\n    this.sessionJoinHandlerMap = new Map();\n    this.sessionJoinRequestMap = new Map();\n    this.data = new ObservedRemoveMap([], { bufferPublishing: 0 });\n    this.sessionClientOffsetMap = new Map();\n    this.preApprovedSessionUserIdSet = new Set();\n    this.peerAddTrackHandlerMap = new Map();\n\n\n    this._ready = this.init(); // eslint-disable-line no-underscore-dangle\n\n    if (typeof options.sessionId === 'string') {\n      this.ready = this.joinSession(options.sessionId);\n    } else {\n      this.ready = this._ready; // eslint-disable-line no-underscore-dangle\n    }\n\n    this.handleSessionClientJoin = async (clientId:number) => {\n      const sessionClientIds = this.sessionClientIds;\n      if (sessionClientIds.size > 1) {\n        clearTimeout(this.leaveSessionAfterLastClientTimeout);\n      }\n      let interval;\n      let _peer; // eslint-disable-line no-underscore-dangle\n      let offset = 0;\n      let peerIsClosing = false;\n      const abortController = new AbortController();\n      const abortSignal = abortController.signal;\n      const cleanup = () => {\n        abortController.abort();\n        this.removeListener('sessionClientLeave', handleSessionClientLeave);\n        if (typeof _peer !== 'undefined') {\n          _peer.removeListener('close', handlePeerClose);\n          _peer.removeListener('data', handlePeerData);\n        }\n        this.data.removeListener('publish', handleDataPublish);\n        clearInterval(interval);\n      };\n      const handlePeerClose = () => {\n        cleanup();\n        if (!peerIsClosing && this.active && this.sessionClientIds.has(clientId)) {\n          this.handleSessionClientJoin(clientId);\n        }\n      };\n      const handleSessionClientLeave = (oldClientId:number) => {\n        if (clientId !== oldClientId) {\n          return;\n        }\n        cleanup();\n      };\n      const handleDataPublish = (queue:[Array<*>, Array<*>]) => {\n        sendToPeer(new ObservedRemoveDump(queue));\n      };\n      const sendToPeer = (unpacked: any) => {\n        if (typeof peer === 'undefined') {\n          throw new Error('Peer does not exist');\n        }\n        if (!peer.connected) {\n          this.logger.warn(`Unable to send message to client ${clientId}, connection is closing`);\n          return;\n        }\n        peer.send(pack(unpacked));\n      };\n      const handlePeerData = (packed:Buffer) => {\n        const message = unpack(packed);\n        if (message instanceof Ping) {\n          sendToPeer(new Pong(message.timestamp, Date.now()));\n        } else if (message instanceof Pong) {\n          offset = (Date.now() - message.wallclock) - (performance.now() - message.timestamp) / 2;\n          this.sessionClientOffsetMap.set(clientId, offset);\n        } else if (message instanceof ObservedRemoveDump) {\n          this.data.process(message.queue);\n        } else if (message instanceof PeerEvent) {\n          this.emit(message.type, ...message.args);\n        } else if (message instanceof Close) {\n          this.logger.info(`Client ${clientId} closing with code ${message.code}: ${message.message}`);\n          this.peerMap.delete(clientId);\n          peerIsClosing = true;\n        }\n      };\n      this.addListener('sessionClientLeave', handleSessionClientLeave);\n      if (!this.isConnectedToClient(clientId)) {\n        await new Promise((resolve) => {\n          const handleConnect = ({ clientId: newClientId }) => {\n            if (newClientId !== clientId) {\n              return;\n            }\n            this.removeListener('connect', handleConnect);\n            abortSignal.removeEventListener('abort', handleAbort);\n            resolve();\n          };\n          const handleAbort = () => {\n            this.removeListener('connect', handleConnect);\n            abortSignal.removeEventListener('abort', handleAbort);\n            resolve();\n          };\n          this.addListener('connect', handleConnect);\n          abortSignal.addEventListener('abort', handleAbort);\n        });\n        if (abortSignal.aborted) {\n          return;\n        }\n      }\n      const peer = this.peerMap.get(clientId);\n      _peer = peer;\n      if (typeof peer === 'undefined') {\n        throw new Error('Peer does not exist');\n      }\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('data', handlePeerData);\n      interval = setInterval(() => {\n        peer.send(pack(new Ping(performance.now())));\n      }, 1000);\n      peer.send(pack(new Ping(performance.now())));\n      this.data.addListener('publish', handleDataPublish);\n      handleDataPublish(this.data.dump());\n    };\n\n    this.handleSocketJoin = (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (clientId === this.clientId) {\n        return;\n      }\n      if (this.peerDisconnectTimeoutMap.has(clientId)) {\n        this.logger.info(`Clearing client ${clientId} disconnect timeout after socket join`);\n        clearTimeout(this.peerDisconnectTimeoutMap.get(clientId));\n        this.peerDisconnectTimeoutMap.delete(clientId);\n      }\n      this.addToQueue(clientId, () => this.connectToPeer(socketData));\n    };\n\n\n    this.handleSocketLeave = (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (clientId === this.clientId) {\n        return;\n      }\n      clearTimeout(this.peerDisconnectTimeoutMap.get(clientId));\n      if (this.active) {\n        this.peerDisconnectTimeoutMap.set(clientId, setTimeout(() => {\n          this.peerDisconnectTimeoutMap.delete(clientId);\n          this.addToQueue(clientId, () => this.disconnectFromPeer(clientId));\n        }, 15000));\n      } else {\n        this.addToQueue(clientId, () => this.disconnectFromPeer(clientId));\n      }\n    };\n\n    this.handleSessionClientLeave = () => {\n      const sessionClientIds = this.sessionClientIds;\n      if (sessionClientIds.size > 1) {\n        return;\n      }\n      this.leaveSessionAfterLastClientTimeout = setTimeout(async () => {\n        try {\n          await this.leaveSession();\n        } catch (error) {\n          this.logger.error('Unable to leave session after timeout when last session closed');\n          this.logger.errorStack(error);\n        }\n      }, 5000);\n    };\n\n    this.handleSession = () => {\n      this.data.clear();\n      this.sessionClientOffsetMap.clear();\n    };\n\n    this.addListener('socketJoin', this.handleSocketJoin);\n    this.addListener('socketLeave', this.handleSocketLeave);\n    this.addListener('sessionClientJoin', this.handleSessionClientJoin);\n    this.addListener('sessionClientLeave', this.handleSessionClientLeave);\n    this.addListener('session', this.handleSession);\n\n    this.handleBraidSet = (key:string, values:Array<Connection>) => {\n      if (key !== name) {\n        return;\n      }\n      this.active = true;\n      const oldSessionId = this.sessionId;\n      const newSessionId = getSessionId(values, this.clientId);\n      const oldSocketMap = this.socketMap;\n      const newSocketMap = getSocketMap(values);\n      const oldUserIds = this.userIds;\n      const newUserIds = getPeerIds(values);\n      const oldSessionMap = this.sessionMap;\n      const newSessionMap = getSessionMap(newSocketMap);\n      const oldLocalSessionSocketMap = typeof oldSessionId === 'string' ? oldSessionMap.get(oldSessionId) || new Map() : new Map();\n      const newLocalSessionSocketMap = typeof newSessionId === 'string' ? newSessionMap.get(newSessionId) || new Map() : new Map();\n      this.sessionId = newSessionId;\n      this.userIds = newUserIds;\n      this.socketMap = newSocketMap;\n      this.sessionMap = newSessionMap;\n      if (newSessionId !== oldSessionId) {\n        this.emit('session', newSessionId);\n      }\n      for (const [socketHash, socketData] of oldSocketMap) {\n        if (!newSocketMap.has(socketHash)) {\n          this.emit('socketLeave', socketData);\n        }\n      }\n      for (const [socketHash, socketData] of newSocketMap) {\n        if (!oldSocketMap.has(socketHash)) {\n          this.emit('socketJoin', socketData);\n        }\n      }\n      for (const peerUserId of oldUserIds) {\n        if (!newUserIds.has(peerUserId)) {\n          this.emit('leave', peerUserId);\n        }\n      }\n      for (const peerUserId of newUserIds) {\n        if (!oldUserIds.has(peerUserId)) {\n          this.emit('join', peerUserId);\n        }\n      }\n      for (const [clientId, socketData] of oldLocalSessionSocketMap) {\n        if (clientId === this.clientId) {\n          continue;\n        }\n        if (!newLocalSessionSocketMap.has(clientId)) {\n          this.emit('sessionClientLeave', clientId, socketData);\n        }\n      }\n      for (const [clientId, socketData] of newLocalSessionSocketMap) {\n        if (clientId === this.clientId) {\n          continue;\n        }\n        if (!oldLocalSessionSocketMap.has(clientId)) {\n          this.emit('sessionClientJoin', clientId, socketData);\n        }\n      }\n      for (const [sessionId, oldSessionSocketMap] of oldSessionMap) {\n        const newSessionSocketMap = newSessionMap.get(sessionId);\n        if (typeof newSessionSocketMap === 'undefined') {\n          for (const socketData of oldSessionSocketMap.values()) {\n            this.emit('sessionLeave', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of oldSessionSocketMap) {\n            if (!newSessionSocketMap.has(socketHash)) {\n              this.emit('sessionLeave', socketData);\n            }\n          }\n        }\n      }\n      for (const [sessionId, newSessionSocketMap] of newSessionMap) {\n        const oldSessionSocketMap = oldSessionMap.get(sessionId);\n        if (typeof oldSessionSocketMap === 'undefined') {\n          for (const socketData of newSessionSocketMap.values()) {\n            this.emit('sessionJoin', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of newSessionSocketMap) {\n            if (!oldSessionSocketMap.has(socketHash)) {\n              this.emit('sessionJoin', socketData);\n            }\n          }\n        }\n      }\n    };\n    this.handleBraidClose = () => {\n      this.reset();\n    };\n    this.handleBraidCloseRequested = () => {\n      this.close();\n    };\n    this.handleBraidReconnect = (isReconnecting: boolean) => {\n      if (!isReconnecting) {\n        return;\n      }\n      const startedSessionId = this.startedSessionId;\n      const joinedSessionId = this.joinedSessionId;\n      const handleInitialized = () => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.info(`Restarting session ${startedSessionId}`);\n          this.startSession(startedSessionId).catch((error) => {\n            this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        if (typeof joinedSessionId === 'string') {\n          this.logger.info(`Rejoining session ${joinedSessionId}`);\n          this.joinSession(joinedSessionId).catch((error) => {\n            this.logger.error(`Unable to rejoin session ${joinedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleClose = () => {\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleError = (error:Error) => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n          this.logger.errorStack(error);\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      this.braidClient.addListener('initialized', handleInitialized);\n      this.braidClient.addListener('close', handleClose);\n      this.braidClient.addListener('error', handleError);\n    };\n    this.braidClient.data.addListener('set', this.handleBraidSet);\n    this.braidClient.addListener('close', this.handleBraidClose);\n    this.braidClient.addListener('closeRequested', this.handleBraidCloseRequested);\n    this.braidClient.addListener('reconnect', this.handleBraidReconnect);\n  }\n\n  get sessionClientMap():Map<number, Socket> {\n    const sessionId = this.sessionId;\n    if (typeof sessionId !== 'string') {\n      return new Map();\n    }\n    const sessionClientMap = this.sessionMap.get(sessionId);\n    if (typeof sessionClientMap === 'undefined') {\n      return new Map();\n    }\n    return sessionClientMap;\n  }\n\n  get sessionClientIds():Set<number> {\n    return new Set(this.sessionClientMap.keys());\n  }\n\n  async init() {\n    const promise = new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(new Error('Closed before initialization completed'));\n      };\n      const handleValue = (key:string, value:any) => {\n        if (key !== this.name) {\n          return;\n        }\n        if (typeof value === 'undefined') {\n          return;\n        }\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(error);\n      };\n      this.addListener('close', handleClose);\n      this.braidClient.data.addListener('set', handleValue);\n      this.braidClient.addListener('error', handleError);\n      handleValue(this.name, this.braidClient.data.get(this.name));\n    });\n    try {\n      await Promise.all([\n        this.braidClient.subscribe(this.name),\n        this.braidClient.addServerEventListener(this.name, this.handleMessage.bind(this)),\n      ]);\n      if (!this.active) {\n        return;\n      }\n      await promise;\n      if (!this.active) {\n        return;\n      }\n      await this.braidClient.startPublishing(this.publishName);\n    } catch (error) {\n      this.braidClient.logger.error(`Unable to join ${this.roomId}`);\n      throw error;\n    }\n  }\n\n  addToQueue(queueId:string | number, func:() => Promise<*>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      return queue.add(func);\n    }\n    const newQueue = new PQueue({ concurrency: 1 });\n    const promise = newQueue.add(func);\n    this.queueMap.set(queueId, newQueue);\n    newQueue.on('idle', () => {\n      this.queueMap.delete(queueId);\n    });\n    return promise;\n  }\n\n  async publish(type:string, value:Object, options?: { timeoutDuration?: number, CustomError?: Class<RequestError> } = {}):Promise<{ text:string, code:number }> {\n    await this._ready; // eslint-disable-line no-underscore-dangle\n    const timeoutDuration = typeof options.timeoutDuration === 'number' ? options.timeoutDuration : 5000;\n    const CustomError = typeof options.CustomError === 'function' ? options.CustomError : RequestError;\n    const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    return new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        reject(new ClientClosedError(`Client closed before ${type} request completed`));\n      };\n      const timeout = setTimeout(() => {\n        this.requestCallbackMap.delete(requestId);\n        this.removeListener('close', handleClose);\n        reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n      }, timeoutDuration);\n      const handleResponse = (success:boolean, code: number, text:string) => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        if (success) {\n          resolve({ code, text });\n          return;\n        }\n        reject(new CustomError(text, code));\n      };\n      this.addListener('close', handleClose);\n      this.requestCallbackMap.set(requestId, handleResponse);\n      this.braidClient.publish(this.publishName, { requestId, type, value });\n    });\n  }\n\n  isConnectedToClient(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return false;\n    }\n    return !!peer.connected;\n  }\n\n  async connectToPeer(socket:Socket) {\n    const { userId, serverId, socketId, clientId, socketHash } = socket;\n    const reconnectCount = this.peerReconnectMap.get(clientId) || 0;\n    const reconnectDelay = reconnectCount > 5 ? 30000 : 1000 * (reconnectCount * reconnectCount);\n    if (reconnectDelay > 0) {\n      this.logger.info(`Delaying connect by ${Math.round(reconnectDelay / 1000)} ${reconnectDelay === 1000 ? 'second' : 'seconds'} on attempt ${reconnectCount}`);\n      await new Promise((resolve) => {\n        const timeout = setTimeout(() => {\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        }, reconnectDelay);\n        const handleClose = () => {\n          clearTimeout(timeout);\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        };\n        const handleSocketLeave = ({ socketHash: oldSocketHash }:Socket) => {\n          if (socketHash !== oldSocketHash) {\n            return;\n          }\n          clearTimeout(timeout);\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        };\n        this.addListener('close', handleClose);\n        this.addListener('socketLeave', handleSocketLeave);\n      });\n      if (!this.socketMap.has(socketHash)) {\n        return;\n      }\n    }\n    const existingPeer = this.peerMap.get(clientId);\n    const options = Object.assign({}, { initiator: clientId > this.clientId }, this.peerOptions);\n    if (this.localConnectionsOnly) {\n      options.config = {\n        iceServers: [],\n      };\n    }\n    const peer = existingPeer || new SimplePeer(options);\n    this.peerMap.set(clientId, peer);\n    this.peerReconnectMap.set(clientId, reconnectCount + 1);\n    this.emit('peer', { clientId, peer });\n    const addPeerListeners = () => {\n      this.peerReconnectMap.set(clientId, 0);\n      const cleanup = () => {\n        peer.removeListener('signal', handleSignal);\n        peer.removeListener('stream', handleStream);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('peerReconnect', handlePeerReconnect);\n      };\n      const handleSignal = async (data:Object) => {\n        try {\n          await this.publish(SIGNAL, { serverId, socketId, data }, { CustomError: SignalError });\n        } catch (error) {\n          this.logger.error(`Unable to signal user ${userId} client ${clientId} closed`);\n          this.logger.errorStack(error);\n        }\n      };\n      const handleStream = (stream:MediaStream) => {\n        if (!this.sessionClientIds.has(clientId)) {\n          this.logger.error(`Received an unexpected stream from non-session user ${userId} client ${clientId}`);\n          stream.getTracks().forEach((track) => {\n            track.stop();\n            track.dispatchEvent(new Event('stop'));\n          });\n          return;\n        }\n        this.emit('stream', { stream, userId, serverId, socketId, clientId });\n      };\n      const handlePeerClose = () => {\n        this.logger.info(`Disconnected from user ${userId} client ${clientId}`);\n        cleanup();\n        this.emit('disconnect', { userId, serverId, socketId, clientId });\n        if (this.active && this.peerMap.has(clientId)) {\n          this.peerMap.delete(clientId);\n          this.connectToPeer(socket);\n          this.logger.warn(`Reconnecting to user ${userId} client ${clientId}`);\n        }\n      };\n      const handlePeerError = (error:Error) => {\n        this.logger.error(`Error in connection to user ${userId} client ${clientId}`);\n        this.logger.errorStack(error);\n        this.emit('peerError', { userId, serverId, socketId, clientId, error });\n      };\n      const handlePeerReconnect = () => {\n        this.logger.info(`Reconnected to user ${userId} client ${clientId}`);\n        cleanup();\n      };\n      peer.addListener('signal', handleSignal);\n      peer.addListener('stream', handleStream);\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('error', handlePeerError);\n      peer.addListener('peerReconnect', handlePeerReconnect);\n    };\n    if (peer.connected) {\n      peer.emit('peerReconnect');\n      addPeerListeners();\n      this.emit('connect', { userId, clientId, serverId, socketId, socketHash, peer });\n      return;\n    }\n    await new Promise((resolve) => {\n      const cleanup = () => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n      };\n      const timeout = setTimeout(() => {\n        cleanup();\n        resolve();\n      }, 5000);\n      const handleConnect = () => {\n        cleanup();\n        addPeerListeners();\n        this.emit('connect', { userId, clientId, serverId, socketId, socketHash, peer });\n        resolve();\n      };\n      const handleSignal = async (data:Object) => {\n        if (this.localConnectionsOnly) {\n          if (data.type === 'candidate') {\n            const { candidate: { candidate } } = data;\n            const addressParts = candidate.split(' ');\n            if (addressParts[4] !== '127.0.0.1' && addressParts[4] !== '::1') {\n              addressParts[4] = '127.0.0.1';\n              data.candidate.candidate = addressParts.join(' '); // eslint-disable-line no-param-reassign\n            }\n          } else if (data.type === 'answer' || data.type === 'offer') {\n            data.sdp = data.sdp.replace(/(a=candidate[^\\s]+?\\s[^\\s]+?\\s[^\\s]+?\\s[^\\s]+?\\s)([^\\s]+?\\s)(.*?\\r?\\n)/g, '$1127.0.0.1 $3'); // eslint-disable-line no-param-reassign\n          }\n        }\n        try {\n          await this.publish(SIGNAL, { serverId, socketId, data }, { CustomError: SignalError });\n        } catch (error) {\n          if (error instanceof SignalError && error.code === 404) {\n            this.logger.error(`Unable to signal user ${userId}, client ${clientId}, client does not exist`);\n            cleanup();\n            resolve();\n          } else {\n            this.logger.error(`Unable to signal user ${userId}, client ${clientId}`);\n            this.logger.errorStack(error);\n          }\n        }\n      };\n      const handleClose = () => {\n        cleanup();\n        resolve();\n      };\n      const handlePeerClose = () => {\n        this.logger.info(`Connection to user ${userId} client ${clientId} closed`);\n        cleanup();\n        if (this.peerMap.has(clientId)) {\n          this.peerMap.delete(clientId);\n          this.connectToPeer(socket);\n          this.logger.warn(`Reconnecting to user ${userId} client ${clientId}`);\n        }\n        resolve();\n      };\n      const handlePeerError = (error:Error) => {\n        cleanup();\n        this.logger.error(`Error connecting to ${userId}`);\n        this.logger.errorStack(error);\n        this.emit('peerError', { userId, serverId, socketId, clientId, error });\n        this.emit('error', error);\n        resolve();\n      };\n      const handleSocketLeave = ({ socketHash: oldSocketHash }:Socket) => {\n        if (socketHash !== oldSocketHash) {\n          return;\n        }\n        cleanup();\n        this.logger.warn(`Unable to connect to user ${userId} client ${clientId}, socket closed before connection was completed`);\n        resolve();\n      };\n      peer.addListener('error', handlePeerError);\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('connect', handleConnect);\n      peer.addListener('signal', handleSignal);\n      this.addListener('close', handleClose);\n      this.addListener('socketLeave', handleSocketLeave);\n      const signalQueue = this.signalQueueMap.get(clientId);\n      if (Array.isArray(signalQueue)) {\n        while (signalQueue.length > 0) {\n          const data = signalQueue.shift();\n          peer.signal(data);\n        }\n      }\n    });\n  }\n\n  async emitToPeer(clientId:number, type:string, ...args:Array<any>) {\n    const peer = await this.getConnectedPeer(clientId);\n    peer.send(pack(new PeerEvent(type, args)));\n  }\n\n  async addStream(clientId:number, stream:MediaStream) {\n    const peer = await this.getConnectedPeer(clientId);\n    const addTrackHandler = (event:Event) => {\n      if (event instanceof MediaStreamTrackEvent) {\n        peer.addTrack(event.track);\n      }\n    };\n    this.peerAddTrackHandlerMap.set(stream, addTrackHandler);\n    stream.addEventListener('addtrack', addTrackHandler);\n    peer.addStream(stream);\n  }\n\n  async removeStream(clientId:number, stream:MediaStream) {\n    const peer = await this.getConnectedPeer(clientId);\n    const addTrackHandler = this.peerAddTrackHandlerMap.get(stream);\n    if (typeof addTrackHandler === 'function') {\n      stream.removeEventListener('addtrack', addTrackHandler);\n    }\n    peer.removeStream(stream);\n  }\n\n  async disconnectFromPeer(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return;\n    }\n    this.peerMap.delete(clientId);\n    if (peer.connected) {\n      peer.send(pack(new Close(1000, 'Disconnect requested')));\n    }\n    peer.destroy();\n  }\n\n  async onIdle() {\n    while (this.queueMap.size > 0) {\n      for (const queue of this.queueMap.values()) {\n        await queue.onIdle();\n      }\n      // $FlowFixMe\n      await new Promise((resolve) => queueMicrotask(resolve));\n    }\n  }\n\n  didStartSession() {\n    if (!this.sessionId) {\n      return false;\n    }\n    return this.startedSessionId === this.sessionId;\n  }\n\n  async removeFromSession(clientId:number) {\n    const sessionId = this.sessionId;\n    if (sessionId === false) {\n      this.logger.warn(`Unable to remove client ${clientId} from session, not in a session`);\n      return;\n    }\n    const sessionClientMap = this.sessionClientMap;\n    const socket = sessionClientMap.get(clientId);\n    if (typeof socket === 'undefined') {\n      this.logger.warn(`Unable to remove client ${clientId}, client not in session ${sessionId}`);\n      return;\n    }\n    const { userId, socketId, serverId } = socket;\n    if (this.userId !== userId) {\n      this.preApprovedSessionUserIdSet.delete(userId);\n    }\n    await this.publish(REMOVE_FROM_SESSION, { userId, socketId, serverId }, { CustomError: RemoveFromSessionError });\n  }\n\n  async cancelInviteToSession(userId:string) {\n    const queue = this.queueMap.get(SESSION_QUEUE);\n    if (typeof queue !== 'undefined') {\n      await queue.onIdle();\n    }\n    const sessionId = this.sessionId; // eslint-disable-line no-undef\n    if (typeof sessionId === 'string') {\n      this.preApprovedSessionUserIdSet.delete(userId);\n      this.emit('cancelInvite', { sessionId, userId });\n      await this.publish(CANCEL_INVITE_TO_SESSION, { sessionId, userId }, { CustomError: CancelInviteToSessionError });\n    } else {\n      this.logger.warn(`Unable to cancel invite to user ${userId}, not in session`);\n    }\n  }\n\n  async inviteToSession(userId:string, options?:{ data?:Object, timeoutDuration?: number, sessionJoinHandler?: SessionJoinHandler } = {}) {\n    const { data, timeoutDuration = 30000, sessionJoinHandler } = options;\n    const queue = this.queueMap.get(SESSION_QUEUE);\n    if (typeof queue !== 'undefined') {\n      await queue.onIdle();\n    }\n    const hasSessionId = this.sessionId === 'string';\n    // $FlowFixMe\n    const sessionId = this.sessionId || globalThis.crypto.randomUUID(); // eslint-disable-line no-undef\n    let didCancel = false;\n    const handleCancelInviteBeforePublish = ({ sessionId: cancelledSessionId, userId: cancelledUserId }:{ sessionId:string, userId:string }) => {\n      if (cancelledSessionId !== sessionId) {\n        return;\n      }\n      if (cancelledUserId !== userId) {\n        return;\n      }\n      didCancel = true;\n    };\n    const leaveSession = async () => {\n      if (hasSessionId) {\n        return;\n      }\n      try {\n        await this.leaveSession();\n      } catch (error) {\n        this.logger.error('Unable to leave session');\n        this.logger.errorStack(error);\n      }\n    };\n    this.addListener('cancelInvite', handleCancelInviteBeforePublish);\n    try {\n      if (hasSessionId) {\n        this.preApprovedSessionUserIdSet.add(userId);\n        await this.publish(INVITE_TO_SESSION, { userId, sessionId, data }, { CustomError: InviteToSessionError });\n      } else {\n        await this.startSession(sessionId, sessionJoinHandler);\n        this.preApprovedSessionUserIdSet.add(userId);\n        await this.publish(INVITE_TO_SESSION, { userId, sessionId, data }, { CustomError: InviteToSessionError });\n      }\n    } catch (error) {\n      throw error;\n    } finally {\n      this.removeListener('cancelInvite', handleCancelInviteBeforePublish);\n    }\n    if (didCancel) {\n      await leaveSession();\n      throw new InvitationCancelledError(`Invitation to user ${userId} was cancelled`);\n    }\n    await new Promise((resolve, reject) => {\n      const cleanup = () => {\n        clearTimeout(timeout);\n        this.removeListener('sessionJoin', handleSessionJoin);\n        this.removeListener('close', handleClose);\n        this.removeListener('leave', handleLeave);\n        this.removeListener('session', handleSession);\n        this.removeListener('socketLeave', handleSocketLeave);\n        this.removeListener('cancelInvite', handleCancelInvite);\n        this.inviteDeclineHandlerMap.delete(`${userId}:${sessionId}`);\n      };\n      const timeout = setTimeout(async () => {\n        cleanup();\n        await leaveSession();\n        reject(new InvitationTimeoutError(`Invitation timed out after ${Math.round(timeoutDuration / 100) / 10} seconds`));\n      }, timeoutDuration);\n      const handleCancelInvite = async ({ sessionId: cancelledSessionId, userId: cancelledUserId }:{ sessionId:string, userId:string }) => {\n        if (cancelledSessionId !== sessionId) {\n          return;\n        }\n        if (cancelledUserId !== userId) {\n          return;\n        }\n        cleanup();\n        await leaveSession();\n        reject(new InvitationCancelledError(`Invitation to user ${userId} was cancelled`));\n      };\n      const handleSessionJoin = (socket: Socket) => {\n        if (socket.sessionId !== sessionId) {\n          return;\n        }\n        if (socket.userId !== userId) {\n          return;\n        }\n        cleanup();\n        resolve();\n      };\n      // Only listen for socket leave events if the user is inviting themselves\n      const handleSocketLeave = async (socket: Socket) => {\n        if (socket.userId !== this.userId) {\n          return;\n        }\n        let isOnlySocketForUserId = true;\n        for (const socketData of this.socketMap.values()) {\n          if (socketData.userId !== this.userId) {\n            continue;\n          }\n          if (socketData.clientId === this.clientId) {\n            continue;\n          }\n          isOnlySocketForUserId = false;\n        }\n        if (isOnlySocketForUserId) {\n          cleanup();\n          await leaveSession();\n          reject(new InvitedUserLeftError(`User ${userId} left before accepting the invitation`));\n        }\n      };\n      const handleSession = (newSessionId:string | false) => {\n        if (newSessionId === sessionId) {\n          return;\n        }\n        cleanup();\n        resolve();\n      };\n      const handleClose = () => {\n        cleanup();\n        reject(new ClientClosedError('Closed before invite'));\n      };\n      const handleDecline = async () => {\n        cleanup();\n        await leaveSession();\n        reject(new InvitationDeclinedError('Invitation declined'));\n      };\n      const handleLeave = async (peerUserId:string) => {\n        if (userId !== peerUserId) {\n          return;\n        }\n        cleanup();\n        await leaveSession();\n        reject(new InvitedUserLeftError(`User ${userId} left before accepting the invitation`));\n      };\n      this.inviteDeclineHandlerMap.set(`${userId}:${sessionId || ''}`, handleDecline);\n      this.addListener('sessionJoin', handleSessionJoin);\n      this.addListener('close', handleClose);\n      this.addListener('leave', handleLeave);\n      this.addListener('session', handleSession);\n      if (this.userId === userId) {\n        this.addListener('socketLeave', handleSocketLeave);\n      }\n      this.addListener('cancelInvite', handleCancelInvite);\n    });\n  }\n\n  async startSession(sessionId:string, sessionJoinHandler?: SessionJoinHandler) {\n    this.preApprovedSessionUserIdSet.clear();\n    const previousStartedSessionId = this.startedSessionId;\n    this.startedSessionId = sessionId;\n    try {\n      await this.addToQueue(SESSION_QUEUE, () => this.publish(START_SESSION, { sessionId }, { CustomError: StartSessionError }));\n    } catch (error) {\n      this.startedSessionId = previousStartedSessionId;\n      throw error;\n    }\n    delete this.joinedSessionId;\n    if (typeof sessionJoinHandler === 'function') {\n      const wrappedSessionJoinHandler = async (values) => {\n        if (this.preApprovedSessionUserIdSet.has(values.userId)) {\n          return [true, 200, 'Authorized'];\n        }\n        if (this.userId === values.userId) {\n          return [true, 200, 'Authorized'];\n        }\n        if (typeof sessionJoinHandler === 'function') {\n          return sessionJoinHandler(values);\n        }\n        return [true, 200, 'Authorized'];\n      };\n      this.sessionJoinHandlerMap.set(sessionId, wrappedSessionJoinHandler);\n    } else {\n      this.sessionJoinHandlerMap.set(sessionId, () => [true, 200, 'Authorized']);\n    }\n  }\n\n  didJoinSession() {\n    if (!this.sessionId) {\n      return false;\n    }\n    return this.joinedSessionId === this.sessionId;\n  }\n\n  async joinSession(sessionId:string, timeoutDuration?: number = 30000) {\n    const previousJoinedSessionId = this.joinedSessionId;\n    this.joinedSessionId = sessionId;\n    try {\n      await this.addToQueue(SESSION_QUEUE, () => this.publish(JOIN_SESSION, { sessionId, timeoutDuration }, { CustomError: JoinSessionError, timeoutDuration: timeoutDuration + 5000 }));\n    } catch (error) {\n      this.joinedSessionId = previousJoinedSessionId;\n      throw error;\n    }\n    const startedSessionId = this.startedSessionId;\n    delete this.startedSessionId;\n    if (typeof startedSessionId === 'string') {\n      this.sessionJoinHandlerMap.delete(startedSessionId);\n    }\n  }\n\n  async abortJoinSession() {\n    await this.publish(ABORT_SESSION_JOIN_REQUEST, { }, { CustomError: AbortSessionJoinError });\n  }\n\n  async leaveSession() {\n    try {\n      await this.addToQueue(SESSION_QUEUE, () => this.publish(LEAVE_SESSION, {}, { CustomError: LeaveSessionError }));\n      const startedSessionId = this.startedSessionId;\n      delete this.startedSessionId;\n      delete this.joinedSessionId;\n      if (typeof startedSessionId === 'string') {\n        this.sessionJoinHandlerMap.delete(startedSessionId);\n      }\n    } catch (error) {\n      if (error instanceof ClientClosedError) {\n        return;\n      }\n      throw error;\n    }\n  }\n\n  async handleMessage(message:{ requestId?: number, type:string, value:Object }) {\n    if (typeof message !== 'object') {\n      this.logger.error('Invalid message format');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    const { requestId, type, value } = message;\n    if (typeof type !== 'string') {\n      this.logger.error('Invalid message format, type property should be of type \"string\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (typeof value !== 'object') {\n      this.logger.error('Invalid message format, value property should be of type \"object\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (type === RESPONSE && typeof requestId === 'number') {\n      const callback = this.requestCallbackMap.get(requestId);\n      if (typeof callback !== 'function') {\n        this.logger.error(`Callback for request ${requestId} does not exist`);\n        return;\n      }\n      const { success, code, text } = value;\n      if (typeof success !== 'boolean') {\n        this.logger.error('Response message contained an invalid value success property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value success property');\n        return;\n      }\n      if (typeof code !== 'number') {\n        this.logger.error('Response message contained an invalid value code property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value code property');\n        return;\n      }\n      if (typeof text !== 'string') {\n        this.logger.error('Response message contained an invalid value text property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value text property');\n        return;\n      }\n      callback(success, code, text);\n      return;\n    }\n    switch (type) {\n      case SIGNAL:\n        try {\n          const {\n            clientId,\n            serverId,\n            socketId,\n            data,\n          } = value;\n          if (typeof serverId !== 'number') {\n            this.logger.error('Signal message contained an invalid server ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof socketId !== 'number') {\n            this.logger.error('Signal message contained an invalid socket ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof data !== 'object') {\n            this.logger.error('Signal message contained an invalid data property');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const peer = this.peerMap.get(clientId);\n          if (typeof peer === 'undefined') {\n            const signalQueue = this.signalQueueMap.get(clientId);\n            if (Array.isArray(signalQueue)) {\n              signalQueue.push(data);\n              return;\n            }\n            this.signalQueueMap.set(clientId, [data]);\n            return;\n          }\n          if (peer.destroyed || peer.destroying) {\n            return;\n          }\n          peer.signal(data);\n        } catch (error) {\n          this.logger.error('Unable to process signal message');\n          this.logger.errorStack(error);\n        }\n        break;\n      case DECLINE_INVITE_TO_SESSION:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Decline invite request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Decline invite request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const inviteDeclineHandler = this.inviteDeclineHandlerMap.get(requestHash);\n          if (typeof inviteDeclineHandler === 'function') {\n            inviteDeclineHandler();\n          }\n        } catch (error) {\n          this.logger.error('Unable to process decline invite request');\n          this.logger.errorStack(error);\n        }\n        break;\n      case ABORT_SESSION_JOIN_REQUEST:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Abort session join request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Abort session join request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const existing = this.sessionJoinRequestMap.get(requestHash);\n          if (!Array.isArray(existing)) {\n            this.logger.warn(`Unable to abort session join request for user ${userId} and session ${sessionId}, request does not exist`);\n            return;\n          }\n          this.logger.warn(`Aborting session join request for user ${userId} and session ${sessionId}`);\n          existing[1].abort();\n        } catch (error) {\n          this.logger.error('Unable to process session abort join request');\n          this.logger.errorStack(error);\n        }\n        break;\n      case SESSION_JOIN_REQUEST:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Session join request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Session join request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const existing = this.sessionJoinRequestMap.get(requestHash);\n          if (Array.isArray(existing)) {\n            this.logger.warn(`Session join request for user ${userId} and session ${sessionId} already exists`);\n            await existing[0];\n            return;\n          }\n          const sessionJoinHandler = this.sessionJoinHandlerMap.get(sessionId);\n          if (typeof sessionJoinHandler !== 'function') {\n            this.logger.error(`Handler for session ${sessionId} does not exist`);\n            return;\n          }\n          const abortController = new AbortController();\n          abortController.signal.addEventListener('abort', () => {\n            this.sessionJoinRequestMap.delete(requestHash);\n          });\n          const promise = (async () => {\n            let response = [false, 500, 'Error in sesssion join handler'];\n            try {\n              response = await sessionJoinHandler({ userId, sessionId, abortSignal: abortController.signal });\n            } catch (error) {\n              this.logger.error(`Unable to respond to session join request for user ${userId} and session ${sessionId}, error in session join handler`);\n              this.logger.errorStack(error);\n            }\n            if (abortController.signal.aborted) {\n              this.logger.warn(`Session join request for user ${userId} and session ${sessionId} was aborted`);\n              return;\n            }\n            try {\n              await this.publish(SESSION_JOIN_RESPONSE, {\n                userId,\n                sessionId,\n                success: response[0],\n                code: response[1],\n                text: response[2],\n              }, { CustomError: SessionJoinResponseError });\n            } catch (error) {\n              this.logger.error(`Unable to send session join response for user ${userId} and session ${sessionId}`);\n              this.logger.errorStack(error);\n            }\n            this.sessionJoinRequestMap.delete(requestHash);\n          })();\n          this.sessionJoinRequestMap.set(requestHash, [promise, abortController]);\n          await promise;\n        } catch (error) {\n          this.logger.error('Unable to process session join request');\n          this.logger.errorStack(error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown message type ${type}`);\n    }\n  }\n\n  async getConnectedPeer(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer !== 'undefined' && peer.connected) {\n      return peer;\n    }\n    return new Promise((resolve, reject) => {\n      let _peer; // eslint-disable-line no-underscore-dangle\n      const cleanup = () => {\n        this.removeListener('sessionClientLeave', handleSessionClientLeave);\n        this.removeListener('connect', handleConnect);\n        this.removeListener('peer', handlePeer);\n        if (typeof _peer !== 'undefined') {\n          _peer.removeListener('close', handlePeerClose);\n          _peer.removeListener('error', handlePeerError);\n        }\n      };\n      const handlePeerClose = () => {\n        cleanup();\n        reject(new Error(`Peer ${clientId} closed before connection was established`));\n      };\n      const handlePeerError = (error:Error) => {\n        cleanup();\n        reject(error);\n      };\n      const handlePeer = ({ clientId: newClientId, peer: _p }) => {\n        if (newClientId !== clientId) {\n          return;\n        }\n        _peer = _p;\n        _p.addListener('close', handlePeerClose);\n        _p.addListener('error', handlePeerError);\n      };\n      const handleConnect = ({ clientId: newClientId, peer: _p }) => {\n        if (newClientId !== clientId) {\n          return;\n        }\n        cleanup();\n        resolve(_p);\n      };\n      const handleSessionClientLeave = (oldClientId:number) => {\n        if (clientId !== oldClientId) {\n          return;\n        }\n        cleanup();\n        reject(new Error(`Client ${clientId} left before connection was established`));\n      };\n      this.addListener('sessionClientLeave', handleSessionClientLeave);\n      this.addListener('connect', handleConnect);\n      this.addListener('peer', handlePeer);\n    });\n  }\n\n  declineInviteToSession(data: Object) {\n    return this.publish(DECLINE_INVITE_TO_SESSION, data, { CustomError: DeclineInviteToSessionError });\n  }\n\n  reset() {\n    this.handleBraidSet(this.name, []);\n    clearTimeout(this.leaveSessionAfterLastClientTimeout);\n  }\n\n  async close() {\n    this.logger.info('Closing');\n    this.active = false;\n\n    this.reset();\n\n    for (const [clientId, timeout] of this.peerDisconnectTimeoutMap) {\n      clearTimeout(timeout);\n      this.addToQueue(clientId, () => this.disconnectFromPeer(clientId));\n    }\n    this.peerDisconnectTimeoutMap.clear();\n\n    this.emit('close');\n\n    try {\n      await this.onIdle();\n    } catch (error) {\n      this.logger.error('Error in queue during close');\n      this.logger.errorStack(error);\n    }\n\n    this.removeListener('socketJoin', this.handleSocketJoin);\n    this.removeListener('socketLeave', this.handleSocketLeave);\n    this.removeListener('sessionClientJoin', this.handleSessionClientJoin);\n    this.removeListener('sessionClientLeave', this.handleSessionClientLeave);\n    this.removeListener('session', this.handleSession);\n\n    this.braidClient.data.removeListener('set', this.handleBraidSet);\n    this.braidClient.removeListener('close', this.handleBraidClose);\n    this.braidClient.removeListener('closeRequested', this.handleBraidCloseRequested);\n    this.braidClient.removeListener('reconnect', this.handleBraidReconnect);\n    this.braidClient.stopPublishing(this.publishName);\n    this.braidClient.removeServerEventListener(this.name);\n    this.braidClient.unsubscribe(this.name);\n  }\n}\n\nconst publish = (braidClient:BraidClient, abortSignal: AbortSignal, roomId:string, type:string, value:Object, options?: { timeoutDuration?: number, CustomError?: Class<RequestError> } = {}) => {\n  const name = `signal/${roomId}`;\n  const publishName = `signal/${roomId}/${Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(36)}`;\n  const timeoutDuration = typeof options.timeoutDuration === 'number' ? options.timeoutDuration : 5000;\n  const CustomError = typeof options.CustomError === 'function' ? options.CustomError : RequestError;\n  const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n  return new Promise((resolve, reject) => {\n    const cleanup = () => {\n      clearTimeout(timeout);\n      abortSignal.removeEventListener('abort', handleAbort);\n      braidClient.removeServerEventListener(name);\n      braidClient.stopPublishing(publishName);\n    };\n    const handleAbort = () => {\n      cleanup();\n      reject(new AbortError(`Publish request aborted before ${type} request completed`));\n    };\n    const timeout = setTimeout(() => {\n      cleanup();\n      reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n    }, timeoutDuration);\n    const handleMessage = (message:{ requestId?: number, type:string, value:Object }) => {\n      if (typeof message !== 'object') {\n        return;\n      }\n      const { requestId: responseId, type: responseType, value: responseValue } = message;\n      if (responseType !== RESPONSE) {\n        return;\n      }\n      if (responseId !== requestId) {\n        return;\n      }\n      const { success, code, text } = responseValue;\n      cleanup();\n      if (success) {\n        resolve({ code, text });\n        return;\n      }\n      reject(new CustomError(text, code));\n    };\n    abortSignal.addEventListener('abort', handleAbort);\n    Promise.all([\n      braidClient.startPublishing(publishName),\n      braidClient.addServerEventListener(name, handleMessage),\n    ]).then(() => {\n      braidClient.publish(publishName, { requestId, type, value });\n    }).catch((error) => {\n      cleanup();\n      reject(error);\n    });\n  });\n};\n\nBond.declineInviteToSession = (braidClient: BraidClient, abortSignal:AbortSignal, data: { roomId: string }) => {\n  const { roomId } = data;\n  return publish(braidClient, abortSignal, roomId, DECLINE_INVITE_TO_SESSION, data, { CustomError: DeclineInviteToSessionError });\n};\n\nBond.getLocalRoomId = async (braidClient: BraidClient, _roomId:string | false, userId:string, abortSignal: AbortSignal, options?: Options = {}) => {\n  const bond = new Bond(braidClient, AUTOMATIC_DISCOVERY_ROOM_ID, userId, Object.assign({}, options, { localConnectionsOnly: true }));\n  let roomId = _roomId; // eslint-disable-line no-undef\n  const localKey = bond.clientId.toString(36);\n  const logger = options.logger || braidClient.logger;\n  const negotiatedRoomId = await new Promise((resolve, reject) => {\n    const handleSession = () => {\n      bond.data.set(localKey, roomId);\n    };\n    const handleConnect = ({ clientId, socketHash }:Socket) => {\n      const socket = bond.socketMap.get(socketHash);\n      if (typeof socket === 'undefined') {\n        return;\n      }\n      const { sessionId } = socket;\n      if (typeof sessionId !== 'string') {\n        return;\n      }\n      if (clientId > bond.clientId) {\n        bond.joinSession(sessionId).catch((error) => {\n          logger.error('Unable to join session during automatic linking');\n          logger.errorStack(error);\n        });\n      }\n    };\n    const handleSessionJoin = ({ clientId, sessionId }:Socket) => {\n      if (typeof sessionId === 'string' && bond.sessionId === sessionId) {\n        return;\n      }\n      if (!bond.peerMap.has(clientId)) {\n        return;\n      }\n      if (typeof sessionId !== 'string') {\n        return;\n      }\n      if (clientId > bond.clientId) {\n        bond.joinSession(sessionId).catch((error) => {\n          logger.error('Unable to join session during automatic linking');\n          logger.errorStack(error);\n        });\n      }\n    };\n    const handleSet = (key:string, remoteRoomId:string | false) => {\n      if (key === localKey) {\n        return;\n      }\n      const clientId = parseInt(key, 36);\n      if (!bond.peerMap.has(clientId)) {\n        return;\n      }\n      if (roomId === false && remoteRoomId === false && clientId < bond.clientId) {\n        roomId = globalThis.crypto.randomUUID(); // eslint-disable-line no-undef\n        bond.data.set(localKey, roomId);\n        return;\n      } else if (typeof roomId === 'string' && typeof remoteRoomId === 'string' && roomId !== remoteRoomId && clientId > bond.clientId) {\n        roomId = remoteRoomId;\n        bond.data.set(localKey, remoteRoomId);\n      } else if (roomId === false && typeof remoteRoomId === 'string') {\n        roomId = remoteRoomId;\n        bond.data.set(localKey, remoteRoomId);\n      } else if (typeof roomId !== 'string' || roomId !== remoteRoomId) {\n        return;\n      }\n      abortSignal.removeEventListener('abort', handleAbort);\n      bond.removeListener('close', handleClose);\n      bond.removeListener('connect', handleConnect);\n      bond.removeListener('sessionJoin', handleSessionJoin);\n      bond.removeListener('session', handleSession);\n      bond.data.removeListener('set', handleSet);\n      resolve(roomId);\n    };\n    const handleClose = () => {\n      abortSignal.removeEventListener('abort', handleAbort);\n      bond.removeListener('close', handleClose);\n      bond.removeListener('connect', handleConnect);\n      bond.removeListener('sessionJoin', handleSessionJoin);\n      bond.removeListener('session', handleSession);\n      bond.data.removeListener('set', handleSet);\n      reject(new ClientClosedError('Client closed before local room ID was discovered'));\n    };\n    const handleAbort = async () => {\n      abortSignal.removeEventListener('abort', handleAbort);\n      bond.removeListener('close', handleClose);\n      bond.removeListener('connect', handleConnect);\n      bond.removeListener('sessionJoin', handleSessionJoin);\n      bond.removeListener('session', handleSession);\n      bond.data.removeListener('set', handleSet);\n      try {\n        const queue = bond.queueMap.get(SESSION_QUEUE);\n        if (typeof queue !== 'undefined') {\n          await queue.onIdle();\n        }\n        await bond.close();\n      } catch (error) {\n        logger.error('Unable to close before throwing abort error');\n        logger.errorStack(error);\n      }\n      reject(new AbortError('Local room ID discovery aborted'));\n    };\n    abortSignal.addEventListener('abort', handleAbort);\n    bond.data.addListener('set', handleSet);\n    bond.addListener('close', handleClose);\n    bond.addListener('connect', handleConnect);\n    bond.addListener('sessionJoin', handleSessionJoin);\n    bond.addListener('session', handleSession);\n    bond.startSession(globalThis.crypto.randomUUID()); // eslint-disable-line no-undef\n  });\n  await bond.close();\n  return negotiatedRoomId;\n};\n\n"],"file":"index.js"}