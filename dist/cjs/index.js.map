{"version":3,"sources":["../../src/index.js"],"names":["getSocketMap","values","Map","map","x","socketHash","socketId","serverId","userId","clientId","sessionId","getPeerIds","Set","getSessionMap","socketMap","socket","sessionSocketMap","get","set","Bond","braidClient","roomId","options","active","Math","floor","random","Number","MAX_SAFE_INTEGER","name","publishName","toString","ready","init","logger","wrtc","userIds","peerMap","queueMap","sessionMap","requestCallbackMap","signalQueueMap","peerDisconnectTimeouts","handleSet","key","oldSocketMap","newSocketMap","oldUserIds","newUserIds","oldSessionMap","newSessionMap","socketData","has","emit","peerUserId","oldSessionSocketMap","newSessionSocketMap","data","addListener","info","clearTimeout","delete","addToQueue","connectToPeer","setTimeout","disconnectFromPeer","oldSocketData","clear","oldUserId","isReconnecting","startedSessionId","handleInitialized","startSession","catch","error","errorStack","removeListener","handleClose","handleError","promise","Promise","resolve","reject","handleValue","Error","value","all","subscribe","addServerEventListener","handleMessage","bind","startPublishing","queueId","func","queue","add","newQueue","PQueue","concurrency","on","type","timeoutDuration","requestId","timeout","RequestTimeoutError","handleResponse","success","code","text","RequestError","publish","existingPeer","peer","SimplePeer","initiator","connected","handlePeerClose","handlePeerError","handlePeerReconnect","handleConnect","handleSignal","handleSocketLeave","SIGNAL","oldSocketHash","warn","signalQueue","Array","isArray","length","shift","signal","destroy","size","onIdle","queueMicrotask","START_SESSION","LEAVE_SESSION","message","JSON","stringify","RESPONSE","callback","push","destroyed","destroying","stopPublishing","unsubscribe","removeServerEventListener","EventEmitter"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport type BraidClient from '@bunchtogether/braid-client';\nimport SimplePeer from 'simple-peer';\nimport PQueue from 'p-queue';\nimport {\n  SIGNAL,\n  START_SESSION,\n  LEAVE_SESSION,\n  RESPONSE,\n} from './constants';\nimport { RequestError, RequestTimeoutError } from './errors';\n\ntype Logger = {\n  debug: (string | number, ...any) => void,\n  info: (string | number, ...any) => void,\n  warn: (string | number, ...any) => void,\n  error: (string | number, ...any) => void,\n  errorStack: (error:Error | MediaError) => void,\n};\n\ntype Options = {\n  logger?: Logger,\n  wrtc?: Object\n}\n\ntype Connection = [number, number, string, number, string | false];\ntype Socket = { socketHash: string, socketId: number, serverId: number, userId: string, clientId: number, sessionId: string | false };\n\nconst getSocketMap = (values?:Array<Connection>):Map<string, Socket> => {\n  if (typeof values === 'undefined') {\n    return new Map();\n  }\n  return new Map(values.map((x) => {\n    const socketHash = `${x[0]}:${x[1]}`;\n    return [socketHash, { socketHash, socketId: x[0], serverId: x[1], userId: x[2], clientId: x[3], sessionId: x[4] }];\n  }));\n};\n\nconst getPeerIds = (values?:Array<Connection>):Set<string> => {\n  if (typeof values === 'undefined') {\n    return new Set();\n  }\n  return new Set(values.map((x) => x[2]));\n};\n\nconst getSessionMap = (socketMap:Map<string, Socket>):Map<string | false, Map<string, Socket>> => {\n  const map = new Map();\n  for (const socket of socketMap.values()) {\n    const { socketHash, sessionId } = socket;\n    const sessionSocketMap = map.get(sessionId);\n    if (typeof sessionSocketMap === 'undefined') {\n      map.set(sessionId, new Map([[socketHash, socket]]));\n    } else {\n      sessionSocketMap.set(socketHash, socket);\n    }\n  }\n  return map;\n};\n\nexport class Bond extends EventEmitter {\n  declare roomId: string;\n  declare userId: string;\n  declare clientId: number;\n  declare name: string;\n  declare publishName: string;\n  declare braidClient: BraidClient;\n  declare logger: Logger;\n  declare ready: Promise<void>;\n  declare socketMap: Map<string, Socket>;\n  declare sessionMap: Map<string | false, Map<string, Socket>>;\n  declare userIds: Set<string>;\n  declare wrtc: void | Object;\n  declare peerMap: Map<number, SimplePeer>;\n  declare queueMap: Map<string | number, PQueue>;\n  declare handleSet: (string, any) => void;\n  declare signalQueueMap: Map<number, Array<[string, Object]>>;\n  declare requestCallbackMap: Map<number, (boolean, number, string) => void | Promise<void>>;\n  declare startedSessionId: void | string;\n  declare active: boolean;\n  declare peerDisconnectTimeouts: Map<number, TimeoutID>;\n\n  constructor(braidClient: BraidClient, roomId:string, userId:string, options?: Options = {}) {\n    super();\n    this.active = true;\n    this.clientId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    this.roomId = roomId;\n    this.userId = userId;\n    const name = `signal/${this.roomId}`;\n    this.name = name;\n    this.publishName = `signal/${this.roomId}/${this.clientId.toString(36)}`;\n    this.braidClient = braidClient;\n    this.ready = this.init();\n    this.logger = options.logger || braidClient.logger;\n    this.wrtc = options.wrtc;\n    this.socketMap = new Map();\n    this.userIds = new Set();\n    this.peerMap = new Map();\n    this.queueMap = new Map();\n    this.sessionMap = new Map();\n    this.requestCallbackMap = new Map();\n    this.signalQueueMap = new Map();\n    this.peerDisconnectTimeouts = new Map();\n\n    this.handleSet = (key:string, values:Array<Connection>) => {\n      if (key !== name) {\n        return;\n      }\n      this.active = true;\n      const oldSocketMap = this.socketMap;\n      const newSocketMap = getSocketMap(values);\n      const oldUserIds = this.userIds;\n      const newUserIds = getPeerIds(values);\n      const oldSessionMap = this.sessionMap;\n      const newSessionMap = getSessionMap(newSocketMap);\n      this.userIds = newUserIds;\n      this.socketMap = newSocketMap;\n      this.sessionMap = newSessionMap;\n      for (const [socketHash, socketData] of oldSocketMap) {\n        if (!newSocketMap.has(socketHash)) {\n          this.emit('socketLeave', socketData);\n        }\n      }\n      for (const [socketHash, socketData] of newSocketMap) {\n        if (!oldSocketMap.has(socketHash)) {\n          this.emit('socketJoin', socketData);\n        }\n      }\n      for (const peerUserId of oldUserIds) {\n        if (!newUserIds.has(peerUserId)) {\n          this.emit('leave', peerUserId);\n        }\n      }\n      for (const peerUserId of newUserIds) {\n        if (!oldUserIds.has(peerUserId)) {\n          this.emit('join', peerUserId);\n        }\n      }\n      for (const [sessionId, oldSessionSocketMap] of oldSessionMap) {\n        const newSessionSocketMap = newSessionMap.get(sessionId);\n        if (typeof newSessionSocketMap === 'undefined') {\n          for (const socketData of oldSessionSocketMap.values()) {\n            this.emit('sessionLeave', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of oldSessionSocketMap) {\n            if (!newSessionSocketMap.has(socketHash)) {\n              this.emit('sessionLeave', socketData);\n            }\n          }\n        }\n      }\n      for (const [sessionId, newSessionSocketMap] of newSessionMap) {\n        const oldSessionSocketMap = oldSessionMap.get(sessionId);\n        if (typeof oldSessionSocketMap === 'undefined') {\n          for (const socketData of newSessionSocketMap.values()) {\n            this.emit('sessionJoin', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of newSessionSocketMap) {\n            if (!oldSessionSocketMap.has(socketHash)) {\n              this.emit('sessionJoin', socketData);\n            }\n          }\n        }\n      }\n    };\n    this.braidClient.data.addListener('set', this.handleSet);\n    this.addListener('socketJoin', (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (this.peerDisconnectTimeouts.has(clientId)) {\n        this.logger.info(`Clearing client ${clientId} disconnect timeout after socket join`);\n        clearTimeout(this.peerDisconnectTimeouts.get(clientId));\n        this.peerDisconnectTimeouts.delete(clientId);\n      }\n      this.addToQueue(clientId, () => this.connectToPeer(socketData));\n    });\n    this.addListener('socketLeave', (socketData:Socket) => {\n      const { clientId } = socketData;\n      clearTimeout(this.peerDisconnectTimeouts.get(clientId));\n      if (this.active) {\n        this.peerDisconnectTimeouts.set(clientId, setTimeout(() => {\n          this.peerDisconnectTimeouts.delete(clientId);\n          this.addToQueue(clientId, () => this.disconnectFromPeer(socketData));\n        }, 15000));\n      } else {\n        this.addToQueue(clientId, () => this.disconnectFromPeer(socketData));\n      }\n    });\n    this.braidClient.addListener('close', () => {\n      const oldSocketData = [...this.socketMap.values()];\n      const oldUserIds = [...this.userIds];\n      this.socketMap.clear();\n      this.userIds.clear();\n      for (const socketData of oldSocketData) {\n        this.emit('socketLeave', socketData);\n      }\n      for (const oldUserId of oldUserIds) {\n        this.emit('leave', oldUserId);\n      }\n    });\n    this.braidClient.addListener('reconnect', (isReconnecting: boolean) => {\n      if (!isReconnecting) {\n        return;\n      }\n      const startedSessionId = this.startedSessionId;\n      const handleInitialized = () => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.info(`Restarting session ${startedSessionId}`);\n          this.startSession(startedSessionId).catch((error) => {\n            this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleClose = () => {\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleError = (error:Error) => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n          this.logger.errorStack(error);\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      this.braidClient.addListener('initialized', handleInitialized);\n      this.braidClient.addListener('close', handleClose);\n      this.braidClient.addListener('error', handleError);\n    });\n  }\n\n  async init() {\n    const promise = new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(new Error('Closed before initialization completed'));\n      };\n      const handleValue = (key:string, value:any) => {\n        if (key !== this.name) {\n          return;\n        }\n        if (typeof value === 'undefined') {\n          return;\n        }\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(error);\n      };\n      this.addListener('close', handleClose);\n      this.braidClient.data.addListener('set', handleValue);\n      this.braidClient.addListener('error', handleError);\n      handleValue(this.name, this.braidClient.data.get(this.name));\n    });\n    try {\n      await Promise.all([\n        this.braidClient.subscribe(this.name),\n        this.braidClient.addServerEventListener(this.name, this.handleMessage.bind(this)),\n      ]);\n      await promise;\n      await this.braidClient.startPublishing(this.publishName);\n    } catch (error) {\n      this.braidClient.logger.error(`Unable to join ${this.roomId}`);\n      throw error;\n    }\n  }\n\n  addToQueue(queueId:string | number, func:() => Promise<void>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      return queue.add(func);\n    }\n    const newQueue = new PQueue({ concurrency: 1 });\n    const promise = newQueue.add(func);\n    this.queueMap.set(queueId, newQueue);\n    newQueue.on('idle', () => {\n      this.queueMap.delete(queueId);\n    });\n    return promise;\n  }\n\n  async publish(type:string, value:Object, timeoutDuration?: number = 5000):Promise<{ text:string, code:number }> {\n    await this.ready;\n    const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        this.requestCallbackMap.delete(requestId);\n        reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n      }, timeoutDuration);\n      const handleResponse = (success:boolean, code: number, text:string) => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        if (success) {\n          resolve({ code, text });\n          return;\n        }\n        reject(new RequestError(text, code));\n      };\n      this.requestCallbackMap.set(requestId, handleResponse);\n      this.braidClient.publish(this.publishName, { requestId, type, value });\n    });\n  }\n\n  async connectToPeer({ userId, serverId, socketId, clientId, socketHash }:Socket) {\n    const existingPeer = this.peerMap.get(clientId);\n    const peer = existingPeer || new SimplePeer({ initiator: userId > this.userId, wrtc: this.wrtc });\n    this.peerMap.set(clientId, peer);\n    if (peer.connected) {\n      peer.emit('peerReconnect');\n      const handlePeerClose = () => {\n        this.logger.info(`Peer ${socketHash} disconnected`);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('peerReconnect', handlePeerReconnect);\n        this.emit('disconnect', { userId, serverId, socketId, peer });\n      };\n      const handlePeerError = (error:Error) => {\n        this.logger.error(`Peer ${socketHash} error`);\n        this.logger.errorStack(error);\n        this.emit('peerError', { error, userId, serverId, socketId, peer });\n      };\n      const handlePeerReconnect = () => {\n        this.logger.info(`Peer ${socketHash} reconnected`);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('peerReconnect', handlePeerReconnect);\n      };\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('error', handlePeerError);\n      peer.addListener('peerReconnect', handlePeerReconnect);\n      this.emit('connect', { userId, clientId, serverId, socketId, peer });\n      return;\n    }\n    await new Promise((resolve) => {\n      const timeout = setTimeout(() => {\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n        resolve();\n      }, 5000);\n      const handleConnect = () => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n        const handlePeerClose = () => {\n          this.logger.info(`Peer ${socketHash} disconnected`);\n          peer.removeListener('error', handlePeerError);\n          peer.removeListener('close', handlePeerClose);\n          peer.removeListener('peerReconnect', handlePeerReconnect);\n          this.emit('disconnect', { userId, serverId, socketId, peer });\n        };\n        const handlePeerError = (error:Error) => {\n          this.logger.error(`Peer ${socketHash} error`);\n          this.logger.errorStack(error);\n          this.emit('peerError', { error, userId, serverId, socketId, peer });\n        };\n        const handlePeerReconnect = () => {\n          this.logger.info(`Peer ${socketHash} reconnected`);\n          peer.removeListener('error', handlePeerError);\n          peer.removeListener('close', handlePeerClose);\n          peer.removeListener('peerReconnect', handlePeerReconnect);\n        };\n        peer.addListener('close', handlePeerClose);\n        peer.addListener('error', handlePeerError);\n        peer.addListener('peerReconnect', handlePeerReconnect);\n        this.emit('connect', { userId, clientId, serverId, socketId, peer });\n        resolve();\n      };\n      const handleSignal = async (data:Object) => {\n        try {\n          await this.publish(SIGNAL, { serverId, socketId, data });\n        } catch (error) {\n          this.logger.error(`Unable to signal ${socketHash}`);\n          this.logger.errorStack(error);\n        }\n      };\n      const handleClose = () => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n        this.logger.error(`Error connecting to ${userId}`);\n        this.logger.errorStack(error);\n        this.emit('error', error);\n        resolve();\n      };\n      const handleSocketLeave = ({ socketHash: oldSocketHash }:Socket) => {\n        if (socketHash !== oldSocketHash) {\n          return;\n        }\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n        this.logger.warn(`Unable to connect to ${userId}, socket closed before connection was completed`);\n        resolve();\n      };\n      peer.addListener('error', handleError);\n      peer.addListener('connect', handleConnect);\n      peer.addListener('signal', handleSignal);\n      this.addListener('close', handleClose);\n      this.addListener('socketLeave', handleSocketLeave);\n      const signalQueue = this.signalQueueMap.get(clientId);\n      if (Array.isArray(signalQueue)) {\n        while (signalQueue.length > 0) {\n          const data = signalQueue.shift();\n          peer.signal(data);\n        }\n      }\n    });\n  }\n\n  async disconnectFromPeer({ clientId }:Socket) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return;\n    }\n    peer.destroy();\n    this.peerMap.delete(clientId);\n  }\n\n  async onIdle() {\n    while (this.queueMap.size > 0) {\n      for (const queue of this.queueMap.values()) {\n        await queue.onIdle();\n      }\n      // $FlowFixMe\n      await new Promise((resolve) => queueMicrotask(resolve));\n    }\n  }\n\n  async startSession(sessionId:string) {\n    await this.publish(START_SESSION, { sessionId });\n    this.startedSessionId = sessionId;\n  }\n\n  async leaveSession() {\n    await this.publish(LEAVE_SESSION, {});\n    delete this.startedSessionId;\n  }\n\n  handleMessage(message:{ requestId?: number, type:string, value:Object }) {\n    if (typeof message !== 'object') {\n      this.logger.error('Invalid message format');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    const { requestId, type, value } = message;\n    if (typeof type !== 'string') {\n      this.logger.error('Invalid message format, type property should be of type \"string\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (typeof value !== 'object') {\n      this.logger.error('Invalid message format, value property should be of type \"object\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (type === RESPONSE && typeof requestId === 'number') {\n      const callback = this.requestCallbackMap.get(requestId);\n      if (typeof callback !== 'function') {\n        this.logger.error(`Callback for request ${requestId} does not exist`);\n        return;\n      }\n      const { success, code, text } = value;\n      if (typeof success !== 'boolean') {\n        this.logger.error('Response message contained an invalid value success property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value success property');\n        return;\n      }\n      if (typeof code !== 'number') {\n        this.logger.error('Response message contained an invalid value code property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value code property');\n        return;\n      }\n      if (typeof text !== 'string') {\n        this.logger.error('Response message contained an invalid value text property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value text property');\n        return;\n      }\n      callback(success, code, text);\n      return;\n    }\n    switch (type) {\n      case SIGNAL:\n        try {\n          const {\n            clientId,\n            serverId,\n            socketId,\n            data,\n          } = value;\n          if (typeof serverId !== 'number') {\n            this.logger.error('Signal message contained an invalid server ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof socketId !== 'number') {\n            this.logger.error('Signal message contained an invalid socket ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof data !== 'object') {\n            this.logger.error('Signal message contained an invalid data property');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const peer = this.peerMap.get(clientId);\n          if (typeof peer === 'undefined') {\n            const signalQueue = this.signalQueueMap.get(clientId);\n            if (Array.isArray(signalQueue)) {\n              signalQueue.push(data);\n              return;\n            }\n            this.signalQueueMap.set(clientId, [data]);\n            return;\n          }\n          if (peer.destroyed || peer.destroying) {\n            return;\n          }\n          peer.signal(data);\n        } catch (error) {\n          this.logger.error('Unable to process signal message');\n          this.logger.errorStack(error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown message type ${type}`);\n    }\n  }\n\n  close() {\n    this.active = false;\n    const oldSocketData = [...this.socketMap.values()];\n    const oldUserIds = [...this.userIds];\n    this.braidClient.data.removeListener('set', this.handleSet);\n    this.braidClient.stopPublishing(this.publishName);\n    this.braidClient.unsubscribe(this.name);\n    this.braidClient.removeServerEventListener(this.name);\n    this.socketMap.clear();\n    this.userIds.clear();\n    for (const timeout of this.peerDisconnectTimeouts.values()) {\n      clearTimeout(timeout);\n    }\n    for (const socketData of oldSocketData) {\n      this.emit('socketLeave', socketData);\n    }\n    for (const userId of oldUserIds) {\n      this.emit('leave', userId);\n    }\n    this.emit('close');\n  }\n}\n\n"],"file":"index.js"}