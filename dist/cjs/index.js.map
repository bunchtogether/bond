{"version":3,"sources":["../../src/index.js"],"names":["getSocketMap","values","Map","map","x","socketHash","socketId","serverId","userId","clientId","sessionId","getSessionId","getPeerIds","Set","getSessionMap","socketMap","socket","sessionClientMap","get","set","Bond","braidClient","roomId","options","active","Math","floor","random","Number","MAX_SAFE_INTEGER","name","publishName","toString","logger","peerOptions","userIds","peerMap","peerReconnectMap","queueMap","sessionMap","inviteDeclineHandlerMap","requestCallbackMap","signalQueueMap","peerDisconnectTimeoutMap","sessionJoinHandlerMap","sessionJoinRequestMap","data","ObservedRemoveMap","bufferPublishing","sessionClientOffsetMap","addListener","handleSessionClientJoin","bind","_ready","init","ready","joinSession","socketData","has","info","clearTimeout","delete","addToQueue","connectToPeer","setTimeout","disconnectFromPeer","sessionClientIds","size","leaveSessionAfterLastClientTimeout","leaveSession","error","errorStack","clear","handleBraidSet","key","oldSessionId","newSessionId","oldSocketMap","newSocketMap","oldUserIds","newUserIds","oldSessionMap","newSessionMap","oldLocalSessionSocketMap","newLocalSessionSocketMap","emit","peerUserId","oldSessionSocketMap","newSessionSocketMap","handleBraidClose","reset","handleBraidCloseRequested","close","handleBraidReconnect","isReconnecting","startedSessionId","joinedSessionId","handleInitialized","startSession","catch","removeListener","handleClose","handleError","clientIds","keys","promise","Promise","resolve","reject","handleValue","Error","value","all","subscribe","addServerEventListener","handleMessage","startPublishing","queueId","func","queue","add","newQueue","PQueue","concurrency","on","type","timeoutDuration","CustomError","RequestError","requestId","timeout","ClientClosedError","RequestTimeoutError","handleResponse","success","code","text","publish","peer","connected","reconnectCount","reconnectDelay","round","handleSocketLeave","oldSocketHash","existingPeer","Object","assign","initiator","SimplePeer","addPeerListeners","cleanup","handleSignal","handleStream","handlePeerError","handlePeerClose","handlePeerReconnect","SIGNAL","SignalError","stream","getTracks","forEach","track","stop","dispatchEvent","Event","warn","handleConnect","signalQueue","Array","isArray","length","shift","signal","getConnectedPeer","addStream","removeStream","destroy","onIdle","queueMicrotask","sessionJoinHandler","SESSION_QUEUE","hasSessionId","globalThis","crypto","randomUUID","INVITE_TO_SESSION","InviteToSessionError","automaticSessionJoinHandler","handleSessionJoin","handleLeave","handleSession","InvitationTimeoutError","isOnlySocketForUserId","InvitedUserLeftError","handleDecline","InvitationDeclinedError","previousStartedSessionId","START_SESSION","StartSessionError","previousJoinedSessionId","JOIN_SESSION","JoinSessionError","LEAVE_SESSION","LeaveSessionError","message","JSON","stringify","RESPONSE","callback","push","destroyed","destroying","DECLINE_INVITE_TO_SESSION","requestHash","inviteDeclineHandler","ABORT_SESSION_JOIN_REQUEST","existing","abort","SESSION_JOIN_REQUEST","abortController","AbortController","addEventListener","response","abortSignal","aborted","SESSION_JOIN_RESPONSE","SessionJoinResponseError","_peer","handleSessionClientLeave","handlePeer","newClientId","_p","oldClientId","interval","offset","handlePeerData","handleDataPublish","clearInterval","sendToPeer","ObservedRemoveDump","unpacked","send","packed","Ping","Pong","timestamp","Date","now","wallclock","performance","process","isConnectedToClient","removeEventListener","handleAbort","setInterval","dump","DeclineInviteToSessionError","finally","stopPublishing","removeServerEventListener","unsubscribe","EventEmitter","AbortError","responseId","responseType","responseValue","then","declineInviteToSession"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport ObservedRemoveMap from 'observed-remove/dist/map';\nimport type BraidClient from '@bunchtogether/braid-client';\nimport SimplePeer from 'simple-peer';\nimport PQueue from 'p-queue';\nimport {\n  pack,\n  unpack,\n} from 'msgpackr';\nimport {\n  SIGNAL,\n  START_SESSION,\n  LEAVE_SESSION,\n  JOIN_SESSION,\n  INVITE_TO_SESSION,\n  DECLINE_INVITE_TO_SESSION,\n  SESSION_QUEUE,\n  ABORT_SESSION_JOIN_REQUEST,\n  SESSION_JOIN_REQUEST,\n  SESSION_JOIN_RESPONSE,\n  RESPONSE,\n} from './constants';\nimport {\n  AbortError,\n  RequestError,\n  StartSessionError,\n  RequestTimeoutError,\n  JoinSessionError,\n  LeaveSessionError,\n  SignalError,\n  SessionJoinResponseError,\n  ClientClosedError,\n  InviteToSessionError,\n  InvitationDeclinedError,\n  InvitedUserLeftError,\n  InvitationTimeoutError,\n  DeclineInviteToSessionError,\n} from './errors';\nimport {\n  Ping,\n  Pong,\n  ObservedRemoveDump,\n} from './messagepack';\n\ntype Logger = {\n  debug: (string | number, ...any) => void,\n  info: (string | number, ...any) => void,\n  warn: (string | number, ...any) => void,\n  error: (string | number, ...any) => void,\n  errorStack: (error:Error | MediaError) => void,\n};\n\ntype Options = {\n  peerOptions?: Object,\n  logger?: Logger,\n  sessionId?: string\n}\n\nexport type SessionJoinHandler = ({ sessionId: string, userId: string, abortSignal: AbortSignal }) => [boolean, number, string] | Promise<[boolean, number, string]>;\nexport type Connection = [number, number, string, number, string | false];\nexport type Socket = { socketHash: string, socketId: number, serverId: number, userId: string, clientId: number, sessionId: string | false };\n\nconst getSocketMap = (values?:Array<Connection>):Map<string, Socket> => {\n  if (typeof values === 'undefined') {\n    return new Map();\n  }\n  return new Map(values.map((x) => {\n    const socketHash = `${x[0]}:${x[1]}`;\n    return [socketHash, { socketHash, socketId: x[0], serverId: x[1], userId: x[2], clientId: x[3], sessionId: x[4] }];\n  }));\n};\n\nconst getSessionId = (values?:Array<Connection>, clientId:number):(string | false) => {\n  if (typeof values === 'undefined') {\n    return false;\n  }\n  for (const x of values) {\n    if (x[3] === clientId) {\n      return x[4] || false;\n    }\n  }\n  return false;\n};\n\nconst getPeerIds = (values?:Array<Connection>):Set<string> => {\n  if (typeof values === 'undefined') {\n    return new Set();\n  }\n  return new Set(values.map((x) => x[2]));\n};\n\nconst getSessionMap = (socketMap:Map<string, Socket>):Map<string | false, Map<number, Socket>> => {\n  const map = new Map();\n  for (const socket of socketMap.values()) {\n    const { clientId, sessionId } = socket;\n    const sessionClientMap = map.get(sessionId);\n    if (typeof sessionClientMap === 'undefined') {\n      map.set(sessionId, new Map([[clientId, socket]]));\n    } else {\n      sessionClientMap.set(clientId, socket);\n    }\n  }\n  return map;\n};\n\nexport class Bond extends EventEmitter {\n  static declineInviteToSession: (BraidClient, AbortSignal, { roomId: string, userId: string, clientId: number, sessionId: string, data: Object }) => Promise<{ code:number, text:string }>;\n\n  declare roomId: string;\n  declare clientId: number;\n  declare userId: string;\n  declare name: string;\n  declare publishName: string;\n  declare braidClient: BraidClient;\n  declare logger: Logger;\n  declare _ready: Promise<void>;\n  declare ready: Promise<void>;\n  declare socketMap: Map<string, Socket>;\n  declare sessionMap: Map<string | false, Map<number, Socket>>;\n  declare userIds: Set<string>;\n  declare peerOptions: void | Object;\n  declare peerMap: Map<number, SimplePeer>;\n  declare peerReconnectMap: Map<number, number>;\n  declare queueMap: Map<string | number, PQueue>;\n  declare handleBraidSet: (string, any) => void;\n  declare handleBraidClose: () => void;\n  declare handleBraidCloseRequested: () => void;\n  declare handleBraidReconnect: (boolean) => void;\n  declare signalQueueMap: Map<number, Array<[string, Object]>>;\n  declare requestCallbackMap: Map<number, (boolean, number, string) => void | Promise<void>>;\n  declare inviteDeclineHandlerMap: Map<string, () => Promise<void>>;\n  declare sessionId: false | string;\n  declare startedSessionId: void | string;\n  declare joinedSessionId: void | string;\n  declare active: boolean;\n  declare peerDisconnectTimeoutMap: Map<number, TimeoutID>;\n  declare sessionJoinHandlerMap: Map<string, SessionJoinHandler>;\n  declare sessionJoinRequestMap: Map<string, [Promise<void>, AbortController]>;\n  declare data: ObservedRemoveMap<string | number, any>;\n  declare sessionClientOffsetMap: Map<number, number>;\n  declare leaveSessionAfterLastClientTimeout: void | TimeoutID;\n\n  constructor(braidClient: BraidClient, roomId:string, userId:string, options?: Options = {}) {\n    super();\n    this.active = true;\n    this.clientId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    this.userId = userId;\n    this.roomId = roomId;\n    this.sessionId = false;\n    const name = `signal/${this.roomId}`;\n    this.name = name;\n    this.publishName = `signal/${this.roomId}/${this.clientId.toString(36)}`;\n    this.braidClient = braidClient;\n    this.logger = options.logger || braidClient.logger;\n    this.peerOptions = options.peerOptions;\n    this.socketMap = new Map();\n    this.userIds = new Set();\n    this.peerMap = new Map();\n    this.peerReconnectMap = new Map();\n    this.queueMap = new Map();\n    this.sessionMap = new Map();\n    this.inviteDeclineHandlerMap = new Map();\n    this.requestCallbackMap = new Map();\n    this.signalQueueMap = new Map();\n    this.peerDisconnectTimeoutMap = new Map();\n    this.sessionJoinHandlerMap = new Map();\n    this.sessionJoinRequestMap = new Map();\n    this.data = new ObservedRemoveMap([], { bufferPublishing: 0 });\n    this.sessionClientOffsetMap = new Map();\n    this.addListener('sessionClientJoin', this.handleSessionClientJoin.bind(this));\n    this._ready = this.init(); // eslint-disable-line no-underscore-dangle\n    if (typeof options.sessionId === 'string') {\n      this.ready = this.joinSession(options.sessionId);\n    } else {\n      this.ready = this._ready; // eslint-disable-line no-underscore-dangle\n    }\n    this.addListener('socketJoin', (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (clientId === this.clientId) {\n        return;\n      }\n      if (this.peerDisconnectTimeoutMap.has(clientId)) {\n        this.logger.info(`Clearing client ${clientId} disconnect timeout after socket join`);\n        clearTimeout(this.peerDisconnectTimeoutMap.get(clientId));\n        this.peerDisconnectTimeoutMap.delete(clientId);\n      }\n      this.addToQueue(clientId, () => this.connectToPeer(socketData));\n    });\n    this.addListener('socketLeave', (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (clientId === this.clientId) {\n        return;\n      }\n      clearTimeout(this.peerDisconnectTimeoutMap.get(clientId));\n      if (this.active) {\n        this.peerDisconnectTimeoutMap.set(clientId, setTimeout(() => {\n          this.peerDisconnectTimeoutMap.delete(clientId);\n          this.addToQueue(clientId, () => this.disconnectFromPeer(socketData));\n        }, 15000));\n      } else {\n        this.addToQueue(clientId, () => this.disconnectFromPeer(socketData));\n      }\n    });\n    this.addListener('sessionClientJoin', () => {\n      const sessionClientIds = this.sessionClientIds;\n      if (sessionClientIds.size > 1) {\n        return;\n      }\n      clearTimeout(this.leaveSessionAfterLastClientTimeout);\n    });\n    this.addListener('sessionClientLeave', async () => {\n      const sessionClientIds = this.sessionClientIds;\n      if (sessionClientIds.size > 1) {\n        return;\n      }\n      this.leaveSessionAfterLastClientTimeout = setTimeout(async () => {\n        try {\n          await this.leaveSession();\n        } catch (error) {\n          this.logger.error('Unable to leave session after timeout when last session closed');\n          this.logger.errorStack(error);\n        }\n      }, 5000);\n    });\n\n    this.addListener('session', async () => {\n      this.data.clear();\n      this.sessionClientOffsetMap.clear();\n    });\n\n    this.handleBraidSet = (key:string, values:Array<Connection>) => {\n      if (key !== name) {\n        return;\n      }\n      this.active = true;\n      const oldSessionId = this.sessionId;\n      const newSessionId = getSessionId(values, this.clientId);\n      const oldSocketMap = this.socketMap;\n      const newSocketMap = getSocketMap(values);\n      const oldUserIds = this.userIds;\n      const newUserIds = getPeerIds(values);\n      const oldSessionMap = this.sessionMap;\n      const newSessionMap = getSessionMap(newSocketMap);\n      const oldLocalSessionSocketMap = typeof oldSessionId === 'string' ? oldSessionMap.get(oldSessionId) || new Map() : new Map();\n      const newLocalSessionSocketMap = typeof newSessionId === 'string' ? newSessionMap.get(newSessionId) || new Map() : new Map();\n      this.sessionId = newSessionId;\n      this.userIds = newUserIds;\n      this.socketMap = newSocketMap;\n      this.sessionMap = newSessionMap;\n      if (newSessionId !== oldSessionId) {\n        this.emit('session', newSessionId);\n      }\n      for (const [socketHash, socketData] of oldSocketMap) {\n        if (!newSocketMap.has(socketHash)) {\n          this.emit('socketLeave', socketData);\n        }\n      }\n      for (const [socketHash, socketData] of newSocketMap) {\n        if (!oldSocketMap.has(socketHash)) {\n          this.emit('socketJoin', socketData);\n        }\n      }\n      for (const peerUserId of oldUserIds) {\n        if (!newUserIds.has(peerUserId)) {\n          this.emit('leave', peerUserId);\n        }\n      }\n      for (const peerUserId of newUserIds) {\n        if (!oldUserIds.has(peerUserId)) {\n          this.emit('join', peerUserId);\n        }\n      }\n      for (const [clientId, socketData] of oldLocalSessionSocketMap) {\n        if (clientId === this.clientId) {\n          continue;\n        }\n        if (!newLocalSessionSocketMap.has(clientId)) {\n          this.emit('sessionClientLeave', clientId, socketData);\n        }\n      }\n      for (const [clientId, socketData] of newLocalSessionSocketMap) {\n        if (clientId === this.clientId) {\n          continue;\n        }\n        if (!oldLocalSessionSocketMap.has(clientId)) {\n          this.emit('sessionClientJoin', clientId, socketData);\n        }\n      }\n      for (const [sessionId, oldSessionSocketMap] of oldSessionMap) {\n        const newSessionSocketMap = newSessionMap.get(sessionId);\n        if (typeof newSessionSocketMap === 'undefined') {\n          for (const socketData of oldSessionSocketMap.values()) {\n            this.emit('sessionLeave', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of oldSessionSocketMap) {\n            if (!newSessionSocketMap.has(socketHash)) {\n              this.emit('sessionLeave', socketData);\n            }\n          }\n        }\n      }\n      for (const [sessionId, newSessionSocketMap] of newSessionMap) {\n        const oldSessionSocketMap = oldSessionMap.get(sessionId);\n        if (typeof oldSessionSocketMap === 'undefined') {\n          for (const socketData of newSessionSocketMap.values()) {\n            this.emit('sessionJoin', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of newSessionSocketMap) {\n            if (!oldSessionSocketMap.has(socketHash)) {\n              this.emit('sessionJoin', socketData);\n            }\n          }\n        }\n      }\n    };\n    this.handleBraidClose = () => {\n      this.reset();\n    };\n    this.handleBraidCloseRequested = () => {\n      this.close();\n    };\n    this.handleBraidReconnect = (isReconnecting: boolean) => {\n      if (!isReconnecting) {\n        return;\n      }\n      const startedSessionId = this.startedSessionId;\n      const joinedSessionId = this.joinedSessionId;\n      const handleInitialized = () => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.info(`Restarting session ${startedSessionId}`);\n          this.startSession(startedSessionId).catch((error) => {\n            this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        if (typeof joinedSessionId === 'string') {\n          this.logger.info(`Rejoining session ${joinedSessionId}`);\n          this.joinSession(joinedSessionId).catch((error) => {\n            this.logger.error(`Unable to rejoin session ${joinedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleClose = () => {\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleError = (error:Error) => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n          this.logger.errorStack(error);\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      this.braidClient.addListener('initialized', handleInitialized);\n      this.braidClient.addListener('close', handleClose);\n      this.braidClient.addListener('error', handleError);\n    };\n    this.braidClient.data.addListener('set', this.handleBraidSet);\n    this.braidClient.addListener('close', this.handleBraidClose);\n    this.braidClient.addListener('closeRequested', this.handleBraidCloseRequested);\n    this.braidClient.addListener('reconnect', this.handleBraidReconnect);\n  }\n\n  get sessionClientIds():Set<number> {\n    const sessionId = this.sessionId;\n    if (typeof sessionId !== 'string') {\n      return new Set();\n    }\n    const sessionClientMap = this.sessionMap.get(sessionId);\n    if (typeof sessionClientMap === 'undefined') {\n      return new Set();\n    }\n    const clientIds = new Set(sessionClientMap.keys());\n    clientIds.delete(this.clientId);\n    return clientIds;\n  }\n\n  async init() {\n    const promise = new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(new Error('Closed before initialization completed'));\n      };\n      const handleValue = (key:string, value:any) => {\n        if (key !== this.name) {\n          return;\n        }\n        if (typeof value === 'undefined') {\n          return;\n        }\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(error);\n      };\n      this.addListener('close', handleClose);\n      this.braidClient.data.addListener('set', handleValue);\n      this.braidClient.addListener('error', handleError);\n      handleValue(this.name, this.braidClient.data.get(this.name));\n    });\n    try {\n      await Promise.all([\n        this.braidClient.subscribe(this.name),\n        this.braidClient.addServerEventListener(this.name, this.handleMessage.bind(this)),\n      ]);\n      if (!this.active) {\n        return;\n      }\n      await promise;\n      if (!this.active) {\n        return;\n      }\n      await this.braidClient.startPublishing(this.publishName);\n    } catch (error) {\n      this.braidClient.logger.error(`Unable to join ${this.roomId}`);\n      throw error;\n    }\n  }\n\n  addToQueue(queueId:string | number, func:() => Promise<*>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      return queue.add(func);\n    }\n    const newQueue = new PQueue({ concurrency: 1 });\n    const promise = newQueue.add(func);\n    this.queueMap.set(queueId, newQueue);\n    newQueue.on('idle', () => {\n      this.queueMap.delete(queueId);\n    });\n    return promise;\n  }\n\n  async publish(type:string, value:Object, options?: { timeoutDuration?: number, CustomError?: Class<RequestError> } = {}):Promise<{ text:string, code:number }> {\n    await this._ready; // eslint-disable-line no-underscore-dangle\n    const timeoutDuration = typeof options.timeoutDuration === 'number' ? options.timeoutDuration : 5000;\n    const CustomError = typeof options.CustomError === 'function' ? options.CustomError : RequestError;\n    const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    return new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        reject(new ClientClosedError(`Client closed before ${type} request completed`));\n      };\n      const timeout = setTimeout(() => {\n        this.requestCallbackMap.delete(requestId);\n        this.removeListener('close', handleClose);\n        reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n      }, timeoutDuration);\n      const handleResponse = (success:boolean, code: number, text:string) => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        if (success) {\n          resolve({ code, text });\n          return;\n        }\n        reject(new CustomError(text, code));\n      };\n      this.addListener('close', handleClose);\n      this.requestCallbackMap.set(requestId, handleResponse);\n      this.braidClient.publish(this.publishName, { requestId, type, value });\n    });\n  }\n\n  isConnectedToClient(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return false;\n    }\n    return !!peer.connected;\n  }\n\n  async connectToPeer(socket:Socket) {\n    const { userId, serverId, socketId, clientId, socketHash } = socket;\n    const reconnectCount = this.peerReconnectMap.get(clientId) || 0;\n    const reconnectDelay = reconnectCount > 5 ? 30000 : 1000 * (reconnectCount * reconnectCount);\n    if (reconnectDelay > 0) {\n      this.logger.info(`Delaying connect by ${Math.round(reconnectDelay / 1000)} ${reconnectDelay === 1000 ? 'second' : 'seconds'} on attempt ${reconnectCount}`);\n      await new Promise((resolve) => {\n        const timeout = setTimeout(() => {\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        }, reconnectDelay);\n        const handleClose = () => {\n          clearTimeout(timeout);\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        };\n        const handleSocketLeave = ({ socketHash: oldSocketHash }:Socket) => {\n          if (socketHash !== oldSocketHash) {\n            return;\n          }\n          clearTimeout(timeout);\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        };\n        this.addListener('close', handleClose);\n        this.addListener('socketLeave', handleSocketLeave);\n      });\n      if (!this.socketMap.has(socketHash)) {\n        return;\n      }\n    }\n    const existingPeer = this.peerMap.get(clientId);\n    const options = Object.assign({}, { initiator: clientId > this.clientId }, this.peerOptions);\n    const peer = existingPeer || new SimplePeer(options);\n    this.peerMap.set(clientId, peer);\n    this.peerReconnectMap.set(clientId, reconnectCount + 1);\n    this.emit('peer', { clientId, peer });\n    const addPeerListeners = () => {\n      this.peerReconnectMap.set(clientId, 0);\n      const cleanup = () => {\n        peer.removeListener('signal', handleSignal);\n        peer.removeListener('stream', handleStream);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('peerReconnect', handlePeerReconnect);\n      };\n      const handleSignal = async (data:Object) => {\n        try {\n          await this.publish(SIGNAL, { serverId, socketId, data }, { CustomError: SignalError });\n        } catch (error) {\n          this.logger.error(`Unable to signal user ${userId} client ${clientId} closed`);\n          this.logger.errorStack(error);\n        }\n      };\n      const handleStream = (stream:MediaStream) => {\n        if (!this.sessionClientIds.has(clientId)) {\n          this.logger.error(`Received an unexpected stream from non-session user ${userId} client ${clientId}`);\n          stream.getTracks().forEach((track) => {\n            track.stop();\n            track.dispatchEvent(new Event('stop'));\n          });\n          return;\n        }\n        this.emit('stream', { stream, userId, serverId, socketId, clientId });\n      };\n      const handlePeerClose = () => {\n        this.logger.info(`Disconnected from user ${userId} client ${clientId}`);\n        cleanup();\n        this.emit('disconnect', { userId, serverId, socketId, clientId });\n        if (this.peerMap.has(clientId)) {\n          this.peerMap.delete(clientId);\n          this.connectToPeer(socket);\n          this.logger.warn(`Reconnecting to user ${userId} client ${clientId}`);\n        }\n      };\n      const handlePeerError = (error:Error) => {\n        this.logger.error(`Error in connection to user ${userId} client ${clientId}`);\n        this.logger.errorStack(error);\n        this.emit('peerError', { userId, serverId, socketId, clientId, error });\n      };\n      const handlePeerReconnect = () => {\n        this.logger.info(`Reconnected to user ${userId} client ${clientId}`);\n        cleanup();\n      };\n      peer.addListener('signal', handleSignal);\n      peer.addListener('stream', handleStream);\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('error', handlePeerError);\n      peer.addListener('peerReconnect', handlePeerReconnect);\n    };\n    if (peer.connected) {\n      peer.emit('peerReconnect');\n      addPeerListeners();\n      this.emit('connect', { userId, clientId, serverId, socketId, peer });\n      return;\n    }\n    await new Promise((resolve) => {\n      const cleanup = () => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n      };\n      const timeout = setTimeout(() => {\n        cleanup();\n        resolve();\n      }, 5000);\n      const handleConnect = () => {\n        cleanup();\n        addPeerListeners();\n        this.emit('connect', { userId, clientId, serverId, socketId, peer });\n        resolve();\n      };\n      const handleSignal = async (data:Object) => {\n        try {\n          await this.publish(SIGNAL, { serverId, socketId, data }, { CustomError: SignalError });\n        } catch (error) {\n          this.logger.error(`Unable to signal user ${userId} client ${clientId} closed`);\n          this.logger.errorStack(error);\n        }\n      };\n      const handleClose = () => {\n        cleanup();\n        resolve();\n      };\n      const handlePeerClose = () => {\n        this.logger.info(`Connection to user ${userId} client ${clientId} closed`);\n        cleanup();\n        if (this.peerMap.has(clientId)) {\n          this.peerMap.delete(clientId);\n          this.connectToPeer(socket);\n          this.logger.warn(`Reconnecting to user ${userId} client ${clientId}`);\n        }\n        resolve();\n      };\n      const handlePeerError = (error:Error) => {\n        cleanup();\n        this.logger.error(`Error connecting to ${userId}`);\n        this.logger.errorStack(error);\n        this.emit('peerError', { userId, serverId, socketId, clientId, error });\n        this.emit('error', error);\n        resolve();\n      };\n      const handleSocketLeave = ({ socketHash: oldSocketHash }:Socket) => {\n        if (socketHash !== oldSocketHash) {\n          return;\n        }\n        cleanup();\n        this.logger.warn(`Unable to connect to user ${userId} client ${clientId}, socket closed before connection was completed`);\n        resolve();\n      };\n      peer.addListener('error', handlePeerError);\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('connect', handleConnect);\n      peer.addListener('signal', handleSignal);\n      this.addListener('close', handleClose);\n      this.addListener('socketLeave', handleSocketLeave);\n      const signalQueue = this.signalQueueMap.get(clientId);\n      if (Array.isArray(signalQueue)) {\n        while (signalQueue.length > 0) {\n          const data = signalQueue.shift();\n          peer.signal(data);\n        }\n      }\n    });\n  }\n\n  async addStream(clientId:number, stream:MediaStream) {\n    const peer = await this.getConnectedPeer(clientId);\n    peer.addStream(stream);\n  }\n\n  async removeStream(clientId:number, stream:MediaStream) {\n    const peer = await this.getConnectedPeer(clientId);\n    peer.removeStream(stream);\n  }\n\n  async disconnectFromPeer({ clientId }:Socket) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return;\n    }\n    this.peerMap.delete(clientId);\n    peer.destroy();\n  }\n\n  async onIdle() {\n    while (this.queueMap.size > 0) {\n      for (const queue of this.queueMap.values()) {\n        await queue.onIdle();\n      }\n      // $FlowFixMe\n      await new Promise((resolve) => queueMicrotask(resolve));\n    }\n  }\n\n  didStartSession() {\n    if (!this.sessionId) {\n      return false;\n    }\n    return this.startedSessionId === this.sessionId;\n  }\n\n  async inviteToSession(userId:string, options?:{ data?:Object, timeoutDuration?: number, sessionJoinHandler?: SessionJoinHandler } = {}) {\n    const { data, timeoutDuration = 30000, sessionJoinHandler } = options;\n    const queue = this.queueMap.get(SESSION_QUEUE);\n    if (typeof queue !== 'undefined') {\n      await queue.onIdle();\n    }\n    const hasSessionId = this.sessionId === 'string';\n    // $FlowFixMe\n    const sessionId = this.sessionId || globalThis.crypto.randomUUID(); // eslint-disable-line no-undef\n    if (hasSessionId) {\n      await this.publish(INVITE_TO_SESSION, { userId, sessionId, data }, { CustomError: InviteToSessionError });\n    } else {\n      const automaticSessionJoinHandler = async (values) => {\n        if (values.userId === userId) {\n          return [true, 200, 'Authorized'];\n        }\n        if (typeof sessionJoinHandler === 'function') {\n          return sessionJoinHandler(values);\n        }\n        return [true, 200, 'Authorized'];\n      };\n      await this.startSession(sessionId, automaticSessionJoinHandler);\n      await this.publish(INVITE_TO_SESSION, { userId, sessionId, data }, { CustomError: InviteToSessionError });\n    }\n    await new Promise((resolve, reject) => {\n      const cleanup = () => {\n        clearTimeout(timeout);\n        this.removeListener('sessionJoin', handleSessionJoin);\n        this.removeListener('close', handleClose);\n        this.removeListener('leave', handleLeave);\n        this.removeListener('session', handleSession);\n        this.removeListener('socketLeave', handleSocketLeave);\n        this.inviteDeclineHandlerMap.delete(`${userId}:${sessionId}`);\n      };\n      const leaveSession = async () => {\n        if (hasSessionId) {\n          return;\n        }\n        try {\n          await this.leaveSession();\n        } catch (error) {\n          this.logger.error('Unable to leave session after invite timeout');\n          this.logger.errorStack(error);\n        }\n      };\n      const timeout = setTimeout(async () => {\n        cleanup();\n        await leaveSession();\n        reject(new InvitationTimeoutError(`Invitation timed out after ${Math.round(timeoutDuration / 100) / 10} seconds`));\n      }, timeoutDuration);\n      const handleSessionJoin = (socket: Socket) => {\n        if (socket.sessionId !== sessionId) {\n          return;\n        }\n        if (socket.userId !== userId) {\n          return;\n        }\n        cleanup();\n        resolve();\n      };\n      // Only listen for socket leave events if the user is inviting themselves\n      const handleSocketLeave = async (socket: Socket) => {\n        if (socket.userId !== this.userId) {\n          return;\n        }\n        let isOnlySocketForUserId = true;\n        for (const socketData of this.socketMap.values()) {\n          if (socketData.userId !== this.userId) {\n            continue;\n          }\n          if (socketData.clientId === this.clientId) {\n            continue;\n          }\n          isOnlySocketForUserId = false;\n        }\n        if (isOnlySocketForUserId) {\n          cleanup();\n          await leaveSession();\n          reject(new InvitedUserLeftError(`User ${userId} left before accepting the invitation`));\n        }\n      };\n      const handleSession = (newSessionId:string | false) => {\n        if (newSessionId === sessionId) {\n          return;\n        }\n        cleanup();\n        resolve();\n      };\n      const handleClose = () => {\n        cleanup();\n        reject(new ClientClosedError('Closed before invite'));\n      };\n      const handleDecline = async () => {\n        cleanup();\n        await leaveSession();\n        reject(new InvitationDeclinedError('Invitation declined'));\n      };\n      const handleLeave = async (peerUserId:string) => {\n        if (userId !== peerUserId) {\n          return;\n        }\n        cleanup();\n        await leaveSession();\n        reject(new InvitedUserLeftError(`User ${userId} left before accepting the invitation`));\n      };\n      this.inviteDeclineHandlerMap.set(`${userId}:${sessionId || ''}`, handleDecline);\n      this.addListener('sessionJoin', handleSessionJoin);\n      this.addListener('close', handleClose);\n      this.addListener('leave', handleLeave);\n      this.addListener('session', handleSession);\n      if (this.userId === userId) {\n        this.addListener('socketLeave', handleSocketLeave);\n      }\n    });\n  }\n\n  async startSession(sessionId:string, sessionJoinHandler?: SessionJoinHandler) {\n    const previousStartedSessionId = this.startedSessionId;\n    this.startedSessionId = sessionId;\n    try {\n      await this.addToQueue(SESSION_QUEUE, () => this.publish(START_SESSION, { sessionId }, { CustomError: StartSessionError }));\n    } catch (error) {\n      this.startedSessionId = previousStartedSessionId;\n    }\n    delete this.joinedSessionId;\n    if (typeof sessionJoinHandler === 'function') {\n      this.sessionJoinHandlerMap.set(sessionId, sessionJoinHandler);\n    } else {\n      this.sessionJoinHandlerMap.set(sessionId, () => [true, 200, 'Authorized']);\n    }\n  }\n\n  didJoinSession() {\n    if (!this.sessionId) {\n      return false;\n    }\n    return this.joinedSessionId === this.sessionId;\n  }\n\n  async joinSession(sessionId:string, timeoutDuration?: number = 30000) {\n    const previousJoinedSessionId = this.joinedSessionId;\n    this.joinedSessionId = sessionId;\n    try {\n      await this.addToQueue(SESSION_QUEUE, () => this.publish(JOIN_SESSION, { sessionId, timeoutDuration }, { CustomError: JoinSessionError }));\n    } catch (error) {\n      this.joinedSessionId = previousJoinedSessionId;\n      throw error;\n    }\n    const startedSessionId = this.startedSessionId;\n    delete this.startedSessionId;\n    if (typeof startedSessionId === 'string') {\n      this.sessionJoinHandlerMap.delete(startedSessionId);\n    }\n  }\n\n  async leaveSession() {\n    try {\n      await this.addToQueue(SESSION_QUEUE, () => this.publish(LEAVE_SESSION, {}, { CustomError: LeaveSessionError }));\n      const startedSessionId = this.startedSessionId;\n      delete this.startedSessionId;\n      delete this.joinedSessionId;\n      if (typeof startedSessionId === 'string') {\n        this.sessionJoinHandlerMap.delete(startedSessionId);\n      }\n    } catch (error) {\n      if (error instanceof ClientClosedError) {\n        return;\n      }\n      throw error;\n    }\n  }\n\n  async handleMessage(message:{ requestId?: number, type:string, value:Object }) {\n    if (typeof message !== 'object') {\n      this.logger.error('Invalid message format');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    const { requestId, type, value } = message;\n    if (typeof type !== 'string') {\n      this.logger.error('Invalid message format, type property should be of type \"string\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (typeof value !== 'object') {\n      this.logger.error('Invalid message format, value property should be of type \"object\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (type === RESPONSE && typeof requestId === 'number') {\n      const callback = this.requestCallbackMap.get(requestId);\n      if (typeof callback !== 'function') {\n        this.logger.error(`Callback for request ${requestId} does not exist`);\n        return;\n      }\n      const { success, code, text } = value;\n      if (typeof success !== 'boolean') {\n        this.logger.error('Response message contained an invalid value success property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value success property');\n        return;\n      }\n      if (typeof code !== 'number') {\n        this.logger.error('Response message contained an invalid value code property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value code property');\n        return;\n      }\n      if (typeof text !== 'string') {\n        this.logger.error('Response message contained an invalid value text property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value text property');\n        return;\n      }\n      callback(success, code, text);\n      return;\n    }\n    switch (type) {\n      case SIGNAL:\n        try {\n          const {\n            clientId,\n            serverId,\n            socketId,\n            data,\n          } = value;\n          if (typeof serverId !== 'number') {\n            this.logger.error('Signal message contained an invalid server ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof socketId !== 'number') {\n            this.logger.error('Signal message contained an invalid socket ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof data !== 'object') {\n            this.logger.error('Signal message contained an invalid data property');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const peer = this.peerMap.get(clientId);\n          if (typeof peer === 'undefined') {\n            const signalQueue = this.signalQueueMap.get(clientId);\n            if (Array.isArray(signalQueue)) {\n              signalQueue.push(data);\n              return;\n            }\n            this.signalQueueMap.set(clientId, [data]);\n            return;\n          }\n          if (peer.destroyed || peer.destroying) {\n            return;\n          }\n          peer.signal(data);\n        } catch (error) {\n          this.logger.error('Unable to process signal message');\n          this.logger.errorStack(error);\n        }\n        break;\n      case DECLINE_INVITE_TO_SESSION:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Decline invite request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Decline invite request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const inviteDeclineHandler = this.inviteDeclineHandlerMap.get(requestHash);\n          if (typeof inviteDeclineHandler === 'function') {\n            inviteDeclineHandler();\n          }\n        } catch (error) {\n          this.logger.error('Unable to process decline invite request');\n          this.logger.errorStack(error);\n        }\n        break;\n      case ABORT_SESSION_JOIN_REQUEST:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Abort session join request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Abort session join request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const existing = this.sessionJoinRequestMap.get(requestHash);\n          if (!Array.isArray(existing)) {\n            this.logger.warn(`Unable to abort session join request for user ${userId} and session ${sessionId}, request does not exist`);\n            return;\n          }\n          this.logger.warn(`Aborting session join request for user ${userId} and session ${sessionId}`);\n          existing[1].abort();\n        } catch (error) {\n          this.logger.error('Unable to process session abort join request');\n          this.logger.errorStack(error);\n        }\n        break;\n      case SESSION_JOIN_REQUEST:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Session join request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Session join request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const existing = this.sessionJoinRequestMap.get(requestHash);\n          if (Array.isArray(existing)) {\n            this.logger.warn(`Session join request for user ${userId} and session ${sessionId} already exists`);\n            await existing[0];\n            return;\n          }\n          const sessionJoinHandler = this.sessionJoinHandlerMap.get(sessionId);\n          if (typeof sessionJoinHandler !== 'function') {\n            this.logger.error(`Handler for session ${sessionId} does not exist`);\n            return;\n          }\n          const abortController = new AbortController();\n          abortController.signal.addEventListener('abort', () => {\n            this.sessionJoinRequestMap.delete(requestHash);\n          });\n          const promise = (async () => {\n            let response = [false, 500, 'Error in sesssion join handler'];\n            try {\n              response = await sessionJoinHandler({ userId, sessionId, abortSignal: abortController.signal });\n            } catch (error) {\n              this.logger.error(`Unable to respond to session join request for user ${userId} and session ${sessionId}, error in session join handler`);\n              this.logger.errorStack(error);\n            }\n            if (abortController.signal.aborted) {\n              this.logger.warn(`Session join request for user ${userId} and session ${sessionId} was aborted`);\n              return;\n            }\n            try {\n              await this.publish(SESSION_JOIN_RESPONSE, {\n                userId,\n                sessionId,\n                success: response[0],\n                code: response[1],\n                text: response[2],\n              }, { CustomError: SessionJoinResponseError });\n            } catch (error) {\n              this.logger.error(`Unable to send session join response for user ${userId} and session ${sessionId}`);\n              this.logger.errorStack(error);\n            }\n            this.sessionJoinRequestMap.delete(requestHash);\n          })();\n          this.sessionJoinRequestMap.set(requestHash, [promise, abortController]);\n          await promise;\n        } catch (error) {\n          this.logger.error('Unable to process session join request');\n          this.logger.errorStack(error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown message type ${type}`);\n    }\n  }\n\n  async getConnectedPeer(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer !== 'undefined' && peer.connected) {\n      return peer;\n    }\n    return new Promise((resolve, reject) => {\n      let _peer; // eslint-disable-line no-underscore-dangle\n      const cleanup = () => {\n        this.removeListener('sessionClientLeave', handleSessionClientLeave);\n        this.removeListener('connect', handleConnect);\n        this.removeListener('peer', handlePeer);\n        if (typeof _peer !== 'undefined') {\n          _peer.removeListener('close', handlePeerClose);\n          _peer.removeListener('error', handlePeerError);\n        }\n      };\n      const handlePeerClose = () => {\n        cleanup();\n        reject(new Error(`Peer ${clientId} closed before connection was established`));\n      };\n      const handlePeerError = (error:Error) => {\n        cleanup();\n        reject(error);\n      };\n      const handlePeer = ({ clientId: newClientId, peer: _p }) => {\n        if (newClientId !== clientId) {\n          return;\n        }\n        _peer = _p;\n        _p.addListener('close', handlePeerClose);\n        _p.addListener('error', handlePeerError);\n      };\n      const handleConnect = ({ clientId: newClientId, peer: _p }) => {\n        if (newClientId !== clientId) {\n          return;\n        }\n        cleanup();\n        resolve(_p);\n      };\n      const handleSessionClientLeave = (oldClientId:number) => {\n        if (clientId !== oldClientId) {\n          return;\n        }\n        cleanup();\n        reject(new Error(`Client ${clientId} left before connection was established`));\n      };\n      this.addListener('sessionClientLeave', handleSessionClientLeave);\n      this.addListener('connect', handleConnect);\n      this.addListener('peer', handlePeer);\n    });\n  }\n\n  async handleSessionClientJoin(clientId:number) {\n    let interval;\n    let _peer; // eslint-disable-line no-underscore-dangle\n    let offset = 0;\n    const abortController = new AbortController();\n    const abortSignal = abortController.signal;\n    const cleanup = () => {\n      abortController.abort();\n      this.removeListener('sessionClientLeave', handleSessionClientLeave);\n      if (typeof _peer !== 'undefined') {\n        _peer.removeListener('close', handlePeerClose);\n        _peer.removeListener('data', handlePeerData);\n      }\n      this.data.removeListener('publish', handleDataPublish);\n      clearInterval(interval);\n    };\n    const handlePeerClose = () => {\n      cleanup();\n      if (this.sessionClientIds.has(clientId)) {\n        this.handleSessionClientJoin(clientId);\n      }\n    };\n    const handleSessionClientLeave = (oldClientId:number) => {\n      if (clientId !== oldClientId) {\n        return;\n      }\n      cleanup();\n    };\n    const handleDataPublish = (queue:[Array<*>, Array<*>]) => {\n      sendToPeer(new ObservedRemoveDump(queue));\n    };\n    const sendToPeer = (unpacked: any) => {\n      if (typeof peer === 'undefined') {\n        throw new Error('Peer does not exist');\n      }\n      peer.send(pack(unpacked));\n    };\n    const handlePeerData = (packed:Buffer) => {\n      const message = unpack(packed);\n      if (message instanceof Ping) {\n        sendToPeer(new Pong(message.timestamp, Date.now()));\n      } else if (message instanceof Pong) {\n        offset = (Date.now() - message.wallclock) - (performance.now() - message.timestamp) / 2;\n        this.sessionClientOffsetMap.set(clientId, offset);\n      } else if (message instanceof ObservedRemoveDump) {\n        this.data.process(message.queue);\n      }\n    };\n    this.addListener('sessionClientLeave', handleSessionClientLeave);\n    if (!this.isConnectedToClient(clientId)) {\n      await new Promise((resolve) => {\n        const handleConnect = ({ clientId: newClientId }) => {\n          if (newClientId !== clientId) {\n            return;\n          }\n          this.removeListener('connect', handleConnect);\n          abortSignal.removeEventListener('abort', handleAbort);\n          resolve();\n        };\n        const handleAbort = () => {\n          this.removeListener('connect', handleConnect);\n          abortSignal.removeEventListener('abort', handleAbort);\n          resolve();\n        };\n        this.addListener('connect', handleConnect);\n        abortSignal.addEventListener('abort', handleAbort);\n      });\n      if (abortSignal.aborted) {\n        return;\n      }\n    }\n    const peer = this.peerMap.get(clientId);\n    _peer = peer;\n    if (typeof peer === 'undefined') {\n      throw new Error('Peer does not exist');\n    }\n    peer.addListener('close', handlePeerClose);\n    peer.addListener('data', handlePeerData);\n    interval = setInterval(() => {\n      peer.send(pack(new Ping(performance.now())));\n    }, 1000);\n    peer.send(pack(new Ping(performance.now())));\n    this.data.addListener('publish', handleDataPublish);\n    handleDataPublish(this.data.dump());\n  }\n\n  declineInviteToSession(data: Object) {\n    return this.publish(DECLINE_INVITE_TO_SESSION, data, { CustomError: DeclineInviteToSessionError });\n  }\n\n  reset() {\n    clearTimeout(this.leaveSessionAfterLastClientTimeout);\n    this.handleBraidSet(this.name, []);\n  }\n\n  close() {\n    this.reset();\n    this.active = false;\n    this.onIdle().catch((error) => {\n      this.logger.error('Error in queue during close');\n      this.logger.errorStack(error);\n    }).finally(() => {\n      this.braidClient.data.removeListener('set', this.handleBraidSet);\n      this.braidClient.removeListener('close', this.handleBraidClose);\n      this.braidClient.removeListener('closeRequested', this.handleBraidCloseRequested);\n      this.braidClient.removeListener('reconnect', this.handleBraidReconnect);\n      this.braidClient.stopPublishing(this.publishName);\n      this.braidClient.removeServerEventListener(this.name);\n      this.braidClient.unsubscribe(this.name);\n    });\n    this.emit('close');\n  }\n}\n\nconst publish = (braidClient:BraidClient, abortSignal: AbortSignal, roomId:string, type:string, value:Object, options?: { timeoutDuration?: number, CustomError?: Class<RequestError> } = {}) => {\n  const name = `signal/${roomId}`;\n  const publishName = `signal/${roomId}/${Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(36)}`;\n  const timeoutDuration = typeof options.timeoutDuration === 'number' ? options.timeoutDuration : 5000;\n  const CustomError = typeof options.CustomError === 'function' ? options.CustomError : RequestError;\n  const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n  return new Promise((resolve, reject) => {\n    const cleanup = () => {\n      clearTimeout(timeout);\n      abortSignal.removeEventListener('abort', handleAbort);\n      braidClient.removeServerEventListener(name);\n      braidClient.stopPublishing(publishName);\n    };\n    const handleAbort = () => {\n      cleanup();\n      reject(new AbortError(`Publish request aborted before ${type} request completed`));\n    };\n    const timeout = setTimeout(() => {\n      cleanup();\n      reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n    }, timeoutDuration);\n    const handleMessage = (message:{ requestId?: number, type:string, value:Object }) => {\n      if (typeof message !== 'object') {\n        return;\n      }\n      const { requestId: responseId, type: responseType, value: responseValue } = message;\n      if (responseType !== RESPONSE) {\n        return;\n      }\n      if (responseId !== requestId) {\n        return;\n      }\n      const { success, code, text } = responseValue;\n      cleanup();\n      if (success) {\n        resolve({ code, text });\n        return;\n      }\n      reject(new CustomError(text, code));\n    };\n    abortSignal.addEventListener('abort', handleAbort);\n    Promise.all([\n      braidClient.startPublishing(publishName),\n      braidClient.addServerEventListener(name, handleMessage),\n    ]).then(() => {\n      braidClient.publish(publishName, { requestId, type, value });\n    }).catch((error) => {\n      cleanup();\n      reject(error);\n    });\n  });\n};\n\nBond.declineInviteToSession = (braidClient: BraidClient, abortSignal:AbortSignal, data: { roomId: string }) => {\n  const { roomId } = data;\n  return publish(braidClient, abortSignal, roomId, DECLINE_INVITE_TO_SESSION, data, { CustomError: DeclineInviteToSessionError });\n};\n\n"],"file":"index.js"}