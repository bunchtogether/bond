{"version":3,"sources":["../../src/index.js"],"names":["getSocketMap","values","Map","map","x","socketHash","socketId","serverId","userId","sessionId","getPeerIds","Set","getSessionMap","socketMap","socket","sessionSocketMap","get","set","Bond","braidClient","roomId","options","name","ready","init","logger","wrtc","userIds","peerMap","queueMap","sessionMap","requestCallbackMap","signalQueueMap","handleSet","key","oldSocketMap","newSocketMap","oldUserIds","newUserIds","oldSessionMap","newSessionMap","socketData","has","emit","peerId","oldSessionSocketMap","newSessionSocketMap","data","addListener","on","addToQueue","connectToPeer","disconnectFromPeer","promise","Promise","resolve","reject","handleClose","removeListener","handleValue","handleError","Error","value","error","all","subscribe","addServerEventListener","handleMessage","bind","startPublishing","queueId","func","queue","add","newQueue","PQueue","concurrency","delete","type","timeoutDuration","requestId","Math","floor","random","Number","MAX_SAFE_INTEGER","timeout","setTimeout","RequestTimeoutError","handleResponse","success","code","text","clearTimeout","RequestError","publish","peer","SimplePeer","initiator","handleConnect","handleSignal","handlePeerClose","info","handlePeerError","errorStack","SIGNAL","signalQueue","Array","isArray","length","shift","signal","destroy","size","onIdle","queueMicrotask","password","START_SESSION","LEAVE_SESSION","message","JSON","stringify","RESPONSE","callback","push","warn","keys","stopPublishing","unsubscribe","removeServerEventListener","clear","EventEmitter"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport type BraidClient from '@bunchtogether/braid-client';\nimport SimplePeer from 'simple-peer';\nimport PQueue from 'p-queue';\nimport {\n  SIGNAL,\n  START_SESSION,\n  LEAVE_SESSION,\n  RESPONSE,\n} from './constants';\nimport { RequestError, RequestTimeoutError } from './errors';\n\ntype Logger = {\n  debug: (string | number, ...any) => void,\n  info: (string | number, ...any) => void,\n  warn: (string | number, ...any) => void,\n  error: (string | number, ...any) => void,\n  errorStack: (error:Error | MediaError) => void,\n};\n\ntype Options = {\n  logger?: Logger,\n  wrtc?: Object\n}\n\ntype Connection = [number, number, string, string | false];\ntype Socket = { socketHash: string, socketId: number, serverId: number, userId: string, sessionId: string | false };\n\nconst getSocketMap = (values?:Array<Connection>):Map<string, Socket> => {\n  if (typeof values === 'undefined') {\n    return new Map();\n  }\n  return new Map(values.map((x) => {\n    const socketHash = `${x[0]}:${x[1]}`;\n    return [socketHash, { socketHash, socketId: x[0], serverId: x[1], userId: x[2], sessionId: x[3] }];\n  }));\n};\n\nconst getPeerIds = (values?:Array<Connection>):Set<string> => {\n  if (typeof values === 'undefined') {\n    return new Set();\n  }\n  return new Set(values.map((x) => x[2]));\n};\n\nconst getSessionMap = (socketMap:Map<string, Socket>):Map<string | false, Map<string, Socket>> => {\n  const map = new Map();\n  for (const socket of socketMap.values()) {\n    const { socketHash, sessionId } = socket;\n    const sessionSocketMap = map.get(sessionId);\n    if (typeof sessionSocketMap === 'undefined') {\n      map.set(sessionId, new Map([[socketHash, socket]]));\n    } else {\n      sessionSocketMap.set(socketHash, socket);\n    }\n  }\n  return map;\n};\n\nexport class Bond extends EventEmitter {\n  declare roomId: string;\n  declare userId: string;\n  declare name: string;\n  declare braidClient: BraidClient;\n  declare logger: Logger;\n  declare ready: Promise<void>;\n  declare socketMap: Map<string, Socket>;\n  declare sessionMap: Map<string | false, Map<string, Socket>>;\n  declare userIds: Set<string>;\n  declare wrtc: void | Object;\n  declare peerMap: Map<string, SimplePeer>;\n  declare queueMap: Map<string, PQueue>;\n  declare handleSet: (string, any) => void;\n  declare signalQueueMap: Map<string, Array<[string, Object]>>;\n  declare requestCallbackMap: Map<number, (boolean, number, string) => void | Promise<void>>;\n\n  constructor(braidClient: BraidClient, roomId:string, userId:string, options?: Options = {}) {\n    super();\n    this.roomId = roomId;\n    this.userId = userId;\n    const name = `signal/${this.roomId}`;\n    this.name = name;\n    this.braidClient = braidClient;\n    this.ready = this.init();\n    this.logger = options.logger || braidClient.logger;\n    this.wrtc = options.wrtc;\n    this.socketMap = new Map();\n    this.userIds = new Set();\n    this.peerMap = new Map();\n    this.queueMap = new Map();\n    this.sessionMap = new Map();\n    this.requestCallbackMap = new Map();\n    this.signalQueueMap = new Map();\n\n    this.handleSet = (key:string, values:Array<Connection>) => {\n      if (key !== name) {\n        return;\n      }\n      const oldSocketMap = this.socketMap;\n      const newSocketMap = getSocketMap(values);\n      const oldUserIds = this.userIds;\n      const newUserIds = getPeerIds(values);\n      const oldSessionMap = this.sessionMap;\n      const newSessionMap = getSessionMap(newSocketMap);\n      this.userIds = newUserIds;\n      this.socketMap = newSocketMap;\n      this.sessionMap = newSessionMap;\n      for (const [socketHash, socketData] of oldSocketMap) {\n        if (!newSocketMap.has(socketHash)) {\n          this.emit('socketLeave', socketData);\n        }\n      }\n      for (const [socketHash, socketData] of newSocketMap) {\n        if (!oldSocketMap.has(socketHash)) {\n          this.emit('socketJoin', socketData);\n        }\n      }\n      for (const peerId of oldUserIds) {\n        if (!newUserIds.has(peerId)) {\n          this.emit('leave', peerId);\n        }\n      }\n      for (const peerId of newUserIds) {\n        if (!oldUserIds.has(peerId)) {\n          this.emit('join', peerId);\n        }\n      }\n      for (const [sessionId, oldSessionSocketMap] of oldSessionMap) {\n        const newSessionSocketMap = newSessionMap.get(sessionId);\n        if (typeof newSessionSocketMap === 'undefined') {\n          for (const socketData of oldSessionSocketMap.values()) {\n            this.emit('sessionLeave', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of oldSessionSocketMap) {\n            if (!newSessionSocketMap.has(socketHash)) {\n              this.emit('sessionLeave', socketData);\n            }\n          }\n        }\n      }\n      for (const [sessionId, newSessionSocketMap] of newSessionMap) {\n        const oldSessionSocketMap = oldSessionMap.get(sessionId);\n        if (typeof oldSessionSocketMap === 'undefined') {\n          for (const socketData of newSessionSocketMap.values()) {\n            this.emit('sessionJoin', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of newSessionSocketMap) {\n            if (!oldSessionSocketMap.has(socketHash)) {\n              this.emit('sessionJoin', socketData);\n            }\n          }\n        }\n      }\n    };\n    this.braidClient.data.addListener('set', this.handleSet);\n    this.on('socketJoin', (socketData:Socket) => {\n      this.addToQueue(socketData.socketHash, () => this.connectToPeer(socketData));\n    });\n    this.on('socketLeave', (socketData:Socket) => {\n      this.addToQueue(socketData.socketHash, () => this.disconnectFromPeer(socketData));\n    });\n  }\n\n  async init() {\n    const promise = new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(new Error('Closed before initialization completed'));\n      };\n      const handleValue = (key:string, value:any) => {\n        if (key !== this.name) {\n          return;\n        }\n        if (typeof value === 'undefined') {\n          return;\n        }\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(error);\n      };\n      this.addListener('close', handleClose);\n      this.braidClient.data.addListener('set', handleValue);\n      this.braidClient.addListener('error', handleError);\n      handleValue(this.name, this.braidClient.data.get(this.name));\n    });\n    try {\n      await Promise.all([\n        this.braidClient.subscribe(this.name),\n        this.braidClient.addServerEventListener(this.name, this.handleMessage.bind(this)),\n      ]);\n      await promise;\n      await this.braidClient.startPublishing(this.name);\n    } catch (error) {\n      this.braidClient.logger.error(`Unable to join ${this.roomId}`);\n      throw error;\n    }\n  }\n\n  addToQueue(queueId:string, func:() => Promise<void>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      return queue.add(func);\n    }\n    const newQueue = new PQueue({ concurrency: 1 });\n    const promise = newQueue.add(func);\n    this.queueMap.set(queueId, newQueue);\n    newQueue.on('idle', () => {\n      this.queueMap.delete(queueId);\n    });\n    return promise;\n  }\n\n  async publish(type:string, value:Object, timeoutDuration?: number = 5000):Promise<{ text:string, code:number }> {\n    await this.ready;\n    const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        this.requestCallbackMap.delete(requestId);\n        reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n      }, timeoutDuration);\n      const handleResponse = (success:boolean, code: number, text:string) => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        if (success) {\n          resolve({ code, text });\n          return;\n        }\n        reject(new RequestError(text, code));\n      };\n      this.requestCallbackMap.set(requestId, handleResponse);\n      this.braidClient.publish(this.name, { requestId, type, value });\n    });\n  }\n\n  async connectToPeer({ userId, serverId, socketId, socketHash }:Socket) {\n    const peer = new SimplePeer({ initiator: userId > this.userId, wrtc: this.wrtc });\n    this.peerMap.set(socketHash, peer);\n    await new Promise((resolve) => {\n      const timeout = setTimeout(() => {\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        resolve();\n      }, 5000);\n      const handleConnect = () => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        const handlePeerClose = () => {\n          this.logger.info(`Peer ${socketHash} disconnected`);\n          peer.removeListener('error', handlePeerError);\n          peer.removeListener('close', handlePeerClose);\n          this.emit('disconnect', { userId, serverId, socketId, peer });\n        };\n        const handlePeerError = (error:Error) => {\n          this.logger.error(`Peer ${socketHash} error`);\n          this.logger.errorStack(error);\n          this.emit('peerError', { error, userId, serverId, socketId, peer });\n        };\n        peer.addListener('close', handlePeerClose);\n        peer.addListener('error', handlePeerError);\n        this.emit('connect', { userId, serverId, socketId, peer });\n        resolve();\n      };\n      const handleSignal = async (data:Object) => {\n        try {\n          await this.publish(SIGNAL, { serverId, socketId, data });\n        } catch (error) {\n          this.logger.error(`Unable to signal ${socketHash}`);\n          this.logger.errorStack(error);\n        }\n      };\n      const handleClose = () => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.logger.error(`Error connecting to ${userId}`);\n        this.logger.errorStack(error);\n        this.emit('error', error);\n        resolve();\n      };\n      peer.addListener('error', handleError);\n      peer.addListener('connect', handleConnect);\n      peer.addListener('signal', handleSignal);\n      this.addListener('close', handleClose);\n      const signalQueue = this.signalQueueMap.get(socketHash);\n      if (Array.isArray(signalQueue)) {\n        while (signalQueue.length > 0) {\n          const data = signalQueue.shift();\n          peer.signal(data);\n        }\n      }\n    });\n  }\n\n  async disconnectFromPeer({ socketHash }:Socket) {\n    const peer = this.peerMap.get(socketHash);\n    if (typeof peer === 'undefined') {\n      return;\n    }\n    peer.destroy();\n    this.peerMap.delete(socketHash);\n  }\n\n  async onIdle() {\n    while (this.queueMap.size > 0) {\n      for (const queue of this.queueMap.values()) {\n        await queue.onIdle();\n      }\n      // $FlowFixMe\n      await new Promise((resolve) => queueMicrotask(resolve));\n    }\n  }\n\n  startSession(sessionId:string, password?:string) {\n    return this.publish(START_SESSION, { sessionId, password });\n  }\n\n  leaveSession() {\n    return this.publish(LEAVE_SESSION, {});\n  }\n\n  handleMessage(message:{ requestId?: number, type:string, value:Object }) {\n    if (typeof message !== 'object') {\n      this.logger.error('Invalid message format');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    const { requestId, type, value } = message;\n    if (typeof type !== 'string') {\n      this.logger.error('Invalid message format, type property should be of type \"string\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (typeof value !== 'object') {\n      this.logger.error('Invalid message format, value property should be of type \"object\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (type === RESPONSE && typeof requestId === 'number') {\n      const callback = this.requestCallbackMap.get(requestId);\n      if (typeof callback !== 'function') {\n        this.logger.error(`Callback for request ${requestId} does not exist`);\n        return;\n      }\n      const { success, code, text } = value;\n      if (typeof success !== 'boolean') {\n        this.logger.error('Response message contained an invalid value success property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value success property');\n        return;\n      }\n      if (typeof code !== 'number') {\n        this.logger.error('Response message contained an invalid value code property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value code property');\n        return;\n      }\n      if (typeof text !== 'string') {\n        this.logger.error('Response message contained an invalid value text property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value text property');\n        return;\n      }\n      callback(success, code, text);\n      return;\n    }\n    switch (type) {\n      case SIGNAL:\n        try {\n          const {\n            serverId,\n            socketId,\n            data,\n          } = value;\n          if (typeof serverId !== 'number') {\n            this.logger.error('Signal message contained an invalid server ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof socketId !== 'number') {\n            this.logger.error('Signal message contained an invalid socket ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof data !== 'object') {\n            this.logger.error('Signal message contained an invalid data property');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const socketHash = `${socketId}:${serverId}`;\n          const peer = this.peerMap.get(socketHash);\n          if (typeof peer === 'undefined') {\n            const signalQueue = this.signalQueueMap.get(socketHash);\n            if (Array.isArray(signalQueue)) {\n              signalQueue.push(data);\n              return;\n            }\n            this.signalQueueMap.set(socketHash, [data]);\n            return;\n          }\n          peer.signal(data);\n        } catch (error) {\n          this.logger.error('Unable to process signal message');\n          this.logger.errorStack(error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown message type ${type}`);\n    }\n  }\n\n  close() {\n    const oldSocketMap = [...this.socketMap.keys()];\n    const oldUserIds = [...this.userIds];\n    this.braidClient.data.removeListener('set', this.handleSet);\n    this.braidClient.stopPublishing(this.name);\n    this.braidClient.unsubscribe(this.name);\n    this.braidClient.removeServerEventListener(this.name);\n    this.socketMap.clear();\n    this.userIds.clear();\n    for (const socketHash of oldSocketMap) {\n      this.emit('socketLeave', socketHash);\n    }\n    for (const userId of oldUserIds) {\n      this.emit('leave', userId);\n    }\n    this.emit('close');\n  }\n}\n\n"],"file":"index.js"}