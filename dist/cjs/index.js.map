{"version":3,"sources":["../../src/index.js"],"names":["getSocketMap","values","Map","map","x","socketHash","socketId","serverId","userId","clientId","sessionId","getPeerIds","Set","getSessionMap","socketMap","socket","sessionClientMap","get","set","CustomObservedRemoveMap","publishTimeout","queueMicrotask","publish","ObservedRemoveMap","Bond","braidClient","roomId","options","active","Math","floor","random","Number","MAX_SAFE_INTEGER","name","publishName","toString","ready","init","logger","peerOptions","userIds","peerMap","queueMap","sessionMap","requestCallbackMap","signalQueueMap","peerDisconnectTimeoutMap","sessionJoinHandlerMap","sessionJoinRequestMap","data","bufferPublishing","sessionClientOffsetMap","addListener","handleSessionClientJoin","bind","handleSet","key","oldSocketMap","newSocketMap","oldUserIds","newUserIds","oldSessionMap","newSessionMap","oldSessionClientIds","sessionClientIds","newSessionClientIds","socketData","has","emit","peerUserId","oldSessionSocketMap","newSessionSocketMap","info","clearTimeout","delete","addToQueue","connectToPeer","setTimeout","disconnectFromPeer","oldSocketData","clear","oldUserId","isReconnecting","startedSessionId","joinedSessionId","handleInitialized","startSession","catch","error","errorStack","joinSession","removeListener","handleClose","handleError","clientIds","keys","promise","Promise","resolve","reject","handleValue","Error","value","all","subscribe","addServerEventListener","handleMessage","startPublishing","queueId","func","queue","add","newQueue","PQueue","concurrency","on","type","timeoutDuration","CustomError","RequestError","requestId","timeout","ClientClosedError","RequestTimeoutError","handleResponse","success","code","text","peer","connected","existingPeer","Object","assign","initiator","SimplePeer","handlePeerClose","handlePeerError","handlePeerReconnect","handleConnect","handleSignal","handleSocketLeave","SIGNAL","SignalError","oldSocketHash","warn","signalQueue","Array","isArray","length","shift","signal","destroy","size","onIdle","newSessionId","oldSessionId","timelineValue","sessionJoinHandler","SESSION_QUEUE","START_SESSION","StartSessionError","cleanupSession","JOIN_SESSION","JoinSessionError","LEAVE_SESSION","LeaveSessionError","message","JSON","stringify","RESPONSE","callback","push","destroyed","destroying","ABORT_SESSION_JOIN_REQUEST","requestHash","existing","abort","SESSION_JOIN_REQUEST","abortController","AbortController","addEventListener","response","abortSignal","aborted","SESSION_JOIN_RESPONSE","SessionJoinResponseError","interval","offset","cleanup","handleSessionClientLeave","handlePeerData","handleDataPublish","clearInterval","oldClientId","sendToPeer","ObservedRemoveDump","unpacked","send","packed","Ping","Pong","timestamp","Date","now","wallclock","performance","process","isConnectedToClient","newClientId","removeEventListener","handleAbort","setInterval","dump","stopPublishing","unsubscribe","removeServerEventListener","EventEmitter"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport ObservedRemoveMap from 'observed-remove/dist/map';\nimport type BraidClient from '@bunchtogether/braid-client';\nimport SimplePeer from 'simple-peer';\nimport PQueue from 'p-queue';\nimport {\n  pack,\n  unpack,\n} from 'msgpackr';\nimport {\n  SIGNAL,\n  START_SESSION,\n  LEAVE_SESSION,\n  JOIN_SESSION,\n  SESSION_QUEUE,\n  ABORT_SESSION_JOIN_REQUEST,\n  SESSION_JOIN_REQUEST,\n  SESSION_JOIN_RESPONSE,\n  RESPONSE,\n} from './constants';\nimport {\n  RequestError,\n  StartSessionError,\n  RequestTimeoutError,\n  JoinSessionError,\n  LeaveSessionError,\n  SignalError,\n  SessionJoinResponseError,\n  ClientClosedError,\n} from './errors';\nimport {\n  Ping,\n  Pong,\n  ObservedRemoveDump,\n} from './messagepack';\n\ntype Logger = {\n  debug: (string | number, ...any) => void,\n  info: (string | number, ...any) => void,\n  warn: (string | number, ...any) => void,\n  error: (string | number, ...any) => void,\n  errorStack: (error:Error | MediaError) => void,\n};\n\ntype Options = {\n  peerOptions?: Object,\n  logger?: Logger\n}\n\ntype SessionJoinHandler = ({ sessionId: string, userId: string, abortSignal: AbortSignal }) => [boolean, number, string] | Promise<[boolean, number, string]>;\ntype Connection = [number, number, string, number, string | false];\ntype Socket = { socketHash: string, socketId: number, serverId: number, userId: string, clientId: number, sessionId: string | false };\n\nconst getSocketMap = (values?:Array<Connection>):Map<string, Socket> => {\n  if (typeof values === 'undefined') {\n    return new Map();\n  }\n  return new Map(values.map((x) => {\n    const socketHash = `${x[0]}:${x[1]}`;\n    return [socketHash, { socketHash, socketId: x[0], serverId: x[1], userId: x[2], clientId: x[3], sessionId: x[4] }];\n  }));\n};\n\nconst getPeerIds = (values?:Array<Connection>):Set<string> => {\n  if (typeof values === 'undefined') {\n    return new Set();\n  }\n  return new Set(values.map((x) => x[2]));\n};\n\nconst getSessionMap = (socketMap:Map<string, Socket>):Map<string, Map<number, Socket>> => {\n  const map = new Map();\n  for (const socket of socketMap.values()) {\n    const { clientId, sessionId } = socket;\n    if (sessionId === false) {\n      continue;\n    }\n    const sessionClientMap = map.get(sessionId);\n    if (typeof sessionClientMap === 'undefined') {\n      map.set(sessionId, new Map([[clientId, socket]]));\n    } else {\n      sessionClientMap.set(clientId, socket);\n    }\n  }\n  return map;\n};\n\n// $FlowFixMe\nclass CustomObservedRemoveMap<K, V> extends ObservedRemoveMap<K, V> {\n  // $FlowFixMe\n  declare publishTimeout: null | true;\n\n  dequeue() {\n    if (this.publishTimeout) {\n      return;\n    }\n    this.publishTimeout = true;\n    // $FlowFixMe\n    queueMicrotask(() => this.publish());\n  }\n}\n\nexport class Bond extends EventEmitter {\n  declare roomId: string;\n  declare clientId: number;\n  declare name: string;\n  declare publishName: string;\n  declare braidClient: BraidClient;\n  declare logger: Logger;\n  declare ready: Promise<void>;\n  declare socketMap: Map<string, Socket>;\n  declare sessionMap: Map<string, Map<number, Socket>>;\n  declare userIds: Set<string>;\n  declare peerOptions: void | Object;\n  declare peerMap: Map<number, SimplePeer>;\n  declare queueMap: Map<string | number, PQueue>;\n  declare handleSet: (string, any) => void;\n  declare signalQueueMap: Map<number, Array<[string, Object]>>;\n  declare requestCallbackMap: Map<number, (boolean, number, string) => void | Promise<void>>;\n  declare sessionId: void | string;\n  declare startedSessionId: void | string;\n  declare joinedSessionId: void | string;\n  declare active: boolean;\n  declare peerDisconnectTimeoutMap: Map<number, TimeoutID>;\n  declare sessionJoinHandlerMap: Map<string, SessionJoinHandler>;\n  declare sessionJoinRequestMap: Map<string, [Promise<void>, AbortController]>;\n  declare data: CustomObservedRemoveMap<string | number, any>;\n  declare sessionClientOffsetMap: Map<number, number>;\n\n  constructor(braidClient: BraidClient, roomId:string, userId:string, options?: Options = {}) {\n    super();\n    this.active = true;\n    this.clientId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    this.roomId = roomId;\n    const name = `signal/${this.roomId}`;\n    this.name = name;\n    this.publishName = `signal/${this.roomId}/${this.clientId.toString(36)}`;\n    this.braidClient = braidClient;\n    this.ready = this.init();\n    this.logger = options.logger || braidClient.logger;\n    this.peerOptions = options.peerOptions;\n    this.socketMap = new Map();\n    this.userIds = new Set();\n    this.peerMap = new Map();\n    this.queueMap = new Map();\n    this.sessionMap = new Map();\n    this.requestCallbackMap = new Map();\n    this.signalQueueMap = new Map();\n    this.peerDisconnectTimeoutMap = new Map();\n    this.sessionJoinHandlerMap = new Map();\n    this.sessionJoinRequestMap = new Map();\n    this.data = new CustomObservedRemoveMap([], { bufferPublishing: 0 });\n    this.sessionClientOffsetMap = new Map();\n    this.addListener('sessionClientJoin', this.handleSessionClientJoin.bind(this));\n    this.handleSet = (key:string, values:Array<Connection>) => {\n      if (key !== name) {\n        return;\n      }\n      this.active = true;\n      const oldSocketMap = this.socketMap;\n      const newSocketMap = getSocketMap(values);\n      const oldUserIds = this.userIds;\n      const newUserIds = getPeerIds(values);\n      const oldSessionMap = this.sessionMap;\n      const newSessionMap = getSessionMap(newSocketMap);\n      const oldSessionClientIds = this.sessionClientIds;\n      this.userIds = newUserIds;\n      this.socketMap = newSocketMap;\n      this.sessionMap = newSessionMap;\n      const newSessionClientIds = this.sessionClientIds;\n      for (const [socketHash, socketData] of oldSocketMap) {\n        if (!newSocketMap.has(socketHash)) {\n          this.emit('socketLeave', socketData);\n        }\n      }\n      for (const [socketHash, socketData] of newSocketMap) {\n        if (!oldSocketMap.has(socketHash)) {\n          this.emit('socketJoin', socketData);\n        }\n      }\n      for (const peerUserId of oldUserIds) {\n        if (!newUserIds.has(peerUserId)) {\n          this.emit('leave', peerUserId);\n        }\n      }\n      for (const peerUserId of newUserIds) {\n        if (!oldUserIds.has(peerUserId)) {\n          this.emit('join', peerUserId);\n        }\n      }\n      for (const clientId of oldSessionClientIds) {\n        if (clientId === this.clientId) {\n          continue;\n        }\n        if (!newSessionClientIds.has(clientId)) {\n          this.emit('sessionClientLeave', clientId);\n        }\n      }\n      for (const clientId of newSessionClientIds) {\n        if (clientId === this.clientId) {\n          continue;\n        }\n        if (!oldSessionClientIds.has(clientId)) {\n          this.emit('sessionClientJoin', clientId);\n        }\n      }\n      for (const [sessionId, oldSessionSocketMap] of oldSessionMap) {\n        const newSessionSocketMap = newSessionMap.get(sessionId);\n        if (typeof newSessionSocketMap === 'undefined') {\n          for (const socketData of oldSessionSocketMap.values()) {\n            this.emit('sessionLeave', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of oldSessionSocketMap) {\n            if (!newSessionSocketMap.has(socketHash)) {\n              this.emit('sessionLeave', socketData);\n            }\n          }\n        }\n      }\n      for (const [sessionId, newSessionSocketMap] of newSessionMap) {\n        const oldSessionSocketMap = oldSessionMap.get(sessionId);\n        if (typeof oldSessionSocketMap === 'undefined') {\n          for (const socketData of newSessionSocketMap.values()) {\n            this.emit('sessionJoin', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of newSessionSocketMap) {\n            if (!oldSessionSocketMap.has(socketHash)) {\n              this.emit('sessionJoin', socketData);\n            }\n          }\n        }\n      }\n    };\n    this.braidClient.data.addListener('set', this.handleSet);\n    this.addListener('socketJoin', (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (clientId === this.clientId) {\n        return;\n      }\n      if (this.peerDisconnectTimeoutMap.has(clientId)) {\n        this.logger.info(`Clearing client ${clientId} disconnect timeout after socket join`);\n        clearTimeout(this.peerDisconnectTimeoutMap.get(clientId));\n        this.peerDisconnectTimeoutMap.delete(clientId);\n      }\n      this.addToQueue(clientId, () => this.connectToPeer(socketData));\n    });\n    this.addListener('socketLeave', (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (clientId === this.clientId) {\n        return;\n      }\n      clearTimeout(this.peerDisconnectTimeoutMap.get(clientId));\n      if (this.active) {\n        this.peerDisconnectTimeoutMap.set(clientId, setTimeout(() => {\n          this.peerDisconnectTimeoutMap.delete(clientId);\n          this.addToQueue(clientId, () => this.disconnectFromPeer(socketData));\n        }, 15000));\n      } else {\n        this.addToQueue(clientId, () => this.disconnectFromPeer(socketData));\n      }\n    });\n    this.braidClient.addListener('close', () => {\n      const oldSocketData = [...this.socketMap.values()];\n      const oldUserIds = [...this.userIds];\n      this.socketMap.clear();\n      this.userIds.clear();\n      for (const socketData of oldSocketData) {\n        this.emit('socketLeave', socketData);\n      }\n      for (const oldUserId of oldUserIds) {\n        this.emit('leave', oldUserId);\n      }\n    });\n    this.braidClient.addListener('reconnect', (isReconnecting: boolean) => {\n      if (!isReconnecting) {\n        return;\n      }\n      const startedSessionId = this.startedSessionId;\n      const joinedSessionId = this.joinedSessionId;\n      const handleInitialized = () => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.info(`Restarting session ${startedSessionId}`);\n          this.startSession(startedSessionId).catch((error) => {\n            this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        if (typeof joinedSessionId === 'string') {\n          this.logger.info(`Rejoining session ${joinedSessionId}`);\n          this.joinSession(joinedSessionId).catch((error) => {\n            this.logger.error(`Unable to rejoin session ${joinedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleClose = () => {\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleError = (error:Error) => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n          this.logger.errorStack(error);\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      this.braidClient.addListener('initialized', handleInitialized);\n      this.braidClient.addListener('close', handleClose);\n      this.braidClient.addListener('error', handleError);\n    });\n  }\n\n  get sessionClientIds():Set<number> {\n    const sessionId = this.sessionId;\n    if (typeof sessionId !== 'string') {\n      return new Set();\n    }\n    const sessionClientMap = this.sessionMap.get(sessionId);\n    if (typeof sessionClientMap === 'undefined') {\n      return new Set();\n    }\n    const clientIds = new Set(sessionClientMap.keys());\n    clientIds.delete(this.clientId);\n    return clientIds;\n  }\n\n  async init() {\n    const promise = new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(new Error('Closed before initialization completed'));\n      };\n      const handleValue = (key:string, value:any) => {\n        if (key !== this.name) {\n          return;\n        }\n        if (typeof value === 'undefined') {\n          return;\n        }\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(error);\n      };\n      this.addListener('close', handleClose);\n      this.braidClient.data.addListener('set', handleValue);\n      this.braidClient.addListener('error', handleError);\n      handleValue(this.name, this.braidClient.data.get(this.name));\n    });\n    try {\n      await Promise.all([\n        this.braidClient.subscribe(this.name),\n        this.braidClient.addServerEventListener(this.name, this.handleMessage.bind(this)),\n      ]);\n      await promise;\n      await this.braidClient.startPublishing(this.publishName);\n    } catch (error) {\n      this.braidClient.logger.error(`Unable to join ${this.roomId}`);\n      throw error;\n    }\n  }\n\n  addToQueue(queueId:string | number, func:() => Promise<*>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      return queue.add(func);\n    }\n    const newQueue = new PQueue({ concurrency: 1 });\n    const promise = newQueue.add(func);\n    this.queueMap.set(queueId, newQueue);\n    newQueue.on('idle', () => {\n      this.queueMap.delete(queueId);\n    });\n    return promise;\n  }\n\n  async publish(type:string, value:Object, options?: { timeoutDuration?: number, CustomError?: Class<RequestError> } = {}):Promise<{ text:string, code:number }> {\n    await this.ready;\n    const timeoutDuration = typeof options.timeoutDuration === 'number' ? options.timeoutDuration : 5000;\n    const CustomError = typeof options.CustomError === 'function' ? options.CustomError : RequestError;\n    const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    return new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        reject(new ClientClosedError(`Client closed before ${type} request completed`));\n      };\n      const timeout = setTimeout(() => {\n        this.requestCallbackMap.delete(requestId);\n        this.removeListener('close', handleClose);\n        reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n      }, timeoutDuration);\n      const handleResponse = (success:boolean, code: number, text:string) => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        if (success) {\n          resolve({ code, text });\n          return;\n        }\n        reject(new CustomError(text, code));\n      };\n      this.addListener('close', handleClose);\n      this.requestCallbackMap.set(requestId, handleResponse);\n      this.braidClient.publish(this.publishName, { requestId, type, value });\n    });\n  }\n\n  isConnectedToClient(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return false;\n    }\n    return !!peer.connected;\n  }\n\n  async connectToPeer({ userId, serverId, socketId, clientId, socketHash }:Socket) {\n    const existingPeer = this.peerMap.get(clientId);\n    const options = Object.assign({}, { initiator: clientId > this.clientId }, this.peerOptions);\n    const peer = existingPeer || new SimplePeer(options);\n    this.peerMap.set(clientId, peer);\n    if (peer.connected) {\n      peer.emit('peerReconnect');\n      const handlePeerClose = () => {\n        this.logger.info(`Peer ${socketHash} disconnected`);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('peerReconnect', handlePeerReconnect);\n        this.emit('disconnect', { userId, serverId, socketId, peer });\n      };\n      const handlePeerError = (error:Error) => {\n        this.logger.error(`Peer ${socketHash} error`);\n        this.logger.errorStack(error);\n        this.emit('peerError', { error, userId, serverId, socketId, peer });\n      };\n      const handlePeerReconnect = () => {\n        this.logger.info(`Peer ${socketHash} reconnected`);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('peerReconnect', handlePeerReconnect);\n      };\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('error', handlePeerError);\n      peer.addListener('peerReconnect', handlePeerReconnect);\n      this.emit('connect', { userId, clientId, serverId, socketId, peer });\n      return;\n    }\n    await new Promise((resolve) => {\n      const timeout = setTimeout(() => {\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n        resolve();\n      }, 5000);\n      const handleConnect = () => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n        const handlePeerClose = () => {\n          this.logger.info(`Peer ${socketHash} disconnected`);\n          peer.removeListener('error', handlePeerError);\n          peer.removeListener('close', handlePeerClose);\n          peer.removeListener('peerReconnect', handlePeerReconnect);\n          this.emit('disconnect', { userId, serverId, socketId, peer });\n        };\n        const handlePeerError = (error:Error) => {\n          this.logger.error(`Peer ${socketHash} error`);\n          this.logger.errorStack(error);\n          this.emit('peerError', { error, userId, serverId, socketId, peer });\n        };\n        const handlePeerReconnect = () => {\n          this.logger.info(`Peer ${socketHash} reconnected`);\n          peer.removeListener('error', handlePeerError);\n          peer.removeListener('close', handlePeerClose);\n          peer.removeListener('peerReconnect', handlePeerReconnect);\n        };\n        peer.addListener('close', handlePeerClose);\n        peer.addListener('error', handlePeerError);\n        peer.addListener('peerReconnect', handlePeerReconnect);\n        this.emit('connect', { userId, clientId, serverId, socketId, peer });\n        resolve();\n      };\n      const handleSignal = async (data:Object) => {\n        try {\n          await this.publish(SIGNAL, { serverId, socketId, data }, { CustomError: SignalError });\n        } catch (error) {\n          this.logger.error(`Unable to signal ${socketHash}`);\n          this.logger.errorStack(error);\n        }\n      };\n      const handleClose = () => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n        this.logger.error(`Error connecting to ${userId}`);\n        this.logger.errorStack(error);\n        this.emit('error', error);\n        resolve();\n      };\n      const handleSocketLeave = ({ socketHash: oldSocketHash }:Socket) => {\n        if (socketHash !== oldSocketHash) {\n          return;\n        }\n        clearTimeout(timeout);\n        peer.removeListener('error', handleError);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n        this.logger.warn(`Unable to connect to ${userId}, socket closed before connection was completed`);\n        resolve();\n      };\n      peer.addListener('error', handleError);\n      peer.addListener('connect', handleConnect);\n      peer.addListener('signal', handleSignal);\n      this.addListener('close', handleClose);\n      this.addListener('socketLeave', handleSocketLeave);\n      const signalQueue = this.signalQueueMap.get(clientId);\n      if (Array.isArray(signalQueue)) {\n        while (signalQueue.length > 0) {\n          const data = signalQueue.shift();\n          peer.signal(data);\n        }\n      }\n    });\n  }\n\n  async disconnectFromPeer({ clientId }:Socket) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return;\n    }\n    peer.destroy();\n    this.peerMap.delete(clientId);\n  }\n\n  async onIdle() {\n    while (this.queueMap.size > 0) {\n      for (const queue of this.queueMap.values()) {\n        await queue.onIdle();\n      }\n      // $FlowFixMe\n      await new Promise((resolve) => queueMicrotask(resolve));\n    }\n  }\n\n  cleanupSession(newSessionId?:string) {\n    const startedSessionId = this.startedSessionId;\n    delete this.startedSessionId;\n    delete this.joinedSessionId;\n    if (typeof startedSessionId === 'string') {\n      this.sessionJoinHandlerMap.delete(startedSessionId);\n    }\n    const oldSessionId = this.sessionId;\n    if (oldSessionId === newSessionId) {\n      return;\n    }\n    const oldSessionClientIds = this.sessionClientIds;\n    this.sessionId = newSessionId;\n    const newSessionClientIds = this.sessionClientIds;\n    for (const clientId of oldSessionClientIds) {\n      if (clientId === this.clientId) {\n        continue;\n      }\n      if (!newSessionClientIds.has(clientId)) {\n        this.emit('sessionClientLeave', clientId);\n      }\n    }\n    const timelineValue = this.data.get(this.clientId);\n    this.data.clear();\n    this.sessionClientOffsetMap.clear();\n    if (typeof timelineValue !== 'undefined') {\n      this.data.set(this.clientId);\n    }\n    for (const clientId of newSessionClientIds) {\n      if (clientId === this.clientId) {\n        continue;\n      }\n      if (!oldSessionClientIds.has(clientId)) {\n        this.emit('sessionClientJoin', clientId);\n      }\n    }\n  }\n\n  async startSession(sessionId:string, sessionJoinHandler?: SessionJoinHandler) {\n    await this.addToQueue(SESSION_QUEUE, () => this.publish(START_SESSION, { sessionId }, { CustomError: StartSessionError }));\n    this.cleanupSession(sessionId);\n    this.startedSessionId = sessionId;\n    if (typeof sessionJoinHandler === 'function') {\n      this.sessionJoinHandlerMap.set(sessionId, sessionJoinHandler);\n    } else {\n      this.sessionJoinHandlerMap.set(sessionId, () => [true, 200, 'Authorized']);\n    }\n  }\n\n  async joinSession(sessionId:string, timeoutDuration?: number = 30000) {\n    await this.addToQueue(SESSION_QUEUE, () => this.publish(JOIN_SESSION, { sessionId, timeoutDuration }, { CustomError: JoinSessionError }));\n    this.cleanupSession(sessionId);\n    this.joinedSessionId = sessionId;\n  }\n\n  async leaveSession() {\n    await this.addToQueue(SESSION_QUEUE, () => this.publish(LEAVE_SESSION, {}, { CustomError: LeaveSessionError }));\n    this.cleanupSession();\n  }\n\n  async handleMessage(message:{ requestId?: number, type:string, value:Object }) {\n    if (typeof message !== 'object') {\n      this.logger.error('Invalid message format');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    const { requestId, type, value } = message;\n    if (typeof type !== 'string') {\n      this.logger.error('Invalid message format, type property should be of type \"string\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (typeof value !== 'object') {\n      this.logger.error('Invalid message format, value property should be of type \"object\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (type === RESPONSE && typeof requestId === 'number') {\n      const callback = this.requestCallbackMap.get(requestId);\n      if (typeof callback !== 'function') {\n        this.logger.error(`Callback for request ${requestId} does not exist`);\n        return;\n      }\n      const { success, code, text } = value;\n      if (typeof success !== 'boolean') {\n        this.logger.error('Response message contained an invalid value success property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value success property');\n        return;\n      }\n      if (typeof code !== 'number') {\n        this.logger.error('Response message contained an invalid value code property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value code property');\n        return;\n      }\n      if (typeof text !== 'string') {\n        this.logger.error('Response message contained an invalid value text property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value text property');\n        return;\n      }\n      callback(success, code, text);\n      return;\n    }\n    switch (type) {\n      case SIGNAL:\n        try {\n          const {\n            clientId,\n            serverId,\n            socketId,\n            data,\n          } = value;\n          if (typeof serverId !== 'number') {\n            this.logger.error('Signal message contained an invalid server ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof socketId !== 'number') {\n            this.logger.error('Signal message contained an invalid socket ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof data !== 'object') {\n            this.logger.error('Signal message contained an invalid data property');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const peer = this.peerMap.get(clientId);\n          if (typeof peer === 'undefined') {\n            const signalQueue = this.signalQueueMap.get(clientId);\n            if (Array.isArray(signalQueue)) {\n              signalQueue.push(data);\n              return;\n            }\n            this.signalQueueMap.set(clientId, [data]);\n            return;\n          }\n          if (peer.destroyed || peer.destroying) {\n            return;\n          }\n          peer.signal(data);\n        } catch (error) {\n          this.logger.error('Unable to process signal message');\n          this.logger.errorStack(error);\n        }\n        break;\n      case ABORT_SESSION_JOIN_REQUEST:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Abort session join request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Abort session join request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const existing = this.sessionJoinRequestMap.get(requestHash);\n          if (!Array.isArray(existing)) {\n            this.logger.warn(`Unable to abort session join request for user ${userId} and session ${sessionId}, request does not exist`);\n            return;\n          }\n          this.logger.warn(`Aborting session join request for user ${userId} and session ${sessionId}`);\n          existing[1].abort();\n        } catch (error) {\n          this.logger.error('Unable to process session abort join request');\n          this.logger.errorStack(error);\n        }\n        break;\n      case SESSION_JOIN_REQUEST:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Session join request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Session join request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const existing = this.sessionJoinRequestMap.get(requestHash);\n          if (Array.isArray(existing)) {\n            this.logger.warn(`Session join request for user ${userId} and session ${sessionId} already exists`);\n            await existing[0];\n            return;\n          }\n          const sessionJoinHandler = this.sessionJoinHandlerMap.get(sessionId);\n          if (typeof sessionJoinHandler !== 'function') {\n            this.logger.error(`Handler for session ${sessionId} does not exist`);\n            return;\n          }\n          const abortController = new AbortController();\n          abortController.signal.addEventListener('abort', () => {\n            this.sessionJoinRequestMap.delete(requestHash);\n          });\n          const promise = (async () => {\n            let response = [false, 500, 'Error in sesssion join handler'];\n            try {\n              response = await sessionJoinHandler({ userId, sessionId, abortSignal: abortController.signal });\n            } catch (error) {\n              this.logger.error(`Unable to respond to session join request for user ${userId} and session ${sessionId}, error in session join handler`);\n              this.logger.errorStack(error);\n            }\n            if (abortController.signal.aborted) {\n              this.logger.warn(`Session join request for user ${userId} and session ${sessionId} was aborted`);\n              return;\n            }\n            try {\n              await this.publish(SESSION_JOIN_RESPONSE, {\n                userId,\n                sessionId,\n                success: response[0],\n                code: response[1],\n                text: response[2],\n              }, { CustomError: SessionJoinResponseError });\n            } catch (error) {\n              this.logger.error(`Unable to send session join request for user ${userId} and session ${sessionId}`);\n              this.logger.errorStack(error);\n            }\n            this.sessionJoinRequestMap.delete(requestHash);\n          })();\n          this.sessionJoinRequestMap.set(requestHash, [promise, abortController]);\n          await promise;\n        } catch (error) {\n          this.logger.error('Unable to process session join request');\n          this.logger.errorStack(error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown message type ${type}`);\n    }\n  }\n\n  async handleSessionClientJoin(clientId:number) {\n    let interval;\n    let offset = 0;\n    const abortController = new AbortController();\n    const abortSignal = abortController.signal;\n    const cleanup = () => {\n      abortController.abort();\n      this.removeListener('sessionClientLeave', handleSessionClientLeave);\n      if (typeof peer !== 'undefined') {\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('data', handlePeerData);\n      }\n      this.data.removeListener('publish', handleDataPublish);\n      clearInterval(interval);\n    };\n    const handlePeerClose = () => {\n      cleanup();\n      if (this.sessionClientIds.has(clientId)) {\n        this.handleSessionClientJoin(clientId);\n      }\n    };\n    const handleSessionClientLeave = (oldClientId:number) => {\n      if (clientId !== oldClientId) {\n        return;\n      }\n      cleanup();\n    };\n    const handleDataPublish = (queue:[Array<*>, Array<*>]) => {\n      sendToPeer(new ObservedRemoveDump(queue));\n    };\n    const sendToPeer = (unpacked: any) => {\n      if (typeof peer === 'undefined') {\n        throw new Error('Peer does not exist');\n      }\n      peer.send(pack(unpacked));\n    };\n    const handlePeerData = (packed:Buffer) => {\n      const message = unpack(packed);\n      if (message instanceof Ping) {\n        sendToPeer(new Pong(message.timestamp, Date.now()));\n      } else if (message instanceof Pong) {\n        offset = (Date.now() - message.wallclock) - (performance.now() - message.timestamp) / 2;\n        this.sessionClientOffsetMap.set(clientId, offset);\n      } else if (message instanceof ObservedRemoveDump) {\n        this.data.process(message.queue);\n      }\n    };\n    this.addListener('sessionClientLeave', handleSessionClientLeave);\n    if (!this.isConnectedToClient(clientId)) {\n      await new Promise((resolve) => {\n        const handleConnect = ({ clientId: newClientId }) => {\n          if (newClientId !== clientId) {\n            return;\n          }\n          this.removeListener('connect', handleConnect);\n          abortSignal.removeEventListener('abort', handleAbort);\n          resolve();\n        };\n        const handleAbort = () => {\n          this.removeListener('connect', handleConnect);\n          abortSignal.removeEventListener('abort', handleAbort);\n          resolve();\n        };\n        this.addListener('connect', handleConnect);\n        abortSignal.addEventListener('abort', handleAbort);\n      });\n      if (abortSignal.aborted) {\n        return;\n      }\n    }\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      throw new Error('Peer does not exist');\n    }\n    peer.addListener('close', handlePeerClose);\n    peer.addListener('data', handlePeerData);\n    interval = setInterval(() => {\n      peer.send(pack(new Ping(performance.now())));\n    }, 1000);\n    peer.send(pack(new Ping(performance.now())));\n    this.data.addListener('publish', handleDataPublish);\n    handleDataPublish(this.data.dump());\n  }\n\n  close() {\n    this.active = false;\n    const oldSessionClientIds = this.sessionClientIds;\n    const oldSocketData = [...this.socketMap.values()];\n    const oldUserIds = [...this.userIds];\n    this.braidClient.data.removeListener('set', this.handleSet);\n    this.braidClient.stopPublishing(this.publishName);\n    this.braidClient.unsubscribe(this.name);\n    this.braidClient.removeServerEventListener(this.name);\n    this.socketMap.clear();\n    this.userIds.clear();\n    for (const timeout of this.peerDisconnectTimeoutMap.values()) {\n      clearTimeout(timeout);\n    }\n    for (const clientId of oldSessionClientIds) {\n      this.emit('sessionClientLeave', clientId);\n    }\n    for (const socketData of oldSocketData) {\n      this.emit('socketLeave', socketData);\n    }\n    for (const userId of oldUserIds) {\n      this.emit('leave', userId);\n    }\n    this.emit('close');\n  }\n}\n\n"],"file":"index.js"}