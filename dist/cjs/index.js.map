{"version":3,"sources":["../../src/index.js"],"names":["getSocketMap","values","Map","map","x","socketHash","socketId","serverId","userId","clientId","sessionId","getPeerIds","Set","getSessionMap","socketMap","socket","sessionClientMap","get","set","Bond","braidClient","roomId","options","active","Math","floor","random","Number","MAX_SAFE_INTEGER","name","publishName","toString","logger","peerOptions","userIds","peerMap","peerReconnectMap","queueMap","sessionMap","requestCallbackMap","signalQueueMap","peerDisconnectTimeoutMap","sessionJoinHandlerMap","sessionJoinRequestMap","data","ObservedRemoveMap","bufferPublishing","sessionClientOffsetMap","addListener","handleSessionClientJoin","bind","_ready","init","ready","joinSession","handleSet","key","oldSocketMap","newSocketMap","oldUserIds","newUserIds","oldSessionMap","newSessionMap","oldSessionClientIds","sessionClientIds","newSessionClientIds","socketData","has","emit","peerUserId","oldSessionSocketMap","newSessionSocketMap","info","clearTimeout","delete","addToQueue","connectToPeer","setTimeout","disconnectFromPeer","oldSocketData","clear","oldUserId","isReconnecting","startedSessionId","joinedSessionId","handleInitialized","startSession","catch","error","errorStack","removeListener","handleClose","handleError","clientIds","keys","promise","Promise","resolve","reject","handleValue","Error","value","all","subscribe","addServerEventListener","handleMessage","startPublishing","queueId","func","queue","add","newQueue","PQueue","concurrency","on","type","timeoutDuration","CustomError","RequestError","requestId","timeout","ClientClosedError","RequestTimeoutError","handleResponse","success","code","text","publish","peer","connected","reconnectCount","reconnectDelay","round","handleSocketLeave","oldSocketHash","existingPeer","Object","assign","initiator","SimplePeer","addPeerListeners","cleanup","handleStream","handlePeerError","handlePeerClose","handlePeerReconnect","stream","getTracks","forEach","track","stop","dispatchEvent","Event","warn","handleConnect","handleSignal","SIGNAL","SignalError","signalQueue","Array","isArray","length","shift","signal","getConnectedPeer","addStream","destroy","size","onIdle","queueMicrotask","newSessionId","oldSessionId","timelineValue","sessionJoinHandler","SESSION_QUEUE","INVITE_TO_SESSION","InviteToSessionError","globalThis","crypto","randomUUID","automaticSessionJoinHandler","START_SESSION","StartSessionError","cleanupSession","JOIN_SESSION","JoinSessionError","LEAVE_SESSION","LeaveSessionError","message","JSON","stringify","RESPONSE","callback","push","destroyed","destroying","ABORT_SESSION_JOIN_REQUEST","requestHash","existing","abort","SESSION_JOIN_REQUEST","abortController","AbortController","addEventListener","response","abortSignal","aborted","SESSION_JOIN_RESPONSE","SessionJoinResponseError","_peer","handleSessionClientLeave","handlePeer","newClientId","_p","oldClientId","interval","offset","handlePeerData","handleDataPublish","clearInterval","sendToPeer","ObservedRemoveDump","unpacked","send","packed","Ping","Pong","timestamp","Date","now","wallclock","performance","process","isConnectedToClient","removeEventListener","handleAbort","setInterval","dump","stopPublishing","unsubscribe","removeServerEventListener","EventEmitter"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport ObservedRemoveMap from 'observed-remove/dist/map';\nimport type BraidClient from '@bunchtogether/braid-client';\nimport SimplePeer from 'simple-peer';\nimport PQueue from 'p-queue';\nimport {\n  pack,\n  unpack,\n} from 'msgpackr';\nimport {\n  SIGNAL,\n  START_SESSION,\n  LEAVE_SESSION,\n  JOIN_SESSION,\n  INVITE_TO_SESSION,\n  SESSION_QUEUE,\n  ABORT_SESSION_JOIN_REQUEST,\n  SESSION_JOIN_REQUEST,\n  SESSION_JOIN_RESPONSE,\n  RESPONSE,\n} from './constants';\nimport {\n  RequestError,\n  StartSessionError,\n  RequestTimeoutError,\n  JoinSessionError,\n  LeaveSessionError,\n  SignalError,\n  SessionJoinResponseError,\n  ClientClosedError,\n  InviteToSessionError,\n} from './errors';\nimport {\n  Ping,\n  Pong,\n  ObservedRemoveDump,\n} from './messagepack';\n\ntype Logger = {\n  debug: (string | number, ...any) => void,\n  info: (string | number, ...any) => void,\n  warn: (string | number, ...any) => void,\n  error: (string | number, ...any) => void,\n  errorStack: (error:Error | MediaError) => void,\n};\n\ntype Options = {\n  peerOptions?: Object,\n  logger?: Logger,\n  sessionId?: string\n}\n\nexport type SessionJoinHandler = ({ sessionId: string, userId: string, abortSignal: AbortSignal }) => [boolean, number, string] | Promise<[boolean, number, string]>;\nexport type Connection = [number, number, string, number, string | false];\nexport type Socket = { socketHash: string, socketId: number, serverId: number, userId: string, clientId: number, sessionId: string | false };\n\nconst getSocketMap = (values?:Array<Connection>):Map<string, Socket> => {\n  if (typeof values === 'undefined') {\n    return new Map();\n  }\n  return new Map(values.map((x) => {\n    const socketHash = `${x[0]}:${x[1]}`;\n    return [socketHash, { socketHash, socketId: x[0], serverId: x[1], userId: x[2], clientId: x[3], sessionId: x[4] }];\n  }));\n};\n\nconst getPeerIds = (values?:Array<Connection>):Set<string> => {\n  if (typeof values === 'undefined') {\n    return new Set();\n  }\n  return new Set(values.map((x) => x[2]));\n};\n\nconst getSessionMap = (socketMap:Map<string, Socket>):Map<string | false, Map<number, Socket>> => {\n  const map = new Map();\n  for (const socket of socketMap.values()) {\n    const { clientId, sessionId } = socket;\n    const sessionClientMap = map.get(sessionId);\n    if (typeof sessionClientMap === 'undefined') {\n      map.set(sessionId, new Map([[clientId, socket]]));\n    } else {\n      sessionClientMap.set(clientId, socket);\n    }\n  }\n  return map;\n};\n\nexport class Bond extends EventEmitter {\n  declare roomId: string;\n  declare clientId: number;\n  declare name: string;\n  declare publishName: string;\n  declare braidClient: BraidClient;\n  declare logger: Logger;\n  declare _ready: Promise<void>;\n  declare ready: Promise<void>;\n  declare socketMap: Map<string, Socket>;\n  declare sessionMap: Map<string | false, Map<number, Socket>>;\n  declare userIds: Set<string>;\n  declare peerOptions: void | Object;\n  declare peerMap: Map<number, SimplePeer>;\n  declare peerReconnectMap: Map<number, number>;\n  declare queueMap: Map<string | number, PQueue>;\n  declare handleSet: (string, any) => void;\n  declare signalQueueMap: Map<number, Array<[string, Object]>>;\n  declare requestCallbackMap: Map<number, (boolean, number, string) => void | Promise<void>>;\n  declare sessionId: void | string;\n  declare startedSessionId: void | string;\n  declare joinedSessionId: void | string;\n  declare active: boolean;\n  declare peerDisconnectTimeoutMap: Map<number, TimeoutID>;\n  declare sessionJoinHandlerMap: Map<string, SessionJoinHandler>;\n  declare sessionJoinRequestMap: Map<string, [Promise<void>, AbortController]>;\n  declare data: ObservedRemoveMap<string | number, any>;\n  declare sessionClientOffsetMap: Map<number, number>;\n\n  constructor(braidClient: BraidClient, roomId:string, userId:string, options?: Options = {}) {\n    super();\n    this.active = true;\n    this.clientId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    this.roomId = roomId;\n    const name = `signal/${this.roomId}`;\n    this.name = name;\n    this.publishName = `signal/${this.roomId}/${this.clientId.toString(36)}`;\n    this.braidClient = braidClient;\n    this.logger = options.logger || braidClient.logger;\n    this.peerOptions = options.peerOptions;\n    this.socketMap = new Map();\n    this.userIds = new Set();\n    this.peerMap = new Map();\n    this.peerReconnectMap = new Map();\n    this.queueMap = new Map();\n    this.sessionMap = new Map();\n    this.requestCallbackMap = new Map();\n    this.signalQueueMap = new Map();\n    this.peerDisconnectTimeoutMap = new Map();\n    this.sessionJoinHandlerMap = new Map();\n    this.sessionJoinRequestMap = new Map();\n    this.data = new ObservedRemoveMap([], { bufferPublishing: 0 });\n    this.sessionClientOffsetMap = new Map();\n    this.addListener('sessionClientJoin', this.handleSessionClientJoin.bind(this));\n    this._ready = this.init(); // eslint-disable-line no-underscore-dangle\n    if (typeof options.sessionId === 'string') {\n      this.ready = this.joinSession(options.sessionId);\n    } else {\n      this.ready = this._ready; // eslint-disable-line no-underscore-dangle\n    }\n    this.handleSet = (key:string, values:Array<Connection>) => {\n      if (key !== name) {\n        return;\n      }\n      this.active = true;\n      const oldSocketMap = this.socketMap;\n      const newSocketMap = getSocketMap(values);\n      const oldUserIds = this.userIds;\n      const newUserIds = getPeerIds(values);\n      const oldSessionMap = this.sessionMap;\n      const newSessionMap = getSessionMap(newSocketMap);\n      const oldSessionClientIds = this.sessionClientIds;\n      this.userIds = newUserIds;\n      this.socketMap = newSocketMap;\n      this.sessionMap = newSessionMap;\n      const newSessionClientIds = this.sessionClientIds;\n      for (const [socketHash, socketData] of oldSocketMap) {\n        if (!newSocketMap.has(socketHash)) {\n          this.emit('socketLeave', socketData);\n        }\n      }\n      for (const [socketHash, socketData] of newSocketMap) {\n        if (!oldSocketMap.has(socketHash)) {\n          this.emit('socketJoin', socketData);\n        }\n      }\n      for (const peerUserId of oldUserIds) {\n        if (!newUserIds.has(peerUserId)) {\n          this.emit('leave', peerUserId);\n        }\n      }\n      for (const peerUserId of newUserIds) {\n        if (!oldUserIds.has(peerUserId)) {\n          this.emit('join', peerUserId);\n        }\n      }\n      for (const clientId of oldSessionClientIds) {\n        if (clientId === this.clientId) {\n          continue;\n        }\n        if (!newSessionClientIds.has(clientId)) {\n          this.emit('sessionClientLeave', clientId);\n        }\n      }\n      for (const clientId of newSessionClientIds) {\n        if (clientId === this.clientId) {\n          continue;\n        }\n        if (!oldSessionClientIds.has(clientId)) {\n          this.emit('sessionClientJoin', clientId);\n        }\n      }\n      for (const [sessionId, oldSessionSocketMap] of oldSessionMap) {\n        const newSessionSocketMap = newSessionMap.get(sessionId);\n        if (typeof newSessionSocketMap === 'undefined') {\n          for (const socketData of oldSessionSocketMap.values()) {\n            this.emit('sessionLeave', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of oldSessionSocketMap) {\n            if (!newSessionSocketMap.has(socketHash)) {\n              this.emit('sessionLeave', socketData);\n            }\n          }\n        }\n      }\n      for (const [sessionId, newSessionSocketMap] of newSessionMap) {\n        const oldSessionSocketMap = oldSessionMap.get(sessionId);\n        if (typeof oldSessionSocketMap === 'undefined') {\n          for (const socketData of newSessionSocketMap.values()) {\n            this.emit('sessionJoin', socketData);\n          }\n        } else {\n          for (const [socketHash, socketData] of newSessionSocketMap) {\n            if (!oldSessionSocketMap.has(socketHash)) {\n              this.emit('sessionJoin', socketData);\n            }\n          }\n        }\n      }\n    };\n    this.braidClient.data.addListener('set', this.handleSet);\n    this.addListener('socketJoin', (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (clientId === this.clientId) {\n        return;\n      }\n      if (this.peerDisconnectTimeoutMap.has(clientId)) {\n        this.logger.info(`Clearing client ${clientId} disconnect timeout after socket join`);\n        clearTimeout(this.peerDisconnectTimeoutMap.get(clientId));\n        this.peerDisconnectTimeoutMap.delete(clientId);\n      }\n      this.addToQueue(clientId, () => this.connectToPeer(socketData));\n    });\n    this.addListener('socketLeave', (socketData:Socket) => {\n      const { clientId } = socketData;\n      if (clientId === this.clientId) {\n        return;\n      }\n      clearTimeout(this.peerDisconnectTimeoutMap.get(clientId));\n      if (this.active) {\n        this.peerDisconnectTimeoutMap.set(clientId, setTimeout(() => {\n          this.peerDisconnectTimeoutMap.delete(clientId);\n          this.addToQueue(clientId, () => this.disconnectFromPeer(socketData));\n        }, 15000));\n      } else {\n        this.addToQueue(clientId, () => this.disconnectFromPeer(socketData));\n      }\n    });\n    this.braidClient.addListener('close', () => {\n      const oldSocketData = [...this.socketMap.values()];\n      const oldUserIds = [...this.userIds];\n      this.socketMap.clear();\n      this.userIds.clear();\n      for (const socketData of oldSocketData) {\n        this.emit('socketLeave', socketData);\n      }\n      for (const oldUserId of oldUserIds) {\n        this.emit('leave', oldUserId);\n      }\n    });\n    this.braidClient.addListener('reconnect', (isReconnecting: boolean) => {\n      if (!isReconnecting) {\n        return;\n      }\n      const startedSessionId = this.startedSessionId;\n      const joinedSessionId = this.joinedSessionId;\n      const handleInitialized = () => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.info(`Restarting session ${startedSessionId}`);\n          this.startSession(startedSessionId).catch((error) => {\n            this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        if (typeof joinedSessionId === 'string') {\n          this.logger.info(`Rejoining session ${joinedSessionId}`);\n          this.joinSession(joinedSessionId).catch((error) => {\n            this.logger.error(`Unable to rejoin session ${joinedSessionId} after reconnect`);\n            this.logger.errorStack(error);\n          });\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleClose = () => {\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      const handleError = (error:Error) => {\n        if (typeof startedSessionId === 'string') {\n          this.logger.error(`Unable to restart session ${startedSessionId} after reconnect`);\n          this.logger.errorStack(error);\n        }\n        this.braidClient.removeListener('initialized', handleInitialized);\n        this.braidClient.removeListener('close', handleClose);\n        this.braidClient.removeListener('error', handleError);\n      };\n      this.braidClient.addListener('initialized', handleInitialized);\n      this.braidClient.addListener('close', handleClose);\n      this.braidClient.addListener('error', handleError);\n    });\n  }\n\n  get sessionClientIds():Set<number> {\n    const sessionId = this.sessionId;\n    if (typeof sessionId !== 'string') {\n      return new Set();\n    }\n    const sessionClientMap = this.sessionMap.get(sessionId);\n    if (typeof sessionClientMap === 'undefined') {\n      return new Set();\n    }\n    const clientIds = new Set(sessionClientMap.keys());\n    clientIds.delete(this.clientId);\n    return clientIds;\n  }\n\n  async init() {\n    const promise = new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(new Error('Closed before initialization completed'));\n      };\n      const handleValue = (key:string, value:any) => {\n        if (key !== this.name) {\n          return;\n        }\n        if (typeof value === 'undefined') {\n          return;\n        }\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        resolve();\n      };\n      const handleError = (error:Error) => {\n        this.removeListener('close', handleClose);\n        this.braidClient.data.removeListener('set', handleValue);\n        this.braidClient.removeListener('error', handleError);\n        reject(error);\n      };\n      this.addListener('close', handleClose);\n      this.braidClient.data.addListener('set', handleValue);\n      this.braidClient.addListener('error', handleError);\n      handleValue(this.name, this.braidClient.data.get(this.name));\n    });\n    try {\n      await Promise.all([\n        this.braidClient.subscribe(this.name),\n        this.braidClient.addServerEventListener(this.name, this.handleMessage.bind(this)),\n      ]);\n      await promise;\n      await this.braidClient.startPublishing(this.publishName);\n    } catch (error) {\n      this.braidClient.logger.error(`Unable to join ${this.roomId}`);\n      throw error;\n    }\n  }\n\n  addToQueue(queueId:string | number, func:() => Promise<*>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      return queue.add(func);\n    }\n    const newQueue = new PQueue({ concurrency: 1 });\n    const promise = newQueue.add(func);\n    this.queueMap.set(queueId, newQueue);\n    newQueue.on('idle', () => {\n      this.queueMap.delete(queueId);\n    });\n    return promise;\n  }\n\n  async publish(type:string, value:Object, options?: { timeoutDuration?: number, CustomError?: Class<RequestError> } = {}):Promise<{ text:string, code:number }> {\n    await this._ready; // eslint-disable-line no-underscore-dangle\n    const timeoutDuration = typeof options.timeoutDuration === 'number' ? options.timeoutDuration : 5000;\n    const CustomError = typeof options.CustomError === 'function' ? options.CustomError : RequestError;\n    const requestId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    return new Promise((resolve, reject) => {\n      const handleClose = () => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        reject(new ClientClosedError(`Client closed before ${type} request completed`));\n      };\n      const timeout = setTimeout(() => {\n        this.requestCallbackMap.delete(requestId);\n        this.removeListener('close', handleClose);\n        reject(new RequestTimeoutError(`${type} requested timed out after ${timeoutDuration}ms`));\n      }, timeoutDuration);\n      const handleResponse = (success:boolean, code: number, text:string) => {\n        this.requestCallbackMap.delete(requestId);\n        clearTimeout(timeout);\n        this.removeListener('close', handleClose);\n        if (success) {\n          resolve({ code, text });\n          return;\n        }\n        reject(new CustomError(text, code));\n      };\n      this.addListener('close', handleClose);\n      this.requestCallbackMap.set(requestId, handleResponse);\n      this.braidClient.publish(this.publishName, { requestId, type, value });\n    });\n  }\n\n  isConnectedToClient(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return false;\n    }\n    return !!peer.connected;\n  }\n\n  async connectToPeer(socket:Socket) {\n    const { userId, serverId, socketId, clientId, socketHash } = socket;\n    const reconnectCount = this.peerReconnectMap.get(clientId) || 0;\n    const reconnectDelay = reconnectCount > 5 ? 30000 : 1000 * (reconnectCount * reconnectCount);\n    if (reconnectDelay > 0) {\n      this.logger.info(`Delaying connect by ${Math.round(reconnectDelay / 1000)} ${reconnectDelay === 1000 ? 'second' : 'seconds'} on attempt ${reconnectCount}`);\n      await new Promise((resolve) => {\n        const timeout = setTimeout(() => {\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        }, reconnectDelay);\n        const handleClose = () => {\n          clearTimeout(timeout);\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        };\n        const handleSocketLeave = ({ socketHash: oldSocketHash }:Socket) => {\n          if (socketHash !== oldSocketHash) {\n            return;\n          }\n          clearTimeout(timeout);\n          this.removeListener('close', handleClose);\n          this.removeListener('socketLeave', handleSocketLeave);\n          resolve();\n        };\n        this.addListener('close', handleClose);\n        this.addListener('socketLeave', handleSocketLeave);\n      });\n      if (!this.socketMap.has(socketHash)) {\n        return;\n      }\n    }\n    const existingPeer = this.peerMap.get(clientId);\n    const options = Object.assign({}, { initiator: clientId > this.clientId }, this.peerOptions);\n    const peer = existingPeer || new SimplePeer(options);\n    this.peerMap.set(clientId, peer);\n    this.peerReconnectMap.set(clientId, reconnectCount + 1);\n    this.emit('peer', { clientId, peer });\n    const addPeerListeners = () => {\n      this.peerReconnectMap.set(clientId, 0);\n      const cleanup = () => {\n        peer.removeListener('stream', handleStream);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('peerReconnect', handlePeerReconnect);\n      };\n      const handleStream = (stream:MediaStream) => {\n        if (!this.sessionClientIds.has(clientId)) {\n          this.logger.error(`Received an unexpected stream from non-session user ${userId} client ${clientId}`);\n          stream.getTracks().forEach((track) => {\n            track.stop();\n            track.dispatchEvent(new Event('stop'));\n          });\n          return;\n        }\n        this.emit('stream', { stream, userId, serverId, socketId, clientId });\n      };\n      const handlePeerClose = () => {\n        this.logger.info(`Disconnected from user ${userId} client ${clientId}`);\n        cleanup();\n        this.emit('disconnect', { userId, serverId, socketId, clientId });\n        if (this.peerMap.has(clientId)) {\n          this.peerMap.delete(clientId);\n          this.connectToPeer(socket);\n          this.logger.warn(`Reconnecting to user ${userId} client ${clientId}`);\n        }\n      };\n      const handlePeerError = (error:Error) => {\n        this.logger.error(`Error in connection to user ${userId} client ${clientId}`);\n        this.logger.errorStack(error);\n        this.emit('peerError', { userId, serverId, socketId, clientId, error });\n      };\n      const handlePeerReconnect = () => {\n        this.logger.info(`Reconnected to user ${userId} client ${clientId}`);\n        cleanup();\n      };\n      peer.addListener('stream', handleStream);\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('error', handlePeerError);\n      peer.addListener('peerReconnect', handlePeerReconnect);\n    };\n    if (peer.connected) {\n      peer.emit('peerReconnect');\n      addPeerListeners();\n      this.emit('connect', { userId, clientId, serverId, socketId, peer });\n      return;\n    }\n    await new Promise((resolve) => {\n      const cleanup = () => {\n        clearTimeout(timeout);\n        peer.removeListener('error', handlePeerError);\n        peer.removeListener('close', handlePeerClose);\n        peer.removeListener('connect', handleConnect);\n        peer.removeListener('signal', handleSignal);\n        this.removeListener('close', handleClose);\n        this.removeListener('socketLeave', handleSocketLeave);\n      };\n      const timeout = setTimeout(() => {\n        cleanup();\n        resolve();\n      }, 5000);\n      const handleConnect = () => {\n        cleanup();\n        addPeerListeners();\n        this.emit('connect', { userId, clientId, serverId, socketId, peer });\n        resolve();\n      };\n      const handleSignal = async (data:Object) => {\n        try {\n          await this.publish(SIGNAL, { serverId, socketId, data }, { CustomError: SignalError });\n        } catch (error) {\n          this.logger.error(`Unable to signal user ${userId} client ${clientId} closed`);\n          this.logger.errorStack(error);\n        }\n      };\n      const handleClose = () => {\n        cleanup();\n        resolve();\n      };\n      const handlePeerClose = () => {\n        this.logger.info(`Connection to user ${userId} client ${clientId} closed`);\n        cleanup();\n        if (this.peerMap.has(clientId)) {\n          this.peerMap.delete(clientId);\n          this.connectToPeer(socket);\n          this.logger.warn(`Reconnecting to user ${userId} client ${clientId}`);\n        }\n        resolve();\n      };\n      const handlePeerError = (error:Error) => {\n        cleanup();\n        this.logger.error(`Error connecting to ${userId}`);\n        this.logger.errorStack(error);\n        this.emit('peerError', { userId, serverId, socketId, clientId, error });\n        this.emit('error', error);\n        resolve();\n      };\n      const handleSocketLeave = ({ socketHash: oldSocketHash }:Socket) => {\n        if (socketHash !== oldSocketHash) {\n          return;\n        }\n        cleanup();\n        this.logger.warn(`Unable to connect to user ${userId} client ${clientId}, socket closed before connection was completed`);\n        resolve();\n      };\n      peer.addListener('error', handlePeerError);\n      peer.addListener('close', handlePeerClose);\n      peer.addListener('connect', handleConnect);\n      peer.addListener('signal', handleSignal);\n      this.addListener('close', handleClose);\n      this.addListener('socketLeave', handleSocketLeave);\n      const signalQueue = this.signalQueueMap.get(clientId);\n      if (Array.isArray(signalQueue)) {\n        while (signalQueue.length > 0) {\n          const data = signalQueue.shift();\n          peer.signal(data);\n        }\n      }\n    });\n  }\n\n  async sendStream(clientId:number, stream:MediaStream) {\n    const peer = await this.getConnectedPeer(clientId);\n    peer.addStream(stream);\n  }\n\n  async disconnectFromPeer({ clientId }:Socket) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer === 'undefined') {\n      return;\n    }\n    this.peerMap.delete(clientId);\n    peer.destroy();\n  }\n\n  async onIdle() {\n    while (this.queueMap.size > 0) {\n      for (const queue of this.queueMap.values()) {\n        await queue.onIdle();\n      }\n      // $FlowFixMe\n      await new Promise((resolve) => queueMicrotask(resolve));\n    }\n  }\n\n  cleanupSession(newSessionId?:string) {\n    const startedSessionId = this.startedSessionId;\n    delete this.startedSessionId;\n    delete this.joinedSessionId;\n    if (typeof startedSessionId === 'string') {\n      this.sessionJoinHandlerMap.delete(startedSessionId);\n    }\n    const oldSessionId = this.sessionId;\n    if (oldSessionId === newSessionId) {\n      return;\n    }\n    const oldSessionClientIds = this.sessionClientIds;\n    this.sessionId = newSessionId;\n    const newSessionClientIds = this.sessionClientIds;\n    for (const clientId of oldSessionClientIds) {\n      if (clientId === this.clientId) {\n        continue;\n      }\n      if (!newSessionClientIds.has(clientId)) {\n        this.emit('sessionClientLeave', clientId);\n      }\n    }\n    const timelineValue = this.data.get(this.clientId);\n    this.data.clear();\n    this.sessionClientOffsetMap.clear();\n    if (typeof timelineValue !== 'undefined') {\n      this.data.set(this.clientId);\n    }\n    for (const clientId of newSessionClientIds) {\n      if (clientId === this.clientId) {\n        continue;\n      }\n      if (!oldSessionClientIds.has(clientId)) {\n        this.emit('sessionClientJoin', clientId);\n      }\n    }\n  }\n\n  didStartSession() {\n    if (!this.sessionId) {\n      return false;\n    }\n    return this.startedSessionId === this.sessionId;\n  }\n\n  async inviteToSession(userId:string, data?:Object, sessionJoinHandler?: SessionJoinHandler) {\n    const queue = this.queueMap.get(SESSION_QUEUE);\n    if (typeof queue !== 'undefined') {\n      await queue.onIdle();\n    }\n    const sessionId = this.sessionId;\n    if (sessionId === 'string') {\n      await this.publish(INVITE_TO_SESSION, { userId, sessionId, data }, { CustomError: InviteToSessionError });\n      return;\n    }\n    // $FlowFixMe\n    const newSessionId = globalThis.crypto.randomUUID(); // eslint-disable-line no-undef\n    const automaticSessionJoinHandler = async (values) => {\n      if (values.userId === userId) {\n        return [true, 200, 'Authorized'];\n      }\n      if (typeof sessionJoinHandler === 'function') {\n        return sessionJoinHandler(values);\n      }\n      return [true, 200, 'Authorized'];\n    };\n    await this.startSession(newSessionId, automaticSessionJoinHandler);\n    await this.publish(INVITE_TO_SESSION, { userId, sessionId: newSessionId, data }, { CustomError: InviteToSessionError });\n  }\n\n  async startSession(sessionId:string, sessionJoinHandler?: SessionJoinHandler) {\n    await this.addToQueue(SESSION_QUEUE, () => this.publish(START_SESSION, { sessionId }, { CustomError: StartSessionError }));\n    this.cleanupSession(sessionId);\n    this.startedSessionId = sessionId;\n    if (typeof sessionJoinHandler === 'function') {\n      this.sessionJoinHandlerMap.set(sessionId, sessionJoinHandler);\n    } else {\n      this.sessionJoinHandlerMap.set(sessionId, () => [true, 200, 'Authorized']);\n    }\n  }\n\n  //  addMedia(clientId: number, mediaStream: MediaStream) {\n  //    if(this.sessionClientIds.has(clientId)) {\n  //      throw new Error(`Unable to add media, client ${clientId} is not part of the active session`);\n  //    }\n  //\n  //  }\n\n  didJoinSession() {\n    if (!this.sessionId) {\n      return false;\n    }\n    return this.joinedSessionId === this.sessionId;\n  }\n\n  async joinSession(sessionId:string, timeoutDuration?: number = 30000) {\n    await this.addToQueue(SESSION_QUEUE, () => this.publish(JOIN_SESSION, { sessionId, timeoutDuration }, { CustomError: JoinSessionError }));\n    this.cleanupSession(sessionId);\n    this.joinedSessionId = sessionId;\n  }\n\n  async leaveSession() {\n    await this.addToQueue(SESSION_QUEUE, () => this.publish(LEAVE_SESSION, {}, { CustomError: LeaveSessionError }));\n    this.cleanupSession();\n  }\n\n  async handleMessage(message:{ requestId?: number, type:string, value:Object }) {\n    if (typeof message !== 'object') {\n      this.logger.error('Invalid message format');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    const { requestId, type, value } = message;\n    if (typeof type !== 'string') {\n      this.logger.error('Invalid message format, type property should be of type \"string\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (typeof value !== 'object') {\n      this.logger.error('Invalid message format, value property should be of type \"object\"');\n      this.logger.error(JSON.stringify(message));\n      return;\n    }\n    if (type === RESPONSE && typeof requestId === 'number') {\n      const callback = this.requestCallbackMap.get(requestId);\n      if (typeof callback !== 'function') {\n        this.logger.error(`Callback for request ${requestId} does not exist`);\n        return;\n      }\n      const { success, code, text } = value;\n      if (typeof success !== 'boolean') {\n        this.logger.error('Response message contained an invalid value success property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value success property');\n        return;\n      }\n      if (typeof code !== 'number') {\n        this.logger.error('Response message contained an invalid value code property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value code property');\n        return;\n      }\n      if (typeof text !== 'string') {\n        this.logger.error('Response message contained an invalid value text property');\n        this.logger.error(JSON.stringify(message));\n        callback(false, 400, 'Response message contained an invalid value text property');\n        return;\n      }\n      callback(success, code, text);\n      return;\n    }\n    switch (type) {\n      case SIGNAL:\n        try {\n          const {\n            clientId,\n            serverId,\n            socketId,\n            data,\n          } = value;\n          if (typeof serverId !== 'number') {\n            this.logger.error('Signal message contained an invalid server ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof socketId !== 'number') {\n            this.logger.error('Signal message contained an invalid socket ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof data !== 'object') {\n            this.logger.error('Signal message contained an invalid data property');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const peer = this.peerMap.get(clientId);\n          if (typeof peer === 'undefined') {\n            const signalQueue = this.signalQueueMap.get(clientId);\n            if (Array.isArray(signalQueue)) {\n              signalQueue.push(data);\n              return;\n            }\n            this.signalQueueMap.set(clientId, [data]);\n            return;\n          }\n          if (peer.destroyed || peer.destroying) {\n            return;\n          }\n          peer.signal(data);\n        } catch (error) {\n          this.logger.error('Unable to process signal message');\n          this.logger.errorStack(error);\n        }\n        break;\n      case ABORT_SESSION_JOIN_REQUEST:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Abort session join request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Abort session join request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const existing = this.sessionJoinRequestMap.get(requestHash);\n          if (!Array.isArray(existing)) {\n            this.logger.warn(`Unable to abort session join request for user ${userId} and session ${sessionId}, request does not exist`);\n            return;\n          }\n          this.logger.warn(`Aborting session join request for user ${userId} and session ${sessionId}`);\n          existing[1].abort();\n        } catch (error) {\n          this.logger.error('Unable to process session abort join request');\n          this.logger.errorStack(error);\n        }\n        break;\n      case SESSION_JOIN_REQUEST:\n        try {\n          const {\n            userId,\n            sessionId,\n          } = value;\n          if (typeof userId !== 'string') {\n            this.logger.error('Session join request contained an invalid user ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          if (typeof sessionId !== 'string') {\n            this.logger.error('Session join request contained an invalid session ID');\n            this.logger.error(JSON.stringify(message));\n            return;\n          }\n          const requestHash = `${userId}:${sessionId}`;\n          const existing = this.sessionJoinRequestMap.get(requestHash);\n          if (Array.isArray(existing)) {\n            this.logger.warn(`Session join request for user ${userId} and session ${sessionId} already exists`);\n            await existing[0];\n            return;\n          }\n          const sessionJoinHandler = this.sessionJoinHandlerMap.get(sessionId);\n          if (typeof sessionJoinHandler !== 'function') {\n            this.logger.error(`Handler for session ${sessionId} does not exist`);\n            return;\n          }\n          const abortController = new AbortController();\n          abortController.signal.addEventListener('abort', () => {\n            this.sessionJoinRequestMap.delete(requestHash);\n          });\n          const promise = (async () => {\n            let response = [false, 500, 'Error in sesssion join handler'];\n            try {\n              response = await sessionJoinHandler({ userId, sessionId, abortSignal: abortController.signal });\n            } catch (error) {\n              this.logger.error(`Unable to respond to session join request for user ${userId} and session ${sessionId}, error in session join handler`);\n              this.logger.errorStack(error);\n            }\n            if (abortController.signal.aborted) {\n              this.logger.warn(`Session join request for user ${userId} and session ${sessionId} was aborted`);\n              return;\n            }\n            try {\n              await this.publish(SESSION_JOIN_RESPONSE, {\n                userId,\n                sessionId,\n                success: response[0],\n                code: response[1],\n                text: response[2],\n              }, { CustomError: SessionJoinResponseError });\n            } catch (error) {\n              this.logger.error(`Unable to send session join request for user ${userId} and session ${sessionId}`);\n              this.logger.errorStack(error);\n            }\n            this.sessionJoinRequestMap.delete(requestHash);\n          })();\n          this.sessionJoinRequestMap.set(requestHash, [promise, abortController]);\n          await promise;\n        } catch (error) {\n          this.logger.error('Unable to process session join request');\n          this.logger.errorStack(error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown message type ${type}`);\n    }\n  }\n\n  async getConnectedPeer(clientId:number) {\n    const peer = this.peerMap.get(clientId);\n    if (typeof peer !== 'undefined' && peer.connected) {\n      return peer;\n    }\n    return new Promise((resolve, reject) => {\n      let _peer; // eslint-disable-line no-underscore-dangle\n      const cleanup = () => {\n        this.removeListener('sessionClientLeave', handleSessionClientLeave);\n        this.removeListener('connect', handleConnect);\n        this.removeListener('peer', handlePeer);\n        if (typeof _peer !== 'undefined') {\n          _peer.removeListener('close', handlePeerClose);\n          _peer.removeListener('error', handlePeerError);\n        }\n      };\n      const handlePeerClose = () => {\n        cleanup();\n        reject(new Error(`Peer ${clientId} closed before connection was established`));\n      };\n      const handlePeerError = (error:Error) => {\n        cleanup();\n        reject(error);\n      };\n      const handlePeer = ({ clientId: newClientId, peer: _p }) => {\n        if (newClientId !== clientId) {\n          return;\n        }\n        _peer = _p;\n        _p.addListener('close', handlePeerClose);\n        _p.addListener('error', handlePeerError);\n      };\n      const handleConnect = ({ clientId: newClientId, peer: _p }) => {\n        if (newClientId !== clientId) {\n          return;\n        }\n        cleanup();\n        resolve(_p);\n      };\n      const handleSessionClientLeave = (oldClientId:number) => {\n        if (clientId !== oldClientId) {\n          return;\n        }\n        cleanup();\n        reject(new Error(`Client ${clientId} left before connection was established`));\n      };\n      this.addListener('sessionClientLeave', handleSessionClientLeave);\n      this.addListener('connect', handleConnect);\n      this.addListener('peer', handlePeer);\n    });\n  }\n\n  async handleSessionClientJoin(clientId:number) {\n    let interval;\n    let _peer; // eslint-disable-line no-underscore-dangle\n    let offset = 0;\n    const abortController = new AbortController();\n    const abortSignal = abortController.signal;\n    const cleanup = () => {\n      abortController.abort();\n      this.removeListener('sessionClientLeave', handleSessionClientLeave);\n      if (typeof _peer !== 'undefined') {\n        _peer.removeListener('close', handlePeerClose);\n        _peer.removeListener('data', handlePeerData);\n      }\n      this.data.removeListener('publish', handleDataPublish);\n      clearInterval(interval);\n    };\n    const handlePeerClose = () => {\n      cleanup();\n      if (this.sessionClientIds.has(clientId)) {\n        this.handleSessionClientJoin(clientId);\n      }\n    };\n    const handleSessionClientLeave = (oldClientId:number) => {\n      if (clientId !== oldClientId) {\n        return;\n      }\n      cleanup();\n    };\n    const handleDataPublish = (queue:[Array<*>, Array<*>]) => {\n      sendToPeer(new ObservedRemoveDump(queue));\n    };\n    const sendToPeer = (unpacked: any) => {\n      if (typeof peer === 'undefined') {\n        throw new Error('Peer does not exist');\n      }\n      peer.send(pack(unpacked));\n    };\n    const handlePeerData = (packed:Buffer) => {\n      const message = unpack(packed);\n      if (message instanceof Ping) {\n        sendToPeer(new Pong(message.timestamp, Date.now()));\n      } else if (message instanceof Pong) {\n        offset = (Date.now() - message.wallclock) - (performance.now() - message.timestamp) / 2;\n        this.sessionClientOffsetMap.set(clientId, offset);\n      } else if (message instanceof ObservedRemoveDump) {\n        this.data.process(message.queue);\n      }\n    };\n    this.addListener('sessionClientLeave', handleSessionClientLeave);\n    if (!this.isConnectedToClient(clientId)) {\n      await new Promise((resolve) => {\n        const handleConnect = ({ clientId: newClientId }) => {\n          if (newClientId !== clientId) {\n            return;\n          }\n          this.removeListener('connect', handleConnect);\n          abortSignal.removeEventListener('abort', handleAbort);\n          resolve();\n        };\n        const handleAbort = () => {\n          this.removeListener('connect', handleConnect);\n          abortSignal.removeEventListener('abort', handleAbort);\n          resolve();\n        };\n        this.addListener('connect', handleConnect);\n        abortSignal.addEventListener('abort', handleAbort);\n      });\n      if (abortSignal.aborted) {\n        return;\n      }\n    }\n    const peer = this.peerMap.get(clientId);\n    _peer = peer;\n    if (typeof peer === 'undefined') {\n      throw new Error('Peer does not exist');\n    }\n    peer.addListener('close', handlePeerClose);\n    peer.addListener('data', handlePeerData);\n    interval = setInterval(() => {\n      peer.send(pack(new Ping(performance.now())));\n    }, 1000);\n    peer.send(pack(new Ping(performance.now())));\n    this.data.addListener('publish', handleDataPublish);\n    handleDataPublish(this.data.dump());\n  }\n\n  close() {\n    this.active = false;\n    const oldSessionClientIds = this.sessionClientIds;\n    const oldSocketData = [...this.socketMap.values()];\n    const oldUserIds = [...this.userIds];\n    this.braidClient.data.removeListener('set', this.handleSet);\n    this.braidClient.stopPublishing(this.publishName);\n    this.braidClient.unsubscribe(this.name);\n    this.braidClient.removeServerEventListener(this.name);\n    this.socketMap.clear();\n    this.userIds.clear();\n    for (const timeout of this.peerDisconnectTimeoutMap.values()) {\n      clearTimeout(timeout);\n    }\n    for (const clientId of oldSessionClientIds) {\n      this.emit('sessionClientLeave', clientId);\n    }\n    for (const socketData of oldSocketData) {\n      this.emit('socketLeave', socketData);\n    }\n    for (const userId of oldUserIds) {\n      this.emit('leave', userId);\n    }\n    this.emit('close');\n  }\n}\n\n"],"file":"index.js"}